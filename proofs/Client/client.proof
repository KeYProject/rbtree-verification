\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Aug 26 16:45:49 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\include "../../iSet.key";

\proofObligation "#Proof Obligation Settings
#Sat Aug 26 16:45:49 CEST 2023
contract=Client[Client\\:\\:main([Ljava.lang.String)].JML normal_behavior operation contract.0
name=Client[Client\\:\\:main([Ljava.lang.String)].JML normal_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "johanna" ) (keyVersion "167932a84464f61ce5aea5172abb98fb7bad2121"))
(keyLog "1" (keyUser "johanna" ) (keyVersion "167932a84464f61ce5aea5172abb98fb7bad2121"))

(autoModeTime "209375")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "assignment" (formula "5") (term "1"))
 (builtin "One Step Simplification" (formula "5"))
(rule "nonNull" (formula "4") (inst "i=i"))
(rule "sub_literals" (formula "4") (term "2,1,0,1,1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "greater_literals" (formula "4") (term "0,1"))
 (builtin "One Step Simplification" (formula "4"))
(rule "andLeft" (formula "4"))
(rule "notLeft" (formula "4"))
(rule "replace_known_right" (formula "2") (term "0") (ifseqformula "5"))
 (builtin "One Step Simplification" (formula "2"))
(rule "narrowSelectArrayType" (formula "4") (term "0,0,1,0") (ifseqformula "1") (ifseqformula "5"))
(rule "inEqSimp_commuteLeq" (formula "4") (term "0,0,0"))
(rule "commute_and" (formula "4") (term "0,0"))
(rule "methodBodyExpand" (formula "6") (term "1") (newnames "heapBefore_main,savedHeapBefore_main,_argsBefore_main"))
 (builtin "One Step Simplification" (formula "6"))
(rule "variableDeclarationAssign" (formula "6") (term "1"))
(rule "variableDeclaration" (formula "6") (term "1") (newnames "t"))
 (builtin "Use Operation Contract" (formula "6") (newnames "heapBefore_RBTree,self,exc_0,heapAfter_RBTree,anon_heap_RBTree") (contract "RBTree[RBTree::RBTree()].JML normal_behavior operation contract.0"))
(branch "Post (RBTree)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "10"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "12"))
   (rule "andLeft" (formula "9"))
   (rule "notLeft" (formula "8"))
   (rule "andLeft" (formula "13"))
   (rule "notLeft" (formula "8"))
   (rule "assignment" (formula "17") (term "1"))
    (builtin "One Step Simplification" (formula "17"))
   (rule "pullOutSelect" (formula "8") (term "0") (inst "selectSK=java_lang_Object_created__0"))
   (rule "simplifySelectOfAnonEQ" (formula "8") (ifseqformula "6"))
    (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
   (rule "applyEqReverse" (formula "9") (term "0") (ifseqformula "8"))
   (rule "hideAuxiliaryEq" (formula "8"))
   (rule "limit_java_lang_Object__inv_" (formula "13"))
   (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "13"))
    (builtin "Use Operation Contract" (formula "18") (newnames "heapBefore_add,exc_1,heapAfter_add,anon_heap_add") (contract "RBTree[RBTree::add(int)].JML normal_behavior operation contract.0"))
   (branch "Post (add)"
       (builtin "One Step Simplification" (formula "20"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "18"))
      (rule "andLeft" (formula "19"))
      (rule "andLeft" (formula "20"))
      (rule "eqSymm" (formula "19"))
      (rule "applyEq" (formula "19") (term "0,0") (ifseqformula "11"))
      (rule "commuteUnion" (formula "20") (term "1"))
      (rule "limit_java_lang_Object__inv_" (formula "21"))
      (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "22"))
       (builtin "One Step Simplification" (formula "21"))
       (builtin "Use Operation Contract" (formula "26") (newnames "heapBefore_add_0,exc_2,heapAfter_add_0,anon_heap_add_0") (contract "RBTree[RBTree::add(int)].JML normal_behavior operation contract.0"))
      (branch "Post (add)"
          (builtin "One Step Simplification" (formula "28"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "26"))
         (rule "andLeft" (formula "27"))
         (rule "andLeft" (formula "28"))
         (rule "eqSymm" (formula "27"))
         (rule "commuteUnion" (formula "28") (term "1"))
         (rule "limit_java_lang_Object__inv_" (formula "29"))
         (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "30"))
          (builtin "One Step Simplification" (formula "29"))
          (builtin "Use Operation Contract" (formula "34") (newnames "heapBefore_add_1,exc_3,heapAfter_add_1,anon_heap_add_1") (contract "RBTree[RBTree::add(int)].JML normal_behavior operation contract.0"))
         (branch "Post (add)"
             (builtin "One Step Simplification" (formula "36"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "andLeft" (formula "32"))
            (rule "andLeft" (formula "33"))
            (rule "andLeft" (formula "34"))
            (rule "andLeft" (formula "34"))
            (rule "andLeft" (formula "35"))
            (rule "andLeft" (formula "36"))
            (rule "eqSymm" (formula "35"))
            (rule "commuteUnion" (formula "36") (term "1"))
            (rule "limit_java_lang_Object__inv_" (formula "37"))
            (rule "replace_known_left" (formula "37") (term "1") (ifseqformula "38"))
             (builtin "One Step Simplification" (formula "37"))
             (builtin "Use Operation Contract" (formula "42") (newnames "heapBefore_add_2,exc_4,heapAfter_add_2,anon_heap_add_2") (contract "RBTree[RBTree::add(int)].JML normal_behavior operation contract.0"))
            (branch "Post (add)"
                (builtin "One Step Simplification" (formula "44"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "andLeft" (formula "40"))
               (rule "andLeft" (formula "41"))
               (rule "andLeft" (formula "42"))
               (rule "andLeft" (formula "42"))
               (rule "andLeft" (formula "43"))
               (rule "andLeft" (formula "44"))
               (rule "eqSymm" (formula "43"))
               (rule "commuteUnion" (formula "44") (term "1"))
               (rule "limit_java_lang_Object__inv_" (formula "45"))
               (rule "replace_known_left" (formula "45") (term "1") (ifseqformula "46"))
                (builtin "One Step Simplification" (formula "45"))
                (builtin "JML assert" (formula "50"))
               (branch "Validity"
                   (builtin "One Step Simplification" (formula "50") (userinteraction))
                  (rule "allRight" (formula "50") (inst "sk=k_0") (userinteraction))
                  (rule "setEq" (formula "11") (inst "iv=iv") (userinteraction))
                  (rule "setEq" (formula "19") (inst "iv=iv") (userinteraction))
                  (rule "setEq" (formula "27") (inst "iv=iv") (userinteraction))
                  (rule "setEq" (formula "35") (inst "iv=iv") (userinteraction))
                  (rule "setEq" (formula "43") (inst "iv=iv") (userinteraction))
                   (builtin "Evaluate Query" (formula "50") (term "0") (newnames "key,callee,queryResult,res_contains") (userinteraction))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "replaceKnownQuery000000_2" (formula "51") (term "0"))
                  (rule "notLeft" (formula "1"))
                  (rule "eqSymm" (formula "51"))
                  (rule "eqSymm" (formula "47") (term "0,0,1"))
                  (rule "inSetUnion" (formula "27") (term "0,0"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "inSetUnion" (formula "43") (term "0,0"))
                   (builtin "One Step Simplification" (formula "43"))
                  (rule "inSetUnion" (formula "19") (term "0,0"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "inSetUnion" (formula "35") (term "0,0"))
                   (builtin "One Step Simplification" (formula "35"))
                  (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
                  (rule "variableDeclaration" (formula "47") (term "1") (newnames "queryResult"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
                  (rule "nnf_imp2or" (formula "4") (term "0"))
                  (rule "nnf_notAnd" (formula "4") (term "0,0"))
                  (rule "inEqSimp_notGeq" (formula "4") (term "1,0,0"))
                  (rule "times_zero_1" (formula "4") (term "1,0,0,1,0,0"))
                  (rule "add_zero_right" (formula "4") (term "0,0,1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "1,0,0"))
                  (rule "mul_literals" (formula "4") (term "1,1,0,0"))
                  (rule "inEqSimp_notLeq" (formula "4") (term "0,0,0"))
                  (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0,0,0"))
                  (rule "mul_literals" (formula "4") (term "0,1,0,0,0,0,0"))
                  (rule "polySimp_addAssoc" (formula "4") (term "0,0,0,0,0"))
                  (rule "add_literals" (formula "4") (term "0,0,0,0,0,0"))
                  (rule "add_zero_left" (formula "4") (term "0,0,0,0,0"))
                  (rule "inEqSimp_sepPosMonomial1" (formula "4") (term "0,0,0"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "1,0,0,0"))
                  (rule "polySimp_elimOne" (formula "4") (term "1,0,0,0"))
                  (rule "commute_or_2" (formula "51") (term "0,0"))
                  (rule "commute_or_2" (formula "4") (term "0"))
                  (rule "commute_or" (formula "4") (term "0,0"))
                  (rule "commute_or_2" (formula "4") (term "0"))
                  (rule "cnf_eqv" (formula "27") (term "0"))
                  (rule "nnf_notOr" (formula "27") (term "0,1,0"))
                  (rule "distr_forallAnd" (formula "27"))
                  (rule "andLeft" (formula "27"))
                  (rule "commute_or" (formula "28") (term "0"))
                  (rule "commute_or_2" (formula "27") (term "0"))
                  (rule "cnf_rightDist" (formula "28") (term "0"))
                  (rule "distr_forallAnd" (formula "28"))
                  (rule "andLeft" (formula "28"))
                  (rule "commute_or" (formula "29") (term "0"))
                   (builtin "One Step Simplification" (formula "29"))
                  (rule "commute_or" (formula "28") (term "0"))
                  (rule "cnf_eqv" (formula "45") (term "0"))
                  (rule "nnf_notOr" (formula "45") (term "0,1,0"))
                  (rule "distr_forallAnd" (formula "45"))
                  (rule "andLeft" (formula "45"))
                  (rule "commute_or" (formula "46") (term "0"))
                  (rule "commute_or_2" (formula "45") (term "0"))
                  (rule "cnf_rightDist" (formula "46") (term "0"))
                  (rule "distr_forallAnd" (formula "46"))
                  (rule "andLeft" (formula "46"))
                  (rule "commute_or" (formula "46") (term "0"))
                  (rule "commute_or" (formula "47") (term "0"))
                   (builtin "One Step Simplification" (formula "47"))
                  (rule "cnf_eqv" (formula "19") (term "0"))
                  (rule "distr_forallAnd" (formula "19"))
                  (rule "andLeft" (formula "19"))
                  (rule "commute_or" (formula "20") (term "0"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "commute_or" (formula "19") (term "0"))
                  (rule "cnf_eqv" (formula "38") (term "0"))
                  (rule "nnf_notOr" (formula "38") (term "0,1,0"))
                  (rule "distr_forallAnd" (formula "38"))
                  (rule "andLeft" (formula "38"))
                  (rule "commute_or_2" (formula "38") (term "0"))
                  (rule "commute_or" (formula "39") (term "0"))
                  (rule "cnf_rightDist" (formula "39") (term "0"))
                  (rule "distr_forallAnd" (formula "39"))
                  (rule "andLeft" (formula "39"))
                  (rule "commute_or" (formula "40") (term "0"))
                   (builtin "One Step Simplification" (formula "40"))
                  (rule "commute_or" (formula "39") (term "0"))
                   (builtin "Use Operation Contract" (formula "54") (newnames "heapBefore_contains,result_contains,exc_5") (contract "RBTree[RBTree::contains(int)].JML normal_behavior operation contract.0"))
                  (branch "Post (contains)"
                      (builtin "One Step Simplification" (formula "55"))
                      (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "47")) (ifInst ""  (formula "53")))
                     (rule "andLeft" (formula "54"))
                     (rule "andLeft" (formula "55"))
                     (rule "assignment" (formula "56") (term "1"))
                      (builtin "One Step Simplification" (formula "56"))
                     (rule "methodCallEmpty" (formula "56") (term "1"))
                      (builtin "One Step Simplification" (formula "56"))
                     (rule "emptyModality" (formula "56") (term "1"))
                      (builtin "One Step Simplification" (formula "56"))
                     (rule "notRight" (formula "56"))
                     (rule "eqSymm" (formula "1"))
                     (rule "applyEq" (formula "56") (term "0,1") (ifseqformula "1"))
                     (rule "ifthenelse_split" (formula "60") (term "0"))
                     (branch "(k_0 = -3 ∨ k_0 = 5)«SC» ∨ k_0 = 7 ∨ k_0 = 9 TRUE"
                        (rule "eqSymm" (formula "61"))
                        (rule "replace_known_right" (formula "57") (term "1") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "57"))
                        (rule "notLeft" (formula "57"))
                        (rule "apply_eq_boolean" (formula "2") (term "1") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "allLeft" (formula "50") (inst "t=k_0"))
                        (rule "replace_known_right" (formula "50") (term "1") (ifseqformula "58"))
                         (builtin "One Step Simplification" (formula "50"))
                        (rule "notLeft" (formula "50"))
                        (rule "allLeft" (formula "50") (inst "t=Z(9(#))"))
                        (rule "replace_known_left" (formula "50") (term "0,0") (ifseqformula "41"))
                         (builtin "One Step Simplification" (formula "50"))
                        (rule "allLeft" (formula "30") (inst "t=Z(neglit(3(#)))"))
                        (rule "replace_known_left" (formula "30") (term "0,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "allLeft" (formula "41") (inst "t=k_0"))
                        (rule "replace_known_right" (formula "41") (term "1") (ifseqformula "59"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "notLeft" (formula "41"))
                        (rule "allLeft" (formula "41") (inst "t=Z(5(#))"))
                        (rule "replace_known_left" (formula "41") (term "0,0") (ifseqformula "32"))
                         (builtin "One Step Simplification" (formula "41"))
                        (rule "allLeft" (formula "42") (inst "t=Z(neglit(3(#)))"))
                        (rule "replace_known_left" (formula "42") (term "0,0") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "42"))
                        (rule "allLeft" (formula "31") (inst "t=k_0"))
                        (rule "replace_known_right" (formula "31") (term "1") (ifseqformula "61"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "notLeft" (formula "31"))
                        (rule "allLeft" (formula "54") (inst "t=Z(5(#))"))
                        (rule "replace_known_left" (formula "54") (term "0,0") (ifseqformula "41"))
                         (builtin "One Step Simplification" (formula "54"))
                        (rule "allLeft" (formula "55") (inst "t=Z(neglit(3(#)))"))
                        (rule "replace_known_left" (formula "55") (term "0,0") (ifseqformula "42"))
                         (builtin "One Step Simplification" (formula "55"))
                        (rule "arrayLengthNotNegative" (formula "5") (term "1,1,0"))
                        (rule "arrayLengthIsAnInt" (formula "6") (term "1,1,0"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "true_left" (formula "6"))
                        (rule "cut_direct" (formula "1") (term "1"))
                        (branch "CUT: k_0 = 9 TRUE"
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "applyEqRigid" (formula "64") (term "0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "67") (term "0") (ifseqformula "1"))
                           (rule "close" (formula "67") (ifseqformula "54"))
                        )
                        (branch "CUT: k_0 = 9 FALSE"
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "cut_direct" (formula "1") (term "1"))
                           (branch "CUT: k_0 = 7 TRUE"
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "applyEqRigid" (formula "68") (term "0") (ifseqformula "1"))
                              (rule "close" (formula "68") (ifseqformula "58"))
                           )
                           (branch "CUT: k_0 = 7 FALSE"
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "cut_direct" (formula "1") (term "1"))
                              (branch "CUT: k_0 = 5 TRUE"
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "true_left" (formula "2"))
                                 (rule "applyEq" (formula "66") (term "0") (ifseqformula "1"))
                                 (rule "close" (formula "66") (ifseqformula "33"))
                              )
                              (branch "CUT: k_0 = 5 FALSE"
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "applyEqRigid" (formula "64") (term "0") (ifseqformula "1"))
                                 (rule "equal_literals" (formula "64"))
                                 (rule "false_right" (formula "64"))
                                 (rule "applyEq" (formula "69") (term "0") (ifseqformula "1"))
                                 (rule "close" (formula "69") (ifseqformula "56"))
                              )
                           )
                        )
                     )
                     (branch "(k_0 = -3 ∨ k_0 = 5)«SC» ∨ k_0 = 7 ∨ k_0 = 9 FALSE"
                        (rule "orRight" (formula "60"))
                        (rule "orRight" (formula "60"))
                        (rule "orRight" (formula "60"))
                        (rule "eqSymm" (formula "64"))
                         (builtin "One Step Simplification" (formula "64"))
                        (rule "notRight" (formula "64"))
                        (rule "replace_known_left" (formula "57") (term "1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "57"))
                        (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "1"))
                        (rule "allLeft" (formula "51") (inst "t=Z(9(#))"))
                        (rule "replace_known_left" (formula "51") (term "0,0") (ifseqformula "42"))
                         (builtin "One Step Simplification" (formula "51"))
                        (rule "allLeft" (formula "50") (inst "t=k_0"))
                        (rule "replace_known_left" (formula "50") (term "0,1,0") (ifseqformula "59"))
                         (builtin "One Step Simplification" (formula "50") (ifInst ""  (formula "65")))
                        (rule "allLeft" (formula "31") (inst "t=Z(neglit(3(#)))"))
                        (rule "replace_known_left" (formula "31") (term "0,0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "allLeft" (formula "41") (inst "t=k_0"))
                        (rule "replace_known_right" (formula "41") (term "1") (ifseqformula "68"))
                         (builtin "One Step Simplification" (formula "41") (ifInst ""  (formula "52")))
                        (rule "allLeft" (formula "30") (inst "t=k_0"))
                        (rule "replace_known_right" (formula "30") (term "1") (ifseqformula "67"))
                         (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "42")))
                        (rule "allLeft" (formula "21") (inst "t=k_0"))
                        (rule "replace_known_left" (formula "21") (term "0,0") (ifseqformula "31"))
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "67")))
                        (rule "closeFalse" (formula "21"))
                     )
                  )
                  (branch "Exceptional Post (contains)"
                      (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "47")) (ifInst ""  (formula "53")))
                      (builtin "One Step Simplification" (formula "55"))
                     (rule "andLeft" (formula "54"))
                     (rule "andLeft" (formula "54"))
                     (rule "andLeft" (formula "56"))
                     (rule "notLeft" (formula "54"))
                     (rule "close" (formula "57") (ifseqformula "56"))
                  )
                  (branch "Pre (contains)"
                      (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "47")) (ifInst ""  (formula "53")))
                     (rule "wellFormedAnonEQ" (formula "54") (term "0") (ifseqformula "45"))
                     (rule "wellFormedAnonEQ" (formula "54") (term "0,0") (ifseqformula "35"))
                     (rule "wellFormedAnonEQ" (formula "54") (term "0,0,0") (ifseqformula "25"))
                     (rule "wellFormedAnonEQ" (formula "54") (term "0,0,0,0") (ifseqformula "16"))
                     (rule "wellFormedAnonEQ" (formula "54") (term "0,0,0,0,0") (ifseqformula "6"))
                     (rule "replace_known_left" (formula "54") (term "1,0,0") (ifseqformula "34"))
                      (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "15")) (ifInst ""  (formula "24")) (ifInst ""  (formula "44")))
                     (rule "pullOutSelect" (formula "54") (term "0") (inst "selectSK=java_lang_Object_created__1"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "46"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "57")))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "55"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "ifEqualsTRUE" (formula "54"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "orRight" (formula "54"))
                     (rule "replace_known_right" (formula "55") (term "0,0") (ifseqformula "54"))
                      (builtin "One Step Simplification" (formula "55"))
                     (rule "pullOutSelect" (formula "54") (term "0") (inst "selectSK=java_lang_Object_created__2"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "36"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "59")))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "55"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "ifEqualsTRUE" (formula "54"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "orRight" (formula "54"))
                     (rule "replace_known_right" (formula "55") (term "0,0") (ifseqformula "54"))
                      (builtin "One Step Simplification" (formula "55"))
                     (rule "pullOutSelect" (formula "54") (term "0") (inst "selectSK=java_lang_Object_created__3"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "26"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "61")))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "apply_eq_boolean" (formula "1") (term "1") (ifseqformula "55"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "notLeft" (formula "1"))
                     (rule "ifEqualsTRUE" (formula "54"))
                      (builtin "One Step Simplification" (formula "54"))
                     (rule "orRight" (formula "54"))
                     (rule "replace_known_right" (formula "55") (term "0,0") (ifseqformula "54"))
                      (builtin "One Step Simplification" (formula "55"))
                     (rule "pullOutSelect" (formula "54") (term "0") (inst "selectSK=java_lang_Object_created__4"))
                     (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "63")))
                     (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
                     (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0,0,0,0"))
                     (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0,0,0,0"))
                     (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "55") (term "0") (ifseqformula "1"))
                     (rule "close" (formula "55") (ifseqformula "9"))
                  )
                  (branch "Null reference (callee = null)"
                      (builtin "One Step Simplification" (formula "54") (ifInst ""  (formula "56")))
                     (rule "closeTrue" (formula "54"))
                  )
               )
               (branch "Usage"
                   (builtin "One Step Simplification" (formula "50"))
                  (rule "impRight" (formula "50"))
                  (rule "eqSymm" (formula "1") (term "0"))
                  (rule "emptyStatement" (formula "51") (term "1"))
                  (rule "commute_or_2" (formula "1") (term "0,0,0"))
                   (builtin "JML assert" (formula "51"))
                  (branch "Validity"
                      (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "43")))
                     (rule "closeTrue" (formula "51"))
                  )
                  (branch "Usage"
                      (builtin "One Step Simplification" (formula "51") (ifInst ""  (formula "43")))
                     (rule "emptyStatement" (formula "51") (term "1"))
                     (rule "methodCallEmpty" (formula "51") (term "1"))
                     (rule "tryEmpty" (formula "51") (term "1"))
                      (builtin "One Step Simplification" (formula "51"))
                     (rule "emptyModality" (formula "51") (term "1"))
                      (builtin "One Step Simplification" (formula "51"))
                     (rule "closeTrue" (formula "51"))
                  )
               )
            )
            (branch "Exceptional Post (add)"
                (builtin "One Step Simplification" (formula "44"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "andLeft" (formula "40"))
               (rule "andLeft" (formula "41"))
               (rule "andLeft" (formula "41"))
               (rule "andLeft" (formula "43"))
               (rule "notLeft" (formula "41"))
               (rule "close" (formula "44") (ifseqformula "43"))
            )
            (branch "Pre (add)"
                (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "34")) (ifInst ""  (formula "38")))
               (rule "wellFormedAnonEQ" (formula "42") (term "0") (ifseqformula "32"))
               (rule "wellFormedAnonEQ" (formula "42") (term "0,0") (ifseqformula "24"))
               (rule "wellFormedAnonEQ" (formula "42") (term "0,0,0") (ifseqformula "16"))
               (rule "wellFormedAnonEQ" (formula "42") (term "0,0,0,0") (ifseqformula "6"))
               (rule "replace_known_left" (formula "42") (term "1,0") (ifseqformula "31"))
                (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")) (ifInst ""  (formula "15")) (ifInst ""  (formula "23")))
               (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
               (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
               (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
               (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
               (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
               (rule "pullOutSelect" (formula "42") (term "0") (inst "selectSK=java_lang_Object_created__1"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "33"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "41")))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "apply_eq_boolean" (formula "1") (term "1") (ifseqformula "43"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "ifEqualsTRUE" (formula "39"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "orRight" (formula "39"))
               (rule "replace_known_right" (formula "40") (term "0,0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=java_lang_Object_created__2"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "43")))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "apply_eq_boolean" (formula "1") (term "1") (ifseqformula "40"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "notLeft" (formula "1"))
               (rule "ifEqualsTRUE" (formula "39"))
                (builtin "One Step Simplification" (formula "39"))
               (rule "orRight" (formula "39"))
               (rule "replace_known_right" (formula "40") (term "0,0") (ifseqformula "39"))
                (builtin "One Step Simplification" (formula "40"))
               (rule "pullOutSelect" (formula "39") (term "0") (inst "selectSK=java_lang_Object_created__3"))
               (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "45")))
               (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
               (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0,0,0,0"))
               (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0,0,0,0"))
               (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "40") (term "0") (ifseqformula "1"))
               (rule "close" (formula "40") (ifseqformula "9"))
            )
            (branch "Null reference (t = null)"
                (builtin "One Step Simplification" (formula "42") (ifInst ""  (formula "40")))
               (rule "closeTrue" (formula "42"))
            )
         )
         (branch "Exceptional Post (add)"
             (builtin "One Step Simplification" (formula "36"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "andLeft" (formula "32"))
            (rule "andLeft" (formula "33"))
            (rule "andLeft" (formula "33"))
            (rule "andLeft" (formula "35"))
            (rule "notLeft" (formula "33"))
            (rule "close" (formula "36") (ifseqformula "35"))
         )
         (branch "Pre (add)"
             (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "26")) (ifInst ""  (formula "30")))
            (rule "wellFormedAnonEQ" (formula "34") (term "0") (ifseqformula "24"))
            (rule "wellFormedAnonEQ" (formula "34") (term "0,0") (ifseqformula "16"))
            (rule "wellFormedAnonEQ" (formula "34") (term "0,0,0") (ifseqformula "6"))
            (rule "replace_known_left" (formula "34") (term "0,0,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "5")) (ifInst ""  (formula "15")) (ifInst ""  (formula "23")))
            (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
            (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
            (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
            (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
            (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
            (rule "pullOutSelect" (formula "34") (term "0") (inst "selectSK=java_lang_Object_created__1"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "25"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "33")))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "35"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "ifEqualsTRUE" (formula "31"))
             (builtin "One Step Simplification" (formula "31"))
            (rule "orRight" (formula "31"))
            (rule "replace_known_right" (formula "32") (term "0,0") (ifseqformula "31"))
             (builtin "One Step Simplification" (formula "32"))
            (rule "pullOutSelect" (formula "31") (term "0") (inst "selectSK=java_lang_Object_created__2"))
            (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "35")))
            (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
            (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0,0,0,0"))
            (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0,0,0,0"))
            (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "32") (term "0") (ifseqformula "1"))
            (rule "close" (formula "32") (ifseqformula "9"))
         )
         (branch "Null reference (t = null)"
             (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "32")))
            (rule "closeTrue" (formula "34"))
         )
      )
      (branch "Exceptional Post (add)"
          (builtin "One Step Simplification" (formula "28"))
          (builtin "One Step Simplification" (formula "24"))
         (rule "andLeft" (formula "24"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "25"))
         (rule "andLeft" (formula "27"))
         (rule "notLeft" (formula "25"))
         (rule "close" (formula "28") (ifseqformula "27"))
      )
      (branch "Pre (add)"
          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "18")) (ifInst ""  (formula "22")))
         (rule "wellFormedAnonEQ" (formula "26") (term "0") (ifseqformula "16"))
         (rule "wellFormedAnonEQ" (formula "26") (term "0,0") (ifseqformula "6"))
         (rule "replace_known_left" (formula "26") (term "1,0") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "1")) (ifInst ""  (formula "5")))
         (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,0"))
         (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0"))
         (rule "polySimp_rightDist" (formula "4") (term "1,0,0,0"))
         (rule "mul_literals" (formula "4") (term "0,1,0,0,0"))
         (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,0"))
         (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,0"))
         (rule "pullOutSelect" (formula "26") (term "0") (inst "selectSK=java_lang_Object_created__1"))
         (rule "simplifySelectOfAnonEQ" (formula "1") (ifseqformula "17"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")))
         (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "2,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "2,0"))
         (rule "replaceKnownSelect_taclet0_0" (formula "1") (term "0,0,0,0"))
         (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "1") (term "0,0,0,0"))
         (rule "replace_known_left" (formula "1") (term "0,0,0") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "27") (term "0") (ifseqformula "1"))
         (rule "close" (formula "27") (ifseqformula "9"))
      )
      (branch "Null reference (t = null)"
          (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
         (rule "closeTrue" (formula "26"))
      )
   )
   (branch "Exceptional Post (add)"
       (builtin "One Step Simplification" (formula "20"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "andLeft" (formula "16"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "17"))
      (rule "andLeft" (formula "19"))
      (rule "notLeft" (formula "17"))
      (rule "close" (formula "20") (ifseqformula "19"))
   )
   (branch "Pre (add)"
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "10")) (ifInst ""  (formula "14")))
      (rule "wellFormedAnonEQ" (formula "18") (term "0") (ifseqformula "6"))
      (rule "replaceKnownSelect_taclet0_0" (formula "18") (term "0,1"))
      (rule "replaceKnownAuxiliaryConstant_taclet0_1" (formula "18") (term "0,1"))
      (rule "replace_known_left" (formula "18") (term "1,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "1")) (ifInst ""  (formula "8")))
      (rule "closeTrue" (formula "18"))
   )
   (branch "Null reference (t = null)"
       (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "16")))
      (rule "closeTrue" (formula "18"))
   )
)
(branch "Exceptional Post (RBTree)"
    (builtin "One Step Simplification" (formula "8"))
    (builtin "One Step Simplification" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "9"))
   (rule "andLeft" (formula "11"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "13") (ifseqformula "12"))
)
(branch "Pre (RBTree)"
    (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "1")))
   (rule "closeTrue" (formula "6"))
)
)
}
