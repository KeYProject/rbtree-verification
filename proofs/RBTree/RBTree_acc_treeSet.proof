\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Sep 07 18:30:25 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\include "../../iSet.key";

\proofObligation "#Proof Obligation Settings
#Thu Sep 07 18:30:25 CEST 2023
contract=RBTree[RBTree\\:\\:treeSet()].JML accessible clause.0
name=RBTree[RBTree\\:\\:treeSet()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "johanna" ) (keyVersion "167932a84464f61ce5aea5172abb98fb7bad2121"))
(keyLog "1" (keyUser "johanna" ) (keyVersion "167932a84464f61ce5aea5172abb98fb7bad2121"))

(autoModeTime "98501")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "self,anon_heap"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "Definition_axiom_for_treeSet_in_RBTree" (formula "8") (term "0") (ifseqformula "7") (userinteraction))
(rule "Definition_axiom_for_treeSet_in_RBTree" (formula "8") (term "1") (ifseqformula "7") (userinteraction))
(rule "eqTermCut" (formula "8") (term "0,0,1") (inst "s=Tree::select(heap, self, RBTree::$root)") (userinteraction))
(branch "Assume self.root@heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.root"
   (rule "applyEq" (formula "9") (term "1,2,1") (ifseqformula "1") (userinteraction))
    (builtin "Use Dependency Contract" (formula "9") (term "2,1") (ifInst ""  (formula "9") (term "2,0")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
   (rule "impLeft" (formula "8"))
   (branch "Case 1"
      (rule "andRight" (formula "8"))
      (branch "Case 1"
         (rule "andRight" (formula "8"))
         (branch "Case 1"
            (rule "andRight" (formula "8"))
            (branch "Case 1"
               (rule "andRight" (formula "8"))
               (branch "Case 1"
                  (rule "andRight" (formula "8"))
                  (branch "Case 1"
                     (rule "notRight" (formula "8"))
                     (rule "eqSymm" (formula "10"))
                     (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "orRight" (formula "10"))
                     (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "2") (term "1") (ifseqformula "1"))
                     (rule "close" (formula "10") (ifseqformula "2"))
                  )
                  (branch "Case 2"
                     (rule "eqSymm" (formula "10"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=RBTree_root_0"))
                     (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "1"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "5")))
                     (rule "eqSymm" (formula "2"))
                     (rule "applyEqReverse" (formula "11") (term "0,0,0") (ifseqformula "2"))
                     (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commute_or" (formula "1"))
                     (rule "limit_Tree_treeSet" (formula "10") (term "2,0"))
                     (rule "limit_Tree_treeSet" (formula "11") (term "2,1"))
                     (rule "ifthenelse_split" (formula "12") (term "0"))
                     (branch "self.root = null TRUE"
                        (rule "eqSymm" (formula "13"))
                         (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
                        (rule "closeTrue" (formula "13"))
                     )
                     (branch "self.root = null FALSE"
                        (rule "referencedObjectIsCreatedRight" (formula "10") (ifseqformula "12"))
                        (rule "close" (formula "10") (ifseqformula "4"))
                     )
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "8"))
                  (branch "Case 1"
                     (rule "close" (formula "8") (ifseqformula "2"))
                  )
                  (branch "Case 2"
                     (rule "wellFormedAnon" (formula "8"))
                     (rule "eqSymm" (formula "10"))
                     (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "2")))
                     (rule "closeTrue" (formula "8"))
                  )
               )
            )
            (branch "Case 2"
               (rule "eqSymm" (formula "10"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=RBTree_root_0"))
               (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "1"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "5")))
               (rule "eqSymm" (formula "2"))
               (rule "applyEqReverse" (formula "11") (term "0,0,0") (ifseqformula "2"))
               (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "commute_or" (formula "1"))
               (rule "Definition_axiom_for_validRBTree_in_RBTree" (formula "7") (term "0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "8")))
               (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "7")))
               (rule "closeTrue" (formula "10"))
            )
         )
         (branch "Case 2"
            (rule "eqSymm" (formula "10"))
            (rule "disjointDefinition" (formula "8"))
            (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=RBTree_root_0"))
            (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "1"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "5")))
            (rule "eqSymm" (formula "2"))
            (rule "applyEqReverse" (formula "11") (term "0,0,0") (ifseqformula "2"))
            (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "hideAuxiliaryEq" (formula "2"))
            (rule "elementOfSetMinus" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commuteUnion_2" (formula "8") (term "1,1,0"))
            (rule "commuteUnion" (formula "8") (term "0,1,1,0"))
            (rule "commute_or" (formula "1"))
            (rule "Definition_axiom_for_footprint_in_RBTree" (formula "10") (term "1,1,0,2,0") (ifseqformula "9"))
            (rule "Definition_axiom_for_validRBTree_in_RBTree" (formula "7") (term "0") (ifseqformula "9"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "Definition_axiom_for_footprint_in_RBTree" (formula "8") (term "1,0,0") (ifseqformula "9"))
            (rule "Definition_axiom_for_footprint_in_RBTree" (formula "1") (term "2,1") (ifseqformula "9"))
            (rule "elementOfUnion" (formula "1") (term "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "true_left" (formula "1"))
            (rule "limit_Tree_treeSet" (formula "9") (term "2,1"))
            (rule "limit_Tree_footprint" (formula "8") (term "0,1,0"))
            (rule "limit_Tree_treeSet" (formula "11") (term "2,0"))
            (rule "cnf_rightDist" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "commute_or" (formula "10"))
            (rule "disjointDefinition" (formula "9") (term "0,0,1"))
            (rule "limit_Tree_footprint" (formula "2") (term "1"))
            (rule "limit_Tree_treeSet" (formula "13") (term "2,0"))
            (rule "limit_Tree_treeSet" (formula "13") (term "2,1"))
            (rule "limit_java_lang_Object__inv_" (formula "9") (term "1,0,1"))
            (rule "cnf_rightDist" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "commute_or" (formula "11"))
            (rule "cnf_rightDist" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "commute_or" (formula "11"))
            (rule "equalityToElementOfRight" (formula "14") (inst "ov=ov") (inst "fv=fv"))
             (builtin "One Step Simplification" (formula "14"))
            (rule "allRight" (formula "14") (inst "sk=ov_0"))
            (rule "allRight" (formula "14") (inst "sk=fv_0"))
            (rule "notRight" (formula "14"))
            (rule "elementOfIntersect" (formula "1"))
            (rule "andLeft" (formula "1"))
            (rule "elementOfSetMinus" (formula "2"))
            (rule "andLeft" (formula "2"))
            (rule "notLeft" (formula "3"))
            (rule "elementOfSetMinus" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "elementOfUnion" (formula "16"))
            (rule "orRight" (formula "16"))
            (rule "elementOfUnion" (formula "15"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "orRight" (formula "15"))
            (rule "elementOfUnion" (formula "17"))
            (rule "orRight" (formula "17"))
            (rule "elementOfSingleton" (formula "17"))
            (rule "elementOfUnion" (formula "18"))
            (rule "orRight" (formula "18"))
            (rule "elementOfSingleton" (formula "18"))
            (rule "commute_and" (formula "17"))
            (rule "commute_and" (formula "18"))
            (rule "ifthenelse_split" (formula "22") (term "1"))
            (branch "self.root = null TRUE"
                (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
               (rule "closeTrue" (formula "23"))
            )
            (branch "self.root = null FALSE"
               (rule "replace_known_right" (formula "2") (term "0,1,1,1,0,1") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "22")))
               (rule "replace_known_right" (formula "16") (term "0,2") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
               (rule "closeTrue" (formula "16"))
            )
         )
      )
      (branch "Case 2"
         (rule "eqSymm" (formula "10"))
         (rule "measuredByCheckEmpty" (formula "8") (ifseqformula "6"))
         (rule "closeTrue" (formula "8"))
      )
   )
   (branch "Case 2"
      (rule "eqSymm" (formula "10"))
      (rule "applyEq" (formula "10") (term "2,0") (ifseqformula "8"))
      (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=RBTree_root_0"))
      (rule "applyEq" (formula "11") (term "0,0,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "5")))
      (rule "eqSymm" (formula "2"))
      (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "applyEqReverse" (formula "11") (term "0,0,0") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "closeTrue" (formula "11"))
   )
)
(branch "Assume self.root@heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] != self.root"
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "9"))
   (rule "pullOutSelect" (formula "7") (term "0") (inst "selectSK=RBTree_root_0"))
   (rule "applyEq" (formula "10") (term "1,2,0") (ifseqformula "1"))
   (rule "applyEq" (formula "10") (term "0,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")) (ifInst ""  (formula "4")))
   (rule "eqSymm" (formula "8"))
   (rule "eqSymm" (formula "10"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "Definition_axiom_for_validRBTree_in_RBTree" (formula "7") (term "0") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "7"))
   (rule "Definition_axiom_for_footprint_in_RBTree" (formula "10") (term "1,1,0,2,1") (ifseqformula "9"))
   (rule "Definition_axiom_for_footprint_in_RBTree" (formula "1") (term "2,0,0") (ifseqformula "9"))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "8")))
   (rule "closeFalse" (formula "1"))
)
)
}
