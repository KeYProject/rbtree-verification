\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Sep 07 17:55:39 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\include "../../iSet.key";

\proofObligation "#Proof Obligation Settings
#Thu Sep 07 17:55:39 CEST 2023
contract=RBTree[RBTree\\:\\:contains(int)].JML accessible clause.0
name=RBTree[RBTree\\:\\:contains(int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "johanna" ) (keyVersion "167932a84464f61ce5aea5172abb98fb7bad2121"))
(keyLog "1" (keyUser "johanna" ) (keyVersion "167932a84464f61ce5aea5172abb98fb7bad2121"))
(keyLog "2" (keyUser "johanna" ) (keyVersion "167932a84464f61ce5aea5172abb98fb7bad2121"))

(autoModeTime "259792")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self,key,anon_heap") (userinteraction))
 (builtin "One Step Simplification" (formula "2"))
 (builtin "Evaluate Query" (formula "2") (term "0") (newnames "key_0,callee,queryResult,res_contains"))
 (builtin "Evaluate Query" (formula "3") (term "1") (newnames "key_1,callee,queryResult,res_contains_0"))
(rule "notLeft" (formula "1") (userinteraction))
(rule "notLeft" (formula "1") (userinteraction))
(rule "variableDeclaration" (formula "2") (term "1") (newnames "queryResult") (userinteraction))
 (builtin "Use Operation Contract" (formula "2") (newnames "heapBefore_contains,result_contains,exc") (contract "RBTree[RBTree::contains(int)].JML normal_behavior operation contract.0") (modality "diamond"))
(branch "Post (contains)"
   (rule "variableDeclaration" (formula "5") (term "1") (newnames "queryResult_1") (userinteraction))
    (builtin "Use Operation Contract" (formula "5") (newnames "heapBefore_contains_0,result_contains_0,exc_0") (contract "RBTree[RBTree::contains(int)].JML normal_behavior operation contract.0") (modality "diamond"))
   (branch "Post (contains)"
       (builtin "One Step Simplification" (formula "4"))
       (builtin "One Step Simplification" (formula "3"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
       (builtin "One Step Simplification" (formula "6"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "replaceKnownQuery_1" (formula "7") (term "1"))
      (rule "replaceKnownQuery_0" (formula "7") (term "0"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "2"))
      (rule "eqSymm" (formula "16") (term "0,0,1"))
      (rule "eqSymm" (formula "15") (term "0,0,1"))
      (rule "eqSymm" (formula "17"))
      (rule "assignment" (formula "16") (term "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "assignment" (formula "15") (term "1"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "limit_java_lang_Object__inv_" (formula "6"))
      (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "limit_java_lang_Object__inv_" (formula "14"))
      (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "limit_java_lang_Object__inv_" (formula "7"))
      (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
      (rule "true_left" (formula "7"))
      (rule "methodCallEmpty" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "emptyModality" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "notRight" (formula "18"))
      (rule "eqSymm" (formula "1"))
      (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "1"))
      (rule "emptyModality" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "notRight" (formula "18"))
      (rule "eqSymm" (formula "1"))
      (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "1"))
       (builtin "Use Dependency Contract" (formula "15") (term "1,0") (ifInst ""  (formula "12") (term "1,0")) (contract "RBTree[RBTree::treeSet()].JML accessible clause.0"))
      (rule "impLeft" (formula "18"))
      (branch "Case 1"
         (rule "andRight" (formula "18"))
         (branch "Case 1"
            (rule "andRight" (formula "18"))
            (branch "Case 1"
               (rule "andRight" (formula "18"))
               (branch "Case 1"
                  (rule "andRight" (formula "18"))
                  (branch "Case 1"
                     (rule "notRight" (formula "18"))
                     (rule "close" (formula "19") (ifseqformula "1"))
                  )
                  (branch "Case 2"
                     (rule "close" (formula "18") (ifseqformula "4"))
                  )
               )
               (branch "Case 2"
                  (rule "andRight" (formula "18"))
                  (branch "Case 1"
                     (rule "close" (formula "18") (ifseqformula "10"))
                  )
                  (branch "Case 2"
                     (rule "wellFormedAnon" (formula "18"))
                     (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "3")))
                     (rule "closeTrue" (formula "18"))
                  )
               )
            )
            (branch "Case 2"
               (rule "close" (formula "18") (ifseqformula "7"))
            )
         )
         (branch "Case 2"
            (rule "disjointDefinition" (formula "18"))
             (builtin "One Step Simplification" (formula "18"))
            (rule "closeTrue" (formula "18"))
         )
      )
      (branch "Case 2"
         (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "18") (userinteraction))
         (rule "equiv_left" (formula "15"))
         (branch "Case 1"
            (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "15"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "16"))
            (rule "eqSymm" (formula "21"))
            (rule "close" (formula "21") (ifseqformula "12"))
         )
         (branch "Case 2"
            (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "18"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "notLeft" (formula "12"))
            (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "notLeft" (formula "1"))
            (rule "apply_eq_boolean_rigid" (formula "21") (term "0") (ifseqformula "19"))
            (rule "eqSymm" (formula "21"))
             (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "17")))
            (rule "closeTrue" (formula "21"))
         )
      )
   )
   (branch "Exceptional Post (contains)"
       (builtin "One Step Simplification" (formula "4"))
       (builtin "One Step Simplification" (formula "3"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
       (builtin "One Step Simplification" (formula "6"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "replaceKnownQuery_0" (formula "7") (term "0"))
      (rule "replaceKnownQuery_1" (formula "7") (term "1"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "3"))
      (rule "notLeft" (formula "8"))
      (rule "close" (formula "11") (ifseqformula "10"))
   )
   (branch "Pre (contains)"
       (builtin "One Step Simplification" (formula "3"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
       (builtin "One Step Simplification" (formula "5"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "replaceKnownQuery_1" (formula "6") (term "1"))
      (rule "replaceKnownQuery_0" (formula "6") (term "0"))
      (rule "wellFormedAnon" (formula "5") (term "0,1"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "5"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "notLeft" (formula "2"))
      (rule "eqSymm" (formula "11") (term "0,0,1"))
      (rule "eqSymm" (formula "13"))
      (rule "replace_known_left" (formula "12") (term "1,0,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "7")))
      (rule "assignment" (formula "11") (term "1"))
       (builtin "One Step Simplification" (formula "11"))
      (rule "selectCreatedOfAnonAsFormula" (formula "12") (term "1"))
      (rule "replace_known_left" (formula "12") (term "0,1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "limit_java_lang_Object__inv_" (formula "6"))
      (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "limit_java_lang_Object__inv_" (formula "13") (term "1"))
      (rule "limit_java_lang_Object__inv_" (formula "8"))
      (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "9")))
      (rule "true_left" (formula "8"))
      (rule "methodCallEmpty" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "emptyModality" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "notRight" (formula "13"))
      (rule "eqSymm" (formula "1"))
      (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "1"))
      (rule "andRight" (formula "14") (userinteraction))
      (branch "Case 1"
          (builtin "Use Dependency Contract" (formula "14") (term "0") (ifInst ""  (formula "7") (term "0")) (contract "RBTree[RBTree::validRBTree()].JML accessible clause.0"))
         (rule "wellFormedAnon" (formula "13") (term "1,1,0,0,0"))
         (rule "replace_known_left" (formula "13") (term "0,1,0,0,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "14")) (ifInst ""  (formula "4")) (ifInst ""  (formula "10")) (ifInst ""  (formula "3")))
         (rule "disjointDefinition" (formula "13") (term "1,0"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "7"))
         (rule "replace_known_right" (formula "13") (term "1") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "notLeft" (formula "13"))
         (rule "Class_invariant_axiom_for_RBTree" (formula "2") (term "1") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "Definition_axiom_for_treeSet_in_RBTree" (formula "12") (term "1,0") (ifseqformula "14"))
         (rule "Class_invariant_axiom_for_RBTree" (formula "9") (ifseqformula "14"))
         (rule "true_left" (formula "9"))
         (rule "Definition_axiom_for_validRBTree_in_RBTree" (formula "7") (term "0") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "12")))
         (rule "replace_known_left" (formula "11") (term "0,1,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "notLeft" (formula "11"))
         (rule "apply_eq_boolean_rigid" (formula "1") (term "1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "apply_eq_boolean_rigid" (formula "15") (term "1") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "notRight" (formula "15"))
         (rule "applyEq" (formula "13") (term "1") (ifseqformula "7"))
         (rule "Definition_axiom_for_footprint_in_RBTree" (formula "2") (term "1,1,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "2") (term "0,1,1,1,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "Definition_axiom_for_footprint_in_RBTree" (formula "15") (term "1,1,0,0") (ifseqformula "14"))
         (rule "replace_known_left" (formula "15") (term "0,1,1,1,0,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "Definition_axiom_for_validRBTree_in_RBTree" (formula "15") (term "0") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "orRight" (formula "15"))
         (rule "disjointDefinition" (formula "16") (term "0,0,0"))
         (rule "pullOutSelect" (formula "16") (term "0,0,1") (inst "selectSK=Tree_isRed_0"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
         (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "sortsDisjointModuloNull" (formula "1") (term "0,0,0,0"))
         (rule "replace_known_right" (formula "1") (term "0,0,0,0,0") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
         (rule "pullOutSelect" (formula "16") (term "0") (inst "selectSK=RBTree_root_0"))
         (rule "applyEq" (formula "18") (term "1,0,1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "18") (term "1,1,0,0,0,0") (ifseqformula "1"))
         (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
         (rule "applyEq" (formula "18") (term "1,1,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "6")))
         (rule "applyEqReverse" (formula "18") (term "0,0,1") (ifseqformula "2"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "applyEq" (formula "1") (term "2,0") (ifseqformula "8"))
         (rule "elementOfSetMinus" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "16") (term "0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "closeTrue" (formula "16"))
      )
      (branch "Case 2"
         (rule "replace_known_right" (formula "2") (term "1") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "notLeft" (formula "2"))
         (rule "Definition_axiom_for_validRBTree_in_RBTree" (formula "6") (term "0") (ifseqformula "13"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "disjointDefinition" (formula "6") (term "0,0,0,1"))
         (rule "Class_invariant_axiom_for_RBTree" (formula "14") (ifseqformula "13"))
         (rule "closeTrue" (formula "14"))
      )
   )
   (branch "Null reference (callee = null)"
       (builtin "One Step Simplification" (formula "3"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
       (builtin "One Step Simplification" (formula "5"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "replaceKnownQuery_0" (formula "6") (term "0"))
      (rule "replaceKnownQuery_1" (formula "6") (term "1"))
      (rule "andLeft" (formula "3"))
      (rule "andLeft" (formula "1"))
      (rule "notRight" (formula "7"))
      (rule "andLeft" (formula "6"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "4"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "notLeft" (formula "3"))
      (rule "close" (formula "11") (ifseqformula "1"))
   )
)
(branch "Exceptional Post (contains)"
    (builtin "One Step Simplification" (formula "3"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
    (builtin "One Step Simplification" (formula "4"))
   (rule "replaceKnownQuery_0" (formula "6") (term "0"))
   (rule "replaceKnownQuery_1" (formula "6") (term "1"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "5"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "8"))
   (rule "notLeft" (formula "6"))
   (rule "close" (formula "9") (ifseqformula "8"))
)
(branch "Pre (contains)"
    (builtin "One Step Simplification" (formula "1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "replaceKnownQuery_0" (formula "4") (term "0"))
   (rule "replaceKnownQuery_1" (formula "4") (term "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "3"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "notLeft" (formula "3"))
   (rule "eqSymm" (formula "10") (term "0,0,1"))
   (rule "eqSymm" (formula "11"))
   (rule "replace_known_left" (formula "9") (term "0,1") (ifseqformula "1"))
    (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "3")))
   (rule "closeTrue" (formula "9"))
)
(branch "Null reference (callee = null)"
    (builtin "One Step Simplification" (formula "1"))
    (builtin "One Step Simplification" (formula "2"))
   (rule "replaceKnownQuery_0" (formula "4") (term "0"))
   (rule "replaceKnownQuery_1" (formula "4") (term "1"))
   (rule "andLeft" (formula "1"))
   (rule "notRight" (formula "3"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "4"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "andLeft" (formula "2"))
   (rule "notLeft" (formula "4"))
   (rule "close" (formula "9") (ifseqformula "1"))
)
)
}
