\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 08 00:31:04 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\include "../../iSet.key";

\proofObligation "#Proof Obligation Settings
#Fri Sep 08 00:31:04 CEST 2023
contract=Tree[Tree\\:\\:blackBalanced()].JML accessible clause.0
name=Tree[Tree\\:\\:blackBalanced()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "johanna" ) (keyVersion "4d5d8c5cb0b36bcbdc74ead5888a2f6bbedfe5ef"))
(keyLog "1" (keyUser "johanna" ) (keyVersion "4d5d8c5cb0b36bcbdc74ead5888a2f6bbedfe5ef"))
(keyLog "2" (keyUser "johanna" ) (keyVersion "4d5d8c5cb0b36bcbdc74ead5888a2f6bbedfe5ef"))
(keyLog "3" (keyUser "johanna" ) (keyVersion "4d5d8c5cb0b36bcbdc74ead5888a2f6bbedfe5ef"))

(autoModeTime "403202")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
 (builtin "One Step Simplification" (formula "8") (userinteraction))
(rule "Definition_axiom_for_blackBalanced_in_Tree" (formula "8") (term "0") (ifseqformula "7") (userinteraction))
(rule "Definition_axiom_for_blackBalanced_in_Tree" (formula "8") (term "1") (ifseqformula "7") (userinteraction))
 (builtin "One Step Simplification" (formula "8") (userinteraction))
(rule "eqTermCut" (formula "8") (term "1,0,0,0,1") (inst "s=Tree::select(heap, self, Tree::$left)") (userinteraction))
(branch "Assume self.left@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = self.left"
   (rule "applyEq" (formula "9") (term "1,0,0,0,1") (ifseqformula "1") (userinteraction))
   (rule "applyEq" (formula "9") (term "1,0,1,1,0,1") (ifseqformula "1") (userinteraction))
   (rule "applyEq" (formula "9") (term "0,0,0,1,0,1") (ifseqformula "1") (userinteraction))
   (rule "eqTermCut" (formula "9") (term "1,1,0,0,1") (inst "s=Tree::select(heap, self, Tree::$right)") (userinteraction))
   (branch "Assume self.right@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = self.right"
      (rule "applyEq" (formula "10") (term "1,1,0,0,1") (ifseqformula "1") (userinteraction))
      (rule "applyEq" (formula "10") (term "0,0,0,1,1") (ifseqformula "1") (userinteraction))
      (rule "applyEq" (formula "10") (term "1,0,1,1,1") (ifseqformula "1") (userinteraction))
      (rule "eqTermCut" (formula "10") (term "0,0,0,0") (inst "s=Tree::blackHeight(anon(heap,
                       setMinus(allLocs,
                                setMinus(Tree::footprint(heap,
                                                         self),
                                         union(singleton(self,
                                                         Tree::$isRed),
                                               singleton(self,
                                                         Tree::$heightVariant)))),
                       anon_heap<<anonHeapFunction>>),
                  Tree::select(heap, self, Tree::$left))") (userinteraction))
      (branch "Assume Tree.blackHeight(self.left) = Tree.blackHeight(self.left) @heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)]"
         (rule "applyEqReverse" (formula "11") (term "0,0,0,1") (ifseqformula "1") (userinteraction))
         (rule "eqTermCut" (formula "11") (term "1,0,0,1") (inst "s=Tree::blackHeight(heap,
                  Tree::select(heap,
                               self,
                               Tree::$right))") (userinteraction))
         (branch "Assume Tree.blackHeight(self.right) @heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = Tree.blackHeight(self.right)"
            (rule "applyEq" (formula "12") (term "1,0,0,1") (ifseqformula "1") (userinteraction))
            (rule "cut" (inst "cutFormula=(  (Tree::select(heap, self, Tree::$left) = null)<<origin(\"User_Interaction @ node 46470 (cut)\",\"[]\")>>
 | (  Tree::blackBalanced$lmtd(anon(heap,
                                    setMinus(allLocs,
                                             setMinus(Tree::footprint(heap,
                                                                      self),
                                                      union(singleton(self,
                                                                      Tree::$isRed),
                                                            singleton(self,
                                                                      Tree::$heightVariant)))),
                                    anon_heap<<anonHeapFunction>>),
                               Tree::select(heap,
                                            self,
                                            Tree::$left))
    = Tree::blackBalanced$lmtd(heap,
                               Tree::select(heap,
                                            self,
                                            Tree::$left)))<<origin(\"User_Interaction @ node 46470 (cut)\",\"[]\")>>)<<origin(\"User_Interaction @ node 46470 (cut)\",\"[]\")>>") (userinteraction))
            (branch "CUT: Tree::select(heap, self, Tree::$left) = null | Tree::blackBalanced$lmtd(anon(heap, setMinus(allLocs, setMinus(Tree::footprint(heap, self), union(singleton(self, Tree::$isRed), singleton(self, Tree::$heightVariant)))), anon_heap<<anonHeapFunction>>), Tree::select(heap, self, Tree::$left)) = Tree::blackBalanced$lmtd(heap, Tree::select(heap, self, Tree::$left)) TRUE"
               (rule "cut" (inst "cutFormula=(  (Tree::select(heap, self, Tree::$right) = null)<<origin(\"User_Interaction @ node 46475 (cut)\",\"[]\")>>
 | (  Tree::blackBalanced$lmtd(anon(heap,
                                    setMinus(allLocs,
                                             setMinus(Tree::footprint(heap,
                                                                      self),
                                                      union(singleton(self,
                                                                      Tree::$isRed),
                                                            singleton(self,
                                                                      Tree::$heightVariant)))),
                                    anon_heap<<anonHeapFunction>>),
                               Tree::select(heap,
                                            self,
                                            Tree::$right))
    = Tree::blackBalanced$lmtd(heap,
                               Tree::select(heap,
                                            self,
                                            Tree::$right)))<<origin(\"User_Interaction @ node 46475 (cut)\",\"[]\")>>)<<origin(\"User_Interaction @ node 46475 (cut)\",\"[]\")>>") (userinteraction))
               (branch "CUT: Tree::select(heap, self, Tree::$right) = null | Tree::blackBalanced$lmtd(anon(heap, setMinus(allLocs, setMinus(Tree::footprint(heap, self), union(singleton(self, Tree::$isRed), singleton(self, Tree::$heightVariant)))), anon_heap<<anonHeapFunction>>), Tree::select(heap, self, Tree::$right)) = Tree::blackBalanced$lmtd(heap, Tree::select(heap, self, Tree::$right)) TRUE"
                  (rule "eqSymm" (formula "14") (term "0,0,1"))
                  (rule "eqSymm" (formula "4"))
                  (rule "eqSymm" (formula "14") (term "0,0,0"))
                  (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=Tree_right_0"))
                  (rule "simplifySelectOfAnon" (formula "5"))
                   (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "14")) (ifInst ""  (formula "10")))
                  (rule "eqSymm" (formula "6"))
                  (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "hideAuxiliaryEq" (formula "6"))
                  (rule "elementOfSetMinus" (formula "5") (term "0,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "elementOfSetMinus" (formula "5") (term "0"))
                  (rule "elementOfUnion" (formula "5") (term "0,1,0"))
                  (rule "elementOfSingleton" (formula "5") (term "1,0,1,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "elementOfSingleton" (formula "5") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "pullOutSelect" (formula "6") (term "0") (inst "selectSK=Tree_left_0"))
                  (rule "simplifySelectOfAnon" (formula "6"))
                   (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "14")) (ifInst ""  (formula "10")))
                  (rule "eqSymm" (formula "7"))
                  (rule "applyEqReverse" (formula "6") (term "1") (ifseqformula "7"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "hideAuxiliaryEq" (formula "7"))
                  (rule "elementOfSetMinus" (formula "6") (term "0,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "elementOfSetMinus" (formula "6") (term "0"))
                  (rule "elementOfUnion" (formula "6") (term "0,1,0"))
                  (rule "elementOfSingleton" (formula "6") (term "1,0,1,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "elementOfSingleton" (formula "6") (term "0,1,0"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "commuteUnion" (formula "2") (term "1,1,1,0,0,1"))
                  (rule "commuteUnion" (formula "1") (term "1,1,1,0,0,1"))
                  (rule "commuteUnion" (formula "3") (term "1,1,1,0,0"))
                  (rule "commuteUnion" (formula "14") (term "1,1,1,0,0,1,1,1"))
                  (rule "commuteUnion" (formula "14") (term "1,1,1,0,0,1,1,0,1"))
                  (rule "commuteUnion" (formula "4") (term "1,1,1,0,0"))
                  (rule "commute_or" (formula "5"))
                  (rule "commute_or" (formula "6"))
                  (rule "limit_Tree_footprint" (formula "14") (term "0,1,1,0,0,1,1,0,1"))
                  (rule "limit_java_lang_Object__inv_" (formula "13"))
                  (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
                   (builtin "One Step Simplification" (formula "13"))
                  (rule "limit_Tree_blackHeight_static_Tree" (formula "4") (term "1"))
                  (rule "limit_Tree_blackHeight_static_Tree" (formula "17") (term "1,0,0,1"))
                  (rule "limit_Tree_blackHeight_static_Tree" (formula "6") (term "0"))
                  (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
                  (rule "limit_Tree_blackHeight_static_Tree" (formula "8") (term "0"))
                  (rule "applyEq" (formula "8") (term "1") (ifseqformula "9"))
                  (rule "equiv_right" (formula "20"))
                  (branch "Case '->'"
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "applyEq" (formula "8") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "9") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "10") (term "1") (ifseqformula "1"))
                     (rule "cut_direct" (formula "6") (term "0"))
                     (branch "CUT: Tree::select(heap, self, Tree::$right) = null TRUE"
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "replace_known_left" (formula "23") (term "0,0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "impRight" (formula "23"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "apply_eq_boolean" (formula "6") (term "0") (ifseqformula "23"))
                        (rule "eqSymm" (formula "6"))
                         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "2")))
                        (rule "closeFalse" (formula "6"))
                     )
                     (branch "CUT: Tree::select(heap, self, Tree::$right) = null FALSE"
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "replace_known_right" (formula "24") (term "0,0,1") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEq" (formula "6") (term "1") (ifseqformula "3"))
                        (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "impRight" (formula "24"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "applyEq" (formula "7") (term "1") (ifseqformula "2"))
                        (rule "close" (formula "25") (ifseqformula "7"))
                     )
                  )
                  (branch "Case '<-'"
                     (rule "andLeft" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "replace_known_left" (formula "23") (term "0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "applyEq" (formula "10") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "9") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "8") (term "1") (ifseqformula "1"))
                     (rule "cut_direct" (formula "6") (term "0"))
                     (branch "CUT: Tree::select(heap, self, Tree::$right) = null TRUE"
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "true_left" (formula "7"))
                        (rule "replace_known_left" (formula "23") (term "0,0,1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "impRight" (formula "23"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_left" (formula "3") (term "0,0") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "6"))
                        (rule "close" (formula "23") (ifseqformula "2"))
                     )
                     (branch "CUT: Tree::select(heap, self, Tree::$right) = null FALSE"
                         (builtin "One Step Simplification" (formula "6"))
                        (rule "replace_known_right" (formula "3") (term "0,0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "replace_known_right" (formula "24") (term "0,0,1") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "applyEq" (formula "6") (term "0") (ifseqformula "3"))
                        (rule "eqSymm" (formula "6"))
                        (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "impRight" (formula "24"))
                        (rule "notLeft" (formula "1"))
                        (rule "replace_known_right" (formula "2") (term "0,0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "7"))
                        (rule "applyEq" (formula "7") (term "0") (ifseqformula "2"))
                        (rule "eqSymm" (formula "7"))
                        (rule "close" (formula "25") (ifseqformula "7"))
                     )
                  )
               )
               (branch "CUT: Tree::select(heap, self, Tree::$right) = null | Tree::blackBalanced$lmtd(anon(heap, setMinus(allLocs, setMinus(Tree::footprint(heap, self), union(singleton(self, Tree::$isRed), singleton(self, Tree::$heightVariant)))), anon_heap<<anonHeapFunction>>), Tree::select(heap, self, Tree::$right)) = Tree::blackBalanced$lmtd(heap, Tree::select(heap, self, Tree::$right)) FALSE"
                  (rule "hide_right" (formula "14") (userinteraction))
                  (rule "cut_direct" (formula "12") (term "0") (userinteraction))
                  (branch "CUT: self.right = null TRUE"
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "closeTrue" (formula "13"))
                  )
                  (branch "CUT: self.right = null FALSE"
                      (builtin "Use Dependency Contract" (formula "13") (term "0,1") (ifInst ""  (formula "13") (term "1,1")) (contract "Tree[Tree::blackBalanced()].JML accessible clause.0") (userinteraction))
                     (rule "Class_invariant_axiom_for_Tree" (formula "11") (inst "k=k") (inst "k_0=k_0") (ifseqformula "15") (userinteraction))
                     (rule "impLeft" (formula "12"))
                     (branch "Case 1"
                        (rule "andRight" (formula "12"))
                        (branch "Case 1"
                           (rule "andRight" (formula "12"))
                           (branch "Case 1"
                              (rule "andRight" (formula "12"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "12"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "12"))
                                    (branch "Case 1"
                                       (rule "notRight" (formula "12"))
                                       (rule "close" (formula "13") (ifseqformula "1"))
                                    )
                                    (branch "Case 2"
                                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "referencedObjectIsCreatedRight" (formula "12") (ifseqformula "13"))
                                       (rule "close" (formula "12") (ifseqformula "6"))
                                    )
                                 )
                                 (branch "Case 2"
                                    (rule "andRight" (formula "12"))
                                    (branch "Case 1"
                                       (rule "close" (formula "12") (ifseqformula "6"))
                                    )
                                    (branch "Case 2"
                                       (rule "wellFormedAnon" (formula "12"))
                                        (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                                        (builtin "One Step Simplification" (formula "14"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "13"))
                                       (rule "andLeft" (formula "11"))
                                       (rule "andLeft" (formula "14"))
                                       (rule "eqSymm" (formula "3"))
                                       (rule "eqSymm" (formula "11") (term "0,0"))
                                       (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "7"))
                                        (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "6")))
                                       (rule "closeTrue" (formula "20"))
                                    )
                                 )
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                                  (builtin "One Step Simplification" (formula "14"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "eqSymm" (formula "11") (term "0,0"))
                                 (rule "disjointDefinition" (formula "19") (term "1"))
                                 (rule "disjointDefinition" (formula "13") (term "1,0,1"))
                                 (rule "disjointDefinition" (formula "15"))
                                 (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1"))
                                 (rule "inEqSimp_ltToLeq" (formula "14"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12"))
                                 (rule "add_zero_right" (formula "12") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1"))
                                 (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                                 (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1"))
                                 (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1"))
                                 (rule "mul_literals" (formula "13") (term "0,1,0,0,1"))
                                 (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                                 (rule "polySimp_mulComm0" (formula "14") (term "1"))
                                 (rule "polySimp_rightDist" (formula "14") (term "1"))
                                 (rule "mul_literals" (formula "14") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                                 (rule "polySimp_elimOne" (formula "12") (term "0"))
                                 (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=Tree_left_0"))
                                 (rule "simplifySelectOfAnon" (formula "5"))
                                  (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "24")) (ifInst ""  (formula "9")))
                                 (rule "eqSymm" (formula "6"))
                                 (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "6"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "elementOfSetMinus" (formula "5") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "elementOfSetMinus" (formula "5") (term "0"))
                                 (rule "elementOfUnion" (formula "5") (term "0,1,0"))
                                 (rule "elementOfSingleton" (formula "5") (term "0,0,1,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "elementOfSingleton" (formula "5") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=Tree_right_0"))
                                 (rule "simplifySelectOfAnon" (formula "4"))
                                  (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "24")) (ifInst ""  (formula "9")))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "elementOfSetMinus" (formula "4") (term "0"))
                                 (rule "elementOfUnion" (formula "4") (term "0,1,0"))
                                 (rule "elementOfSingleton" (formula "4") (term "1,0,1,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "elementOfSingleton" (formula "4") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "commuteUnion" (formula "1") (term "1,1,1,0,0,1"))
                                 (rule "commuteUnion" (formula "2") (term "1,1,1,0,0"))
                                 (rule "commuteUnion" (formula "22") (term "1,1,1,0,0"))
                                 (rule "commuteUnion" (formula "3") (term "1,1,1,0,0"))
                                 (rule "commute_or" (formula "11"))
                                 (rule "limit_java_lang_Object__inv_" (formula "20"))
                                 (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "17"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
                                 (rule "closeFalse" (formula "1"))
                              )
                           )
                           (branch "Case 2"
                              (rule "Definition_axiom_for_footprint_in_Tree" (formula "12") (term "0,1,0") (ifseqformula "15") (userinteraction))
                               (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                               (builtin "One Step Simplification" (formula "14"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "14"))
                              (rule "eqSymm" (formula "3"))
                              (rule "eqSymm" (formula "11") (term "0,0"))
                              (rule "replace_known_right" (formula "20") (term "0,1,1,0,1,0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "disjointDefinition" (formula "19") (term "1"))
                              (rule "disjointDefinition" (formula "13") (term "1,0,1"))
                              (rule "disjointDefinition" (formula "15"))
                              (rule "disjointDefinition" (formula "20"))
                              (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "12"))
                              (rule "add_zero_right" (formula "12") (term "0"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "13") (term "0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                              (rule "polySimp_elimOne" (formula "12") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                              (rule "polySimp_mulComm0" (formula "14") (term "1"))
                              (rule "polySimp_rightDist" (formula "14") (term "1"))
                              (rule "mul_literals" (formula "14") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                              (rule "setMinusOfUnion" (formula "20") (term "1,0,0"))
                              (rule "setMinusOfUnion" (formula "20") (term "1,1,0,0"))
                              (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=Tree_right_0"))
                              (rule "simplifySelectOfAnon" (formula "4"))
                               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "24")) (ifInst ""  (formula "9")))
                              (rule "eqSymm" (formula "5"))
                              (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "elementOfSetMinus" (formula "4") (term "0"))
                              (rule "elementOfUnion" (formula "4") (term "0,1,0"))
                              (rule "elementOfSingleton" (formula "4") (term "0,0,1,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "elementOfSingleton" (formula "4") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=Tree_left_0"))
                              (rule "simplifySelectOfAnon" (formula "5"))
                               (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "24")) (ifInst ""  (formula "9")))
                              (rule "eqSymm" (formula "6"))
                              (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "hideAuxiliaryEq" (formula "6"))
                              (rule "elementOfSetMinus" (formula "5") (term "0,0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "elementOfSetMinus" (formula "5") (term "0"))
                              (rule "elementOfUnion" (formula "5") (term "0,1,0"))
                              (rule "elementOfSingleton" (formula "5") (term "0,0,1,0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "elementOfSingleton" (formula "5") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "commuteUnion" (formula "2") (term "1,1,1,0,0"))
                              (rule "commuteUnion" (formula "1") (term "1,1,1,0,0,1"))
                              (rule "commuteUnion" (formula "22") (term "1,1,1,0,0"))
                              (rule "commuteUnion" (formula "3") (term "1,1,1,0,0"))
                              (rule "commuteUnion" (formula "20") (term "1,1,0"))
                              (rule "commuteUnion" (formula "20") (term "1,0,1,0,0"))
                              (rule "commuteUnion" (formula "20") (term "1,1,0,0"))
                              (rule "commuteUnion" (formula "20") (term "1,0,1,1,0,0"))
                              (rule "commuteUnion" (formula "20") (term "1,1,1,1,0,0"))
                              (rule "commuteIntersection" (formula "20") (term "0"))
                              (rule "commute_or" (formula "11"))
                              (rule "limit_Tree_blackHeight_static_Tree" (formula "2") (term "1"))
                              (rule "limit_Tree_footprint" (formula "1") (term "0,1,1,0,0,1"))
                              (rule "commute_or" (formula "6"))
                              (rule "limit_Tree_blackHeight_static_Tree" (formula "5") (term "1"))
                              (rule "limit_Tree_footprint" (formula "22") (term "0,0,1"))
                              (rule "applyEq" (formula "24") (term "2,0,1,1,1,1,0") (ifseqformula "22"))
                              (rule "limit_Tree_footprint" (formula "23") (term "1,0,1"))
                              (rule "applyEq" (formula "25") (term "0,0,1,1,1,0") (ifseqformula "23"))
                              (rule "commute_or" (formula "8"))
                              (rule "cnf_rightDist" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "commute_or" (formula "17"))
                              (rule "limit_Tree_blackHeight_static_Tree" (formula "4") (term "0"))
                              (rule "applyEq" (formula "4") (term "1") (ifseqformula "5"))
                              (rule "limit_Tree_blackHeight_static_Tree" (formula "7") (term "0"))
                              (rule "applyEq" (formula "7") (term "1") (ifseqformula "8"))
                              (rule "cnf_rightDist" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "commute_or" (formula "19"))
                              (rule "equalityToElementOfRight" (formula "29") (inst "ov=ov") (inst "fv=fv"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "allRight" (formula "29") (inst "sk=ov_0"))
                              (rule "allRight" (formula "29") (inst "sk=fv_0"))
                              (rule "notRight" (formula "29"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "31"))
                              (rule "orRight" (formula "31"))
                              (rule "elementOfSingleton" (formula "32"))
                              (rule "elementOfSingleton" (formula "31"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "elementOfUnion" (formula "31"))
                              (rule "orRight" (formula "31"))
                              (rule "elementOfUnion" (formula "32"))
                              (rule "orRight" (formula "32"))
                              (rule "elementOfSetMinus" (formula "31"))
                               (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "30")))
                              (rule "false_right" (formula "31"))
                              (rule "elementOfSetMinus" (formula "32"))
                              (rule "elementOfSetMinus" (formula "31"))
                              (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "notRight" (formula "31"))
                              (rule "replace_known_left" (formula "32") (term "0,1") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "false_right" (formula "32"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0"))
                              (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "32") (ifseqformula "1"))
                           )
                        )
                        (branch "Case 2"
                           (rule "unlimit_java_lang_Object__inv_" (formula "11") (term "1,1,1,0,0,0") (userinteraction))
                           (rule "Class_invariant_axiom_for_Tree" (formula "11") (term "1,1,1,0,0,0") (inst "k=k") (inst "k_0=k_0") (ifseqformula "13") (userinteraction))
                            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "13"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "eqSymm" (formula "3"))
                           (rule "eqSymm" (formula "11") (term "0,0"))
                           (rule "eqSymm" (formula "16") (term "0,0,0"))
                           (rule "disjointDefinition" (formula "25") (term "1"))
                           (rule "disjointDefinition" (formula "13") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "22") (term "1"))
                           (rule "disjointDefinition" (formula "15"))
                           (rule "disjointDefinition" (formula "19") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "18") (term "1,0,1"))
                           (rule "measuredByCheck" (formula "26") (ifseqformula "10"))
                           (rule "precOfInt" (formula "26"))
                           (rule "replace_known_left" (formula "26") (term "1") (ifseqformula "14"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "14"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12"))
                           (rule "add_zero_right" (formula "12") (term "0"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "17"))
                           (rule "add_zero_right" (formula "17") (term "0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                           (rule "inEqSimp_leqRight" (formula "26"))
                           (rule "add_zero_right" (formula "1") (term "0"))
                           (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "14") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                           (rule "mul_literals" (formula "15") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "13"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "0"))
                           (rule "polySimp_elimOne" (formula "13") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                           (rule "polySimp_elimOne" (formula "18") (term "0"))
                           (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                           (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                           (rule "polySimp_elimOne" (formula "1") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "1"))
                           (rule "qeq_literals" (formula "18") (term "0"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "closeFalse" (formula "18"))
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")))
                        (rule "closeTrue" (formula "14"))
                     )
                  )
               )
            )
            (branch "CUT: Tree::select(heap, self, Tree::$left) = null | Tree::blackBalanced$lmtd(anon(heap, setMinus(allLocs, setMinus(Tree::footprint(heap, self), union(singleton(self, Tree::$isRed), singleton(self, Tree::$heightVariant)))), anon_heap<<anonHeapFunction>>), Tree::select(heap, self, Tree::$left)) = Tree::blackBalanced$lmtd(heap, Tree::select(heap, self, Tree::$left)) FALSE"
               (rule "hide_right" (formula "13") (userinteraction))
               (rule "cut_direct" (formula "11") (term "0") (userinteraction))
               (branch "CUT: self.left = null TRUE"
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "closeTrue" (formula "12"))
               )
               (branch "CUT: self.left = null FALSE"
                   (builtin "Use Dependency Contract" (formula "12") (term "0,1") (ifInst ""  (formula "12") (term "1,1")) (contract "Tree[Tree::blackBalanced()].JML accessible clause.0") (userinteraction))
                  (rule "Class_invariant_axiom_for_Tree" (formula "10") (inst "k=k") (inst "k_0=k_0") (ifseqformula "14") (userinteraction))
                  (rule "impLeft" (formula "11"))
                  (branch "Case 1"
                     (rule "andRight" (formula "11"))
                     (branch "Case 1"
                        (rule "andRight" (formula "11"))
                        (branch "Case 1"
                           (rule "andRight" (formula "11"))
                           (branch "Case 1"
                              (rule "andRight" (formula "11"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "11"))
                                 (branch "Case 1"
                                    (rule "notRight" (formula "11"))
                                    (rule "close" (formula "12") (ifseqformula "1"))
                                 )
                                 (branch "Case 2"
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "referencedObjectIsCreatedRight" (formula "11") (ifseqformula "12"))
                                    (rule "close" (formula "11") (ifseqformula "5"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "andRight" (formula "11"))
                                 (branch "Case 1"
                                    (rule "close" (formula "11") (ifseqformula "5"))
                                 )
                                 (branch "Case 2"
                                    (rule "wellFormedAnon" (formula "11"))
                                     (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                                     (builtin "One Step Simplification" (formula "13"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "10"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "eqSymm" (formula "2"))
                                    (rule "eqSymm" (formula "10") (term "0,0"))
                                    (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "6")))
                                    (rule "closeTrue" (formula "19"))
                                 )
                              )
                           )
                           (branch "Case 2"
                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                               (builtin "One Step Simplification" (formula "13"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "12"))
                              (rule "eqSymm" (formula "2"))
                              (rule "eqSymm" (formula "10") (term "0,0"))
                              (rule "disjointDefinition" (formula "18") (term "1"))
                              (rule "disjointDefinition" (formula "15") (term "1,0,1"))
                              (rule "disjointDefinition" (formula "13"))
                              (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "11"))
                              (rule "add_zero_right" (formula "11") (term "0"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "12"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                              (rule "polySimp_elimOne" (formula "11") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1"))
                              (rule "polySimp_rightDist" (formula "12") (term "1"))
                              (rule "mul_literals" (formula "12") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                              (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=Tree_left_0"))
                              (rule "simplifySelectOfAnon" (formula "4"))
                               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "23")) (ifInst ""  (formula "8")))
                              (rule "eqSymm" (formula "5"))
                              (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "hideAuxiliaryEq" (formula "5"))
                              (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "elementOfSetMinus" (formula "4") (term "0"))
                              (rule "elementOfUnion" (formula "4") (term "0,1,0"))
                              (rule "elementOfSingleton" (formula "4") (term "1,0,1,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "elementOfSingleton" (formula "4") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=Tree_right_0"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "23")) (ifInst ""  (formula "8")))
                              (rule "eqSymm" (formula "4"))
                              (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "elementOfSetMinus" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,1,0"))
                              (rule "elementOfSingleton" (formula "3") (term "1,0,1,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "elementOfSingleton" (formula "3") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "commuteUnion" (formula "1") (term "1,1,1,0,0"))
                              (rule "commuteUnion" (formula "21") (term "1,1,1,0,0"))
                              (rule "commuteUnion" (formula "2") (term "1,1,1,0,0"))
                              (rule "commute_or" (formula "10"))
                              (rule "limit_Tree_footprint" (formula "1") (term "0,1,1,0,0"))
                              (rule "limit_java_lang_Object__inv_" (formula "20"))
                              (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "16"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "Case 2"
                           (rule "Definition_axiom_for_footprint_in_Tree" (formula "11") (term "0,1,0") (ifseqformula "14") (userinteraction))
                            (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                            (builtin "One Step Simplification" (formula "13"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "12"))
                           (rule "eqSymm" (formula "2"))
                           (rule "eqSymm" (formula "10") (term "0,0"))
                           (rule "replace_known_right" (formula "19") (term "0,0,1,0,1,0") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "disjointDefinition" (formula "18") (term "1"))
                           (rule "disjointDefinition" (formula "15") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "13"))
                           (rule "disjointDefinition" (formula "19"))
                           (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "11"))
                           (rule "add_zero_right" (formula "11") (term "0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1"))
                           (rule "polySimp_rightDist" (formula "12") (term "1"))
                           (rule "mul_literals" (formula "12") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                           (rule "setMinusOfUnion" (formula "19") (term "1,0,0"))
                           (rule "setMinusOfUnion" (formula "19") (term "1,1,0,0"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=Tree_right_0"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "23")) (ifInst ""  (formula "8")))
                           (rule "eqSymm" (formula "4"))
                           (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "elementOfSetMinus" (formula "3") (term "0"))
                           (rule "elementOfUnion" (formula "3") (term "0,1,0"))
                           (rule "elementOfSingleton" (formula "3") (term "0,0,1,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "elementOfSingleton" (formula "3") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=Tree_left_0"))
                           (rule "simplifySelectOfAnon" (formula "4"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "23")) (ifInst ""  (formula "8")))
                           (rule "eqSymm" (formula "5"))
                           (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "elementOfSetMinus" (formula "4") (term "0"))
                           (rule "elementOfUnion" (formula "4") (term "0,1,0"))
                           (rule "elementOfSingleton" (formula "4") (term "1,0,1,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "elementOfSingleton" (formula "4") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "commuteUnion" (formula "1") (term "1,1,1,0,0"))
                           (rule "commuteUnion" (formula "21") (term "1,1,1,0,0"))
                           (rule "commuteUnion" (formula "2") (term "1,1,1,0,0"))
                           (rule "commuteUnion" (formula "19") (term "1,1,0"))
                           (rule "commuteUnion" (formula "19") (term "1,0,1,0,0"))
                           (rule "commuteUnion" (formula "19") (term "1,1,1,1,0,0"))
                           (rule "commuteUnion" (formula "19") (term "1,0,1,1,0,0"))
                           (rule "commuteIntersection" (formula "19") (term "0"))
                           (rule "commute_or" (formula "10"))
                           (rule "limit_Tree_blackHeight_static_Tree" (formula "1") (term "1"))
                           (rule "limit_Tree_footprint" (formula "2") (term "0,1,1,0,0"))
                           (rule "commute_or" (formula "5"))
                           (rule "limit_Tree_blackHeight_static_Tree" (formula "4") (term "1"))
                           (rule "limit_Tree_footprint" (formula "21") (term "0,0,1"))
                           (rule "applyEq" (formula "23") (term "0,0,1,1,1,0") (ifseqformula "21"))
                           (rule "limit_Tree_footprint" (formula "22") (term "1,0,1"))
                           (rule "applyEq" (formula "24") (term "2,0,1,1,1,1,0") (ifseqformula "22"))
                           (rule "commute_or" (formula "7"))
                           (rule "cnf_rightDist" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "commute_or" (formula "19"))
                           (rule "limit_Tree_blackHeight_static_Tree" (formula "3") (term "0"))
                           (rule "applyEq" (formula "3") (term "1") (ifseqformula "4"))
                           (rule "limit_Tree_blackHeight_static_Tree" (formula "6") (term "0"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "7"))
                           (rule "cnf_rightDist" (formula "20"))
                           (rule "andLeft" (formula "20"))
                           (rule "commute_or" (formula "21"))
                           (rule "applyEq_or_gen0" (formula "15"))
                           (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "notLeft" (formula "15"))
                           (rule "equalityToElementOfRight" (formula "28") (inst "ov=ov") (inst "fv=fv"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "allRight" (formula "28") (inst "sk=ov_0"))
                           (rule "allRight" (formula "28") (inst "sk=fv_0"))
                           (rule "notRight" (formula "28"))
                           (rule "elementOfIntersect" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "elementOfSetMinus" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfSetMinus" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "29"))
                           (rule "orRight" (formula "29"))
                           (rule "elementOfSingleton" (formula "30"))
                           (rule "elementOfSingleton" (formula "29"))
                           (rule "elementOfUnion" (formula "28"))
                           (rule "orRight" (formula "28"))
                           (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "18"))
                            (builtin "One Step Simplification" (formula "28"))
                           (rule "elementOfSetMinus" (formula "29"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")))
                           (rule "false_right" (formula "29"))
                           (rule "elementOfUnion" (formula "29"))
                           (rule "orRight" (formula "29"))
                           (rule "elementOfSetMinus" (formula "30"))
                           (rule "elementOfSetMinus" (formula "29"))
                           (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "29"))
                           (rule "notRight" (formula "29"))
                           (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "30"))
                           (rule "false_right" (formula "30"))
                           (rule "elementOfUnion" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0"))
                           (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "close" (formula "30") (ifseqformula "1"))
                        )
                     )
                     (branch "Case 2"
                        (rule "unlimit_java_lang_Object__inv_" (formula "10") (term "1,1,1,0,0,0,0") (userinteraction))
                        (rule "Class_invariant_axiom_for_Tree" (formula "10") (term "1,1,1,0,0,0,0") (inst "k=k") (inst "k_0=k_0") (ifseqformula "12") (userinteraction))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "13"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "eqSymm" (formula "2"))
                        (rule "eqSymm" (formula "10") (term "0,0"))
                        (rule "eqSymm" (formula "14") (term "0,0,0"))
                        (rule "disjointDefinition" (formula "24") (term "1"))
                        (rule "disjointDefinition" (formula "21") (term "1,0,1"))
                        (rule "disjointDefinition" (formula "20") (term "1"))
                        (rule "disjointDefinition" (formula "13"))
                        (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                        (rule "disjointDefinition" (formula "16") (term "1,0,1"))
                        (rule "measuredByCheck" (formula "25") (ifseqformula "9"))
                        (rule "precOfInt" (formula "25"))
                        (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "12"))
                         (builtin "One Step Simplification" (formula "25"))
                        (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "11"))
                        (rule "add_zero_right" (formula "11") (term "0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "15"))
                        (rule "add_zero_right" (formula "15") (term "0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "inEqSimp_leqRight" (formula "25"))
                        (rule "add_zero_right" (formula "1") (term "0"))
                        (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "12"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "0"))
                        (rule "polySimp_elimOne" (formula "12") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1"))
                        (rule "mul_literals" (formula "13") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0"))
                        (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                        (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                        (rule "polySimp_elimOne" (formula "1") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "closeFalse" (formula "16"))
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                      (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "11")))
                     (rule "closeTrue" (formula "13"))
                  )
               )
            )
         )
         (branch "Assume Tree.blackHeight(self.right) @heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] != Tree.blackHeight(self.right)"
            (rule "cut_direct" (formula "12") (term "0,0,1,0") (userinteraction))
            (branch "CUT: self.right = null TRUE"
               (rule "Definition_axiom_for_blackHeight_in_Tree" (formula "2") (term "0,0") (userinteraction))
               (rule "Definition_axiom_for_blackHeight_in_Tree" (formula "2") (term "1,0") (userinteraction))
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "1")))
               (rule "castDel" (formula "2") (term "0,0"))
               (rule "castDel" (formula "2") (term "1,0"))
               (rule "notLeft" (formula "2"))
               (rule "eqSymm" (formula "2"))
               (rule "eqSymm" (formula "13") (term "0,1"))
               (rule "eqSymm" (formula "13") (term "0,0"))
               (rule "replace_known_left" (formula "11") (term "0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")))
               (rule "closeTrue" (formula "11"))
            )
            (branch "CUT: self.right = null FALSE"
               (rule "hide_right" (formula "13") (userinteraction))
                (builtin "Use Dependency Contract" (formula "1") (term "0,0") (ifInst ""  (formula "1") (term "1,0")) (contract "Tree[Tree::blackHeight(Tree)].JML accessible clause.0") (userinteraction))
               (rule "Class_invariant_axiom_for_Tree" (formula "10") (inst "k=k") (inst "k_0=k_0") (ifseqformula "12") (userinteraction))
               (rule "impLeft" (formula "11"))
               (branch "Case 1"
                  (rule "andRight" (formula "11"))
                  (branch "Case 1"
                     (rule "andRight" (formula "11"))
                     (branch "Case 1"
                        (rule "andRight" (formula "11"))
                        (branch "Case 1"
                           (rule "andRight" (formula "11"))
                           (branch "Case 1"
                              (rule "andRight" (formula "11"))
                              (branch "Case 1"
                                 (rule "close" (formula "11") (ifseqformula "5"))
                              )
                              (branch "Case 2"
                                 (rule "wellFormedAnon" (formula "11"))
                                  (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                                 (rule "notLeft" (formula "1"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "9"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "eqSymm" (formula "1"))
                                 (rule "eqSymm" (formula "9") (term "0,0"))
                                 (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "4"))
                                  (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "5")))
                                 (rule "closeTrue" (formula "19"))
                              )
                           )
                           (branch "Case 2"
                              (rule "orRight" (formula "11"))
                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                              (rule "referencedObjectIsCreatedRight" (formula "11") (ifseqformula "13"))
                              (rule "close" (formula "11") (ifseqformula "5"))
                           )
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "11"))
                           (branch "Case 1"
                              (rule "orRight" (formula "11"))
                               (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                              (rule "notLeft" (formula "1"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "9"))
                              (rule "eqSymm" (formula "1"))
                              (rule "eqSymm" (formula "9") (term "0,0"))
                              (rule "disjointDefinition" (formula "17") (term "1"))
                              (rule "disjointDefinition" (formula "11") (term "1,0,1"))
                              (rule "disjointDefinition" (formula "13"))
                              (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "12"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "10"))
                              (rule "add_zero_right" (formula "10") (term "0"))
                              (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                              (rule "polySimp_mulComm0" (formula "12") (term "1"))
                              (rule "polySimp_rightDist" (formula "12") (term "1"))
                              (rule "mul_literals" (formula "12") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                              (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                              (rule "polySimp_elimOne" (formula "10") (term "0"))
                              (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=Tree_left_0"))
                              (rule "simplifySelectOfAnon" (formula "3"))
                               (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "21")) (ifInst ""  (formula "7")))
                              (rule "eqSymm" (formula "4"))
                              (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "hideAuxiliaryEq" (formula "4"))
                              (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "elementOfSetMinus" (formula "3") (term "0"))
                              (rule "elementOfUnion" (formula "3") (term "0,1,0"))
                              (rule "elementOfSingleton" (formula "3") (term "0,0,1,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "elementOfSingleton" (formula "3") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_right_0"))
                              (rule "simplifySelectOfAnon" (formula "2"))
                               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")) (ifInst ""  (formula "7")))
                              (rule "eqSymm" (formula "3"))
                              (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "hideAuxiliaryEq" (formula "3"))
                              (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "elementOfSetMinus" (formula "2") (term "0"))
                              (rule "elementOfUnion" (formula "2") (term "0,1,0"))
                              (rule "elementOfSingleton" (formula "2") (term "1,0,1,0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "elementOfSingleton" (formula "2") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "commuteUnion" (formula "18") (term "1,1,1,0,0"))
                              (rule "commuteUnion" (formula "1") (term "1,1,1,0,0"))
                              (rule "commute_or" (formula "9"))
                              (rule "limit_java_lang_Object__inv_" (formula "19"))
                              (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "15"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
                              (rule "closeFalse" (formula "1"))
                           )
                           (branch "Case 2"
                              (rule "notRight" (formula "11"))
                              (rule "close" (formula "13") (ifseqformula "1"))
                           )
                        )
                     )
                     (branch "Case 2"
                        (rule "Definition_axiom_for_footprint_in_Tree" (formula "11") (term "0,1,0") (ifseqformula "12") (userinteraction))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                        (rule "notLeft" (formula "1"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "11"))
                        (rule "andLeft" (formula "9"))
                        (rule "andLeft" (formula "12"))
                        (rule "eqSymm" (formula "1"))
                        (rule "eqSymm" (formula "9") (term "0,0"))
                        (rule "replace_known_right" (formula "19") (term "0,1,1,0,1,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")))
                        (rule "disjointDefinition" (formula "17") (term "1"))
                        (rule "disjointDefinition" (formula "11") (term "1,0,1"))
                        (rule "disjointDefinition" (formula "13"))
                        (rule "disjointDefinition" (formula "19"))
                        (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "10"))
                        (rule "add_zero_right" (formula "10") (term "0"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                        (rule "polySimp_elimOne" (formula "10") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1"))
                        (rule "polySimp_rightDist" (formula "12") (term "1"))
                        (rule "mul_literals" (formula "12") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                        (rule "setMinusOfUnion" (formula "19") (term "1,0,0"))
                        (rule "setMinusOfUnion" (formula "19") (term "1,1,0,0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=Tree_left_0"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "21")) (ifInst ""  (formula "7")))
                        (rule "eqSymm" (formula "4"))
                        (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfSetMinus" (formula "3") (term "0"))
                        (rule "elementOfUnion" (formula "3") (term "0,1,0"))
                        (rule "elementOfSingleton" (formula "3") (term "1,0,1,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfSingleton" (formula "3") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_right_0"))
                        (rule "simplifySelectOfAnon" (formula "2"))
                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")) (ifInst ""  (formula "7")))
                        (rule "eqSymm" (formula "3"))
                        (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "elementOfSetMinus" (formula "2") (term "0"))
                        (rule "elementOfUnion" (formula "2") (term "0,1,0"))
                        (rule "elementOfSingleton" (formula "2") (term "1,0,1,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "elementOfSingleton" (formula "2") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "commuteUnion" (formula "18") (term "1,1,1,0,0"))
                        (rule "commuteUnion" (formula "1") (term "1,1,1,0,0"))
                        (rule "commuteUnion" (formula "19") (term "1,0,1,0,0"))
                        (rule "commuteUnion" (formula "19") (term "1,0,1,1,0,0"))
                        (rule "commuteUnion" (formula "19") (term "1,1,1,1,0,0"))
                        (rule "commuteUnion" (formula "19") (term "1,1,0,0"))
                        (rule "commuteIntersection" (formula "19") (term "0"))
                        (rule "commute_or" (formula "9"))
                        (rule "limit_Tree_blackHeight_static_Tree" (formula "18") (term "1"))
                        (rule "limit_Tree_footprint" (formula "19") (term "0,1,1,0,0"))
                        (rule "commute_or" (formula "5"))
                        (rule "limit_Tree_blackHeight_static_Tree" (formula "3") (term "1"))
                        (rule "limit_Tree_footprint" (formula "20") (term "0,0,1"))
                        (rule "applyEq" (formula "23") (term "2,0,1,1,1,1,0") (ifseqformula "20"))
                        (rule "limit_Tree_footprint" (formula "21") (term "1,0,1"))
                        (rule "applyEq" (formula "24") (term "0,0,1,1,1,0") (ifseqformula "21"))
                        (rule "commute_or" (formula "5"))
                        (rule "cnf_rightDist" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "commute_or" (formula "15"))
                        (rule "limit_Tree_blackHeight_static_Tree" (formula "24") (term "0"))
                        (rule "limit_Tree_blackHeight_static_Tree" (formula "5") (term "0"))
                        (rule "applyEq" (formula "5") (term "1") (ifseqformula "6"))
                        (rule "cnf_rightDist" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "commute_or" (formula "17"))
                        (rule "equalityToElementOfRight" (formula "28") (inst "ov=ov") (inst "fv=fv"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "allRight" (formula "28") (inst "sk=ov_0"))
                        (rule "allRight" (formula "28") (inst "sk=fv_0"))
                        (rule "notRight" (formula "28"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfSingleton" (formula "29"))
                        (rule "elementOfSetMinus" (formula "2"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfUnion" (formula "28"))
                        (rule "orRight" (formula "28"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "elementOfUnion" (formula "30"))
                        (rule "orRight" (formula "30"))
                        (rule "elementOfSetMinus" (formula "29"))
                         (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "28")))
                        (rule "false_right" (formula "29"))
                        (rule "elementOfSetMinus" (formula "30"))
                        (rule "elementOfSetMinus" (formula "29"))
                        (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "notRight" (formula "29"))
                        (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "false_right" (formula "30"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "close" (formula "30") (ifseqformula "1"))
                     )
                  )
                  (branch "Case 2"
                     (rule "unlimit_java_lang_Object__inv_" (formula "10") (term "1,1,1,0,0,0") (userinteraction))
                     (rule "Class_invariant_axiom_for_Tree" (formula "10") (term "1,1,1,0,0,0") (inst "k=k") (inst "k_0=k_0") (ifseqformula "13") (userinteraction))
                      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                     (rule "notLeft" (formula "1"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "11"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "eqSymm" (formula "1"))
                     (rule "eqSymm" (formula "9") (term "0,0"))
                     (rule "eqSymm" (formula "14") (term "0,0,0"))
                     (rule "replace_known_right" (formula "25") (term "0,0") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "disjointDefinition" (formula "23") (term "1"))
                     (rule "disjointDefinition" (formula "11") (term "1,0,1"))
                     (rule "disjointDefinition" (formula "20") (term "1"))
                     (rule "disjointDefinition" (formula "13"))
                     (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                     (rule "disjointDefinition" (formula "16") (term "1,0,1"))
                     (rule "measuredByCheck" (formula "25") (ifseqformula "8"))
                     (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1"))
                     (rule "precOfInt" (formula "25"))
                     (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "12"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "inEqSimp_ltToLeq" (formula "12"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10"))
                     (rule "add_zero_right" (formula "10") (term "0"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "15"))
                     (rule "add_zero_right" (formula "15") (term "0"))
                     (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                     (rule "inEqSimp_leqRight" (formula "25"))
                     (rule "add_zero_right" (formula "1") (term "0"))
                     (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1"))
                     (rule "mul_literals" (formula "13") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                     (rule "polySimp_elimOne" (formula "11") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                     (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                     (rule "polySimp_elimOne" (formula "16") (term "0"))
                     (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                     (rule "polySimp_elimOne" (formula "1") (term "0"))
                     (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "16"))
                     (rule "qeq_literals" (formula "1") (term "0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "closeFalse" (formula "1"))
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                  (rule "notLeft" (formula "1"))
                  (rule "close" (formula "11") (ifseqformula "10"))
               )
            )
         )
      )
      (branch "Assume Tree.blackHeight(self.left) != Tree.blackHeight(self.left) @heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)]"
         (rule "cut_direct" (formula "11") (term "0,0,1,0,0") (userinteraction))
         (branch "CUT: self.left = null TRUE"
            (rule "Definition_axiom_for_blackHeight_in_Tree" (formula "2") (term "0,0") (userinteraction))
            (rule "Definition_axiom_for_blackHeight_in_Tree" (formula "2") (term "1,0") (userinteraction))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "1")))
            (rule "castDel" (formula "2") (term "0,0"))
            (rule "castDel" (formula "2") (term "1,0"))
            (rule "notLeft" (formula "2"))
            (rule "eqSymm" (formula "12") (term "0,1"))
            (rule "eqSymm" (formula "12") (term "0,0"))
            (rule "eqSymm" (formula "10"))
            (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "1")))
            (rule "closeTrue" (formula "10"))
         )
         (branch "CUT: self.left = null FALSE"
             (builtin "Use Dependency Contract" (formula "1") (term "1,0") (ifInst ""  (formula "12") (term "0,0,0,0")) (contract "Tree[Tree::blackHeight(Tree)].JML accessible clause.0") (userinteraction))
            (rule "hide_right" (formula "13") (userinteraction))
            (rule "Class_invariant_axiom_for_Tree" (formula "9") (inst "k=k") (inst "k_0=k_0") (ifseqformula "11") (userinteraction))
            (rule "impLeft" (formula "10"))
            (branch "Case 1"
               (rule "andRight" (formula "10"))
               (branch "Case 1"
                  (rule "andRight" (formula "10"))
                  (branch "Case 1"
                     (rule "andRight" (formula "10"))
                     (branch "Case 1"
                        (rule "andRight" (formula "10"))
                        (branch "Case 1"
                           (rule "andRight" (formula "10"))
                           (branch "Case 1"
                              (rule "close" (formula "10") (ifseqformula "4"))
                           )
                           (branch "Case 2"
                               (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                              (rule "wellFormedAnon" (formula "10"))
                              (rule "notLeft" (formula "1"))
                              (rule "andLeft" (formula "8"))
                              (rule "andLeft" (formula "8"))
                              (rule "andLeft" (formula "8"))
                              (rule "andLeft" (formula "8"))
                              (rule "andLeft" (formula "8"))
                              (rule "andLeft" (formula "8"))
                              (rule "andLeft" (formula "10"))
                              (rule "andLeft" (formula "10"))
                              (rule "eqSymm" (formula "17"))
                              (rule "eqSymm" (formula "8") (term "0,0"))
                              (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "3")))
                              (rule "closeTrue" (formula "18"))
                           )
                        )
                        (branch "Case 2"
                           (rule "orRight" (formula "10"))
                            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                           (rule "referencedObjectIsCreatedRight" (formula "10") (ifseqformula "12"))
                           (rule "close" (formula "10") (ifseqformula "4"))
                        )
                     )
                     (branch "Case 2"
                        (rule "andRight" (formula "10"))
                        (branch "Case 1"
                           (rule "orRight" (formula "10"))
                            (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                           (rule "notLeft" (formula "1"))
                           (rule "andLeft" (formula "8"))
                           (rule "andLeft" (formula "8"))
                           (rule "andLeft" (formula "8"))
                           (rule "andLeft" (formula "8"))
                           (rule "andLeft" (formula "8"))
                           (rule "andLeft" (formula "8"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "eqSymm" (formula "17"))
                           (rule "eqSymm" (formula "8") (term "0,0"))
                           (rule "disjointDefinition" (formula "16") (term "1"))
                           (rule "disjointDefinition" (formula "13") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "11"))
                           (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "9"))
                           (rule "add_zero_right" (formula "9") (term "0"))
                           (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "13") (term "0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                           (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                           (rule "polySimp_elimOne" (formula "9") (term "0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                           (rule "polySimp_mulComm0" (formula "10") (term "1"))
                           (rule "polySimp_rightDist" (formula "10") (term "1"))
                           (rule "mul_literals" (formula "10") (term "0,1"))
                           (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                           (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                           (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_right_0"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "6")))
                           (rule "eqSymm" (formula "2"))
                           (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSetMinus" (formula "1") (term "0"))
                           (rule "elementOfUnion" (formula "1") (term "0,1,0"))
                           (rule "elementOfSingleton" (formula "1") (term "0,0,1,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_left_0"))
                           (rule "simplifySelectOfAnon" (formula "2"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "20")) (ifInst ""  (formula "6")))
                           (rule "eqSymm" (formula "3"))
                           (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "elementOfSetMinus" (formula "2") (term "0"))
                           (rule "elementOfUnion" (formula "2") (term "0,1,0"))
                           (rule "elementOfSingleton" (formula "2") (term "0,0,1,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "elementOfSingleton" (formula "2") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "commuteUnion" (formula "17") (term "1,1,1,0,0"))
                           (rule "commute_or" (formula "8"))
                           (rule "limit_java_lang_Object__inv_" (formula "18"))
                           (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "19")))
                           (rule "closeFalse" (formula "1"))
                        )
                        (branch "Case 2"
                           (rule "notRight" (formula "10"))
                           (rule "close" (formula "12") (ifseqformula "1"))
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "Definition_axiom_for_footprint_in_Tree" (formula "10") (term "0,1,0") (ifseqformula "11") (userinteraction))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                     (rule "notLeft" (formula "1"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "eqSymm" (formula "17"))
                     (rule "eqSymm" (formula "8") (term "0,0"))
                     (rule "replace_known_right" (formula "18") (term "0,1") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")))
                     (rule "disjointDefinition" (formula "16") (term "1"))
                     (rule "disjointDefinition" (formula "13") (term "1,0,1"))
                     (rule "disjointDefinition" (formula "11"))
                     (rule "disjointDefinition" (formula "18"))
                     (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1"))
                     (rule "inEqSimp_ltToLeq" (formula "9"))
                     (rule "add_zero_right" (formula "9") (term "0"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1"))
                     (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
                     (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1"))
                     (rule "mul_literals" (formula "13") (term "0,1,0,0,1"))
                     (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1"))
                     (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                     (rule "polySimp_elimOne" (formula "9") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                     (rule "polySimp_mulComm0" (formula "10") (term "1"))
                     (rule "polySimp_rightDist" (formula "10") (term "1"))
                     (rule "mul_literals" (formula "10") (term "0,1"))
                     (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                     (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                     (rule "setMinusOfUnion" (formula "18") (term "1,0,0"))
                     (rule "setMinusOfUnion" (formula "18") (term "1,1,0,0"))
                     (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_left_0"))
                     (rule "simplifySelectOfAnon" (formula "2"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "20")) (ifInst ""  (formula "6")))
                     (rule "eqSymm" (formula "3"))
                     (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "elementOfSetMinus" (formula "2") (term "0"))
                     (rule "elementOfUnion" (formula "2") (term "0,1,0"))
                     (rule "elementOfSingleton" (formula "2") (term "1,0,1,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "elementOfSingleton" (formula "2") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_right_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "6")))
                     (rule "eqSymm" (formula "2"))
                     (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSetMinus" (formula "1") (term "0"))
                     (rule "elementOfUnion" (formula "1") (term "0,1,0"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,1,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,1,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "commuteUnion" (formula "17") (term "1,1,1,0,0"))
                     (rule "commuteUnion" (formula "18") (term "1,0,1,0,0"))
                     (rule "commuteUnion" (formula "18") (term "1,0,1,1,0,0"))
                     (rule "commuteUnion" (formula "18") (term "1,1,1,1,0,0"))
                     (rule "commuteIntersection" (formula "18") (term "0"))
                     (rule "commute_or" (formula "8"))
                     (rule "commute_or" (formula "2"))
                     (rule "limit_Tree_blackHeight_static_Tree" (formula "17") (term "1"))
                     (rule "limit_Tree_footprint" (formula "18") (term "0,1,1,0,0"))
                     (rule "limit_Tree_footprint" (formula "18") (term "1,0,1"))
                     (rule "applyEq" (formula "21") (term "2,0,1,1,1,1,0") (ifseqformula "18"))
                     (rule "limit_Tree_footprint" (formula "19") (term "0,0,1"))
                     (rule "applyEq" (formula "22") (term "0,0,1,1,1,0") (ifseqformula "19"))
                     (rule "commute_or" (formula "3"))
                     (rule "cnf_rightDist" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "commute_or" (formula "16"))
                     (rule "limit_Tree_blackHeight_static_Tree" (formula "22") (term "0"))
                     (rule "cnf_rightDist" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "commute_or" (formula "17"))
                     (rule "applyEq_or_gen0" (formula "11"))
                     (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "27"))
                      (builtin "One Step Simplification" (formula "11"))
                     (rule "notLeft" (formula "11"))
                     (rule "equalityToElementOfRight" (formula "25") (inst "ov=ov") (inst "fv=fv"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "allRight" (formula "25") (inst "sk=ov_0"))
                     (rule "allRight" (formula "25") (inst "sk=fv_0"))
                     (rule "notRight" (formula "25"))
                     (rule "elementOfIntersect" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "elementOfSetMinus" (formula "2"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "notLeft" (formula "2"))
                     (rule "elementOfSetMinus" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "notLeft" (formula "2"))
                     (rule "elementOfSingleton" (formula "24"))
                     (rule "elementOfUnion" (formula "25"))
                     (rule "orRight" (formula "25"))
                     (rule "elementOfUnion" (formula "26"))
                     (rule "orRight" (formula "26"))
                     (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "14"))
                      (builtin "One Step Simplification" (formula "24"))
                     (rule "elementOfSetMinus" (formula "26"))
                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                     (rule "false_right" (formula "26"))
                     (rule "elementOfSetMinus" (formula "27"))
                     (rule "elementOfSetMinus" (formula "26"))
                     (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "26"))
                     (rule "notRight" (formula "26"))
                     (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "27"))
                     (rule "false_right" (formula "27"))
                     (rule "elementOfUnion" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "1"))
                     (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "25"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1"))
                     (rule "andLeft" (formula "1"))
                     (rule "close" (formula "26") (ifseqformula "1"))
                  )
               )
               (branch "Case 2"
                  (rule "unlimit_java_lang_Object__inv_" (formula "9") (term "1,1,1,0,0,0,0") (userinteraction))
                  (rule "Class_invariant_axiom_for_Tree" (formula "9") (term "1,1,1,0,0,0,0") (inst "k=k") (inst "k_0=k_0") (ifseqformula "12") (userinteraction))
                   (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                  (rule "notLeft" (formula "1"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "andLeft" (formula "12"))
                  (rule "eqSymm" (formula "23"))
                  (rule "eqSymm" (formula "8") (term "0,0"))
                  (rule "eqSymm" (formula "12") (term "0,0,0"))
                  (rule "replace_known_right" (formula "24") (term "0,0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "disjointDefinition" (formula "22") (term "1"))
                  (rule "disjointDefinition" (formula "19") (term "1,0,1"))
                  (rule "disjointDefinition" (formula "11"))
                  (rule "disjointDefinition" (formula "18") (term "1"))
                  (rule "disjointDefinition" (formula "15") (term "1,0,1"))
                  (rule "disjointDefinition" (formula "14") (term "1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1"))
                  (rule "measuredByCheck" (formula "24") (ifseqformula "7"))
                  (rule "inEqSimp_ltToLeq" (formula "9"))
                  (rule "add_zero_right" (formula "9") (term "0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                  (rule "precOfInt" (formula "24"))
                  (rule "replace_known_left" (formula "24") (term "1") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "24"))
                  (rule "inEqSimp_ltToLeq" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "15") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "13"))
                  (rule "add_zero_right" (formula "13") (term "0"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
                  (rule "inEqSimp_leqRight" (formula "24"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1"))
                  (rule "mul_literals" (formula "11") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "15") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "15") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "15") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "15") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "15") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "15") (term "1,1,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "14"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0"))
                  (rule "polySimp_elimOne" (formula "14") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "14"))
                  (rule "qeq_literals" (formula "1") (term "0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
               (rule "notLeft" (formula "1"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "8"))
               (rule "andLeft" (formula "10"))
               (rule "eqSymm" (formula "18"))
               (rule "close" (formula "18") (ifseqformula "17"))
            )
         )
      )
   )
   (branch "Assume self.right@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] != self.right"
      (rule "notLeft" (formula "1"))
      (rule "eqSymm" (formula "10") (term "0,0,0"))
      (rule "eqSymm" (formula "10") (term "0,0,1"))
      (rule "pullOutSelect" (formula "10") (term "1,0,1,1,1") (inst "selectSK=Tree_right_0"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
      (rule "applyEq" (formula "11") (term "1,0,0,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "11") (term "0,0,0,1,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "5")))
      (rule "eqSymm" (formula "9"))
      (rule "eqSymm" (formula "11") (term "0,0,1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_left_0"))
      (rule "simplifySelectOfAnon" (formula "2"))
       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
      (rule "eqSymm" (formula "3"))
      (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "hideAuxiliaryEq" (formula "3"))
      (rule "elementOfSetMinus" (formula "2") (term "0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "elementOfSetMinus" (formula "2") (term "0"))
      (rule "elementOfUnion" (formula "2") (term "0,1,0"))
      (rule "elementOfSingleton" (formula "2") (term "0,0,1,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "elementOfSingleton" (formula "2") (term "0,1,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "commuteUnion" (formula "11") (term "1,1,1,0,0,1,1,1"))
      (rule "commuteUnion" (formula "11") (term "1,1,1,0,0,1,1,0,1"))
      (rule "commuteUnion" (formula "11") (term "1,1,1,0,0,0,0,1"))
      (rule "eqSymm" (formula "11") (term "0,0,1"))
      (rule "commuteUnion" (formula "11") (term "1,1,1,0,0,0,0,1"))
      (rule "eqSymm" (formula "11") (term "0,0,1"))
      (rule "Definition_axiom_for_blackHeight_in_Tree" (formula "11") (term "1,0,0,0"))
      (rule "castDel" (formula "11") (term "1,0,0,0"))
      (rule "eqSymm" (formula "11") (term "0,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "11") (term "0,1,2,0,0,0,0"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,2,0,0,0,0"))
      (rule "polySimp_addComm1" (formula "11") (term "0,0,1,2,0,0,0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,1,2,0,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,2,0,0,0,0"))
      (rule "polySimp_elimOne" (formula "11") (term "0,0,1,2,0,0,0,0"))
      (rule "commute_or" (formula "2"))
      (rule "Class_invariant_axiom_for_Tree" (formula "8") (inst "k=k") (inst "k_0=k_0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "8"))
      (rule "eqSymm" (formula "8") (term "0,0,0"))
      (rule "disjointDefinition" (formula "14") (term "1"))
      (rule "disjointDefinition" (formula "11") (term "1,0,1"))
      (rule "disjointDefinition" (formula "10") (term "1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "9"))
      (rule "add_zero_right" (formula "9") (term "0"))
      (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
      (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
      (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "9"))
      (rule "polySimp_mulLiterals" (formula "9") (term "0"))
      (rule "polySimp_elimOne" (formula "9") (term "0"))
      (rule "Definition_axiom_for_blackHeight_in_Tree" (formula "17") (term "0,0,0,1"))
      (rule "castDel" (formula "17") (term "0,0,0,1"))
      (rule "inEqSimp_gtToGeq" (formula "17") (term "0,1,2,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,1,2,0,0,0,1"))
      (rule "polySimp_addComm1" (formula "17") (term "0,0,1,2,0,0,0,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "17") (term "0,1,2,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "17") (term "0,0,1,2,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "17") (term "0,0,1,2,0,0,0,1"))
      (rule "pullOutSelect" (formula "17") (term "1,2,1,2,0,0,0,1") (inst "selectSK=Tree_right_1"))
      (rule "applyEq" (formula "18") (term "1,0,0,1,2,0,0,0,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_homoInEq0" (formula "18") (term "0,1,2,0,0,0,1"))
      (rule "polySimp_addComm1" (formula "18") (term "0,0,1,2,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial1" (formula "18") (term "0,1,2,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "18") (term "1,0,1,2,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "18") (term "1,0,1,2,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,1,2,0,0,0,1"))
      (rule "mul_literals" (formula "18") (term "0,1,0,1,2,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "18") (term "1,1,0,1,2,0,0,0,1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "18") (term "0,0,0,2,0,0,0,1") (inst "selectSK=Tree_isRed_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "19") (term "1,1,1,2,0,0,0,1") (inst "selectSK=Tree_left_1"))
      (rule "applyEq" (formula "20") (term "1,0,0,1,2,0,0,0,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "inEqSimp_homoInEq1" (formula "20") (term "0,1,2,0,0,0,1"))
      (rule "polySimp_addComm1" (formula "20") (term "0,0,1,2,0,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,1,2,0,0,0,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,1,2,0,0,0,1"))
      (rule "polySimp_rightDist" (formula "20") (term "1,0,1,2,0,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,1,2,0,0,0,1"))
      (rule "mul_literals" (formula "20") (term "0,1,0,1,2,0,0,0,1"))
      (rule "polySimp_elimOne" (formula "20") (term "1,1,0,1,2,0,0,0,1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "Definition_axiom_for_blackHeight_in_Tree" (formula "20") (term "1,0,0,1"))
      (rule "castDel" (formula "20") (term "1,0,0,1"))
      (rule "inEqSimp_gtToGeq" (formula "20") (term "0,1,2,1,0,0,1"))
      (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,1,2,1,0,0,1"))
      (rule "polySimp_addComm1" (formula "20") (term "0,0,1,2,1,0,0,1"))
      (rule "inEqSimp_sepNegMonomial1" (formula "20") (term "0,1,2,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "20") (term "0,0,1,2,1,0,0,1"))
      (rule "eqSymm" (formula "20") (term "0,0,1"))
      (rule "polySimp_elimOne" (formula "20") (term "0,0,1,2,0,0,0,1"))
      (rule "pullOutSelect" (formula "20") (term "1,1,1,0,1,2,0,0,0,1") (inst "selectSK=Tree_left_2"))
      (rule "applyEq" (formula "21") (term "1,1,1,2,0,0,0,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "21") (term "0,0,0,2,0,0,0,1") (inst "selectSK=Tree_isRed_1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "eqSymm" (formula "1") (term "1,0,1,0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "22") (term "1,2,1,2,0,0,0,1") (inst "selectSK=Tree_right_2"))
      (rule "applyEq" (formula "23") (term "1,0,0,1,2,0,0,0,1") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "Definition_axiom_for_footprint_in_Tree" (formula "23") (term "0,1,1,0,0,1,1,1") (ifseqformula "22"))
      (rule "setMinusOfUnion" (formula "23") (term "1,1,0,0,1,1,1"))
      (rule "setMinusOfUnion" (formula "23") (term "1,1,1,0,0,1,1,1"))
      (rule "Definition_axiom_for_footprint_in_Tree" (formula "23") (term "0,1,1,0,0,1,1,0,1") (ifseqformula "22"))
      (rule "setMinusOfUnion" (formula "23") (term "1,1,0,0,1,1,0,1"))
      (rule "setMinusOfUnion" (formula "23") (term "1,1,1,0,0,1,1,0,1"))
      (rule "Definition_axiom_for_blackHeight_in_Tree" (formula "23") (term "1,0,0,0"))
      (rule "castDel" (formula "23") (term "1,0,0,0"))
      (rule "inEqSimp_gtToGeq" (formula "23") (term "0,1,2,1,0,0,0"))
      (rule "polySimp_mulComm0" (formula "23") (term "1,0,0,0,1,2,1,0,0,0"))
      (rule "polySimp_addComm1" (formula "23") (term "0,0,1,2,1,0,0,0"))
      (rule "inEqSimp_sepNegMonomial1" (formula "23") (term "0,1,2,1,0,0,0"))
      (rule "polySimp_mulLiterals" (formula "23") (term "0,0,1,2,1,0,0,0"))
      (rule "eqSymm" (formula "23") (term "0,0,0"))
      (rule "polySimp_elimOne" (formula "23") (term "0,0,1,2,0,0,0,0"))
      (rule "Definition_axiom_for_footprint_in_Tree" (formula "7") (term "2,0,0") (ifseqformula "22"))
      (rule "elementOfUnion" (formula "7") (term "0,0"))
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "21")))
      (rule "closeFalse" (formula "7"))
   )
)
(branch "Assume self.left@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] != self.left"
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "9") (term "0,0,0"))
   (rule "eqSymm" (formula "9") (term "0,0,1"))
   (rule "pullOutSelect" (formula "9") (term "1,0,1,1,1") (inst "selectSK=Tree_right_0"))
   (rule "applyEq" (formula "10") (term "0,0,0,1,1") (ifseqformula "1"))
   (rule "applyEq" (formula "10") (term "1,0,0,0,1") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "9")) (ifInst ""  (formula "4")))
   (rule "eqSymm" (formula "10") (term "0,0,1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "10") (term "0,0,0,1,0,1") (inst "selectSK=Tree_left_0"))
   (rule "applyEq" (formula "11") (term "1,0,1,1,0,1") (ifseqformula "1"))
   (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
   (rule "applyEq" (formula "11") (term "1,0,0,0,1") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "5")))
   (rule "eqSymm" (formula "9"))
   (rule "eqSymm" (formula "11") (term "0,0,1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "commuteUnion" (formula "11") (term "1,1,1,0,0,1,1,0,1"))
   (rule "commuteUnion" (formula "11") (term "1,1,1,0,0,1,1,1"))
   (rule "commuteUnion" (formula "11") (term "1,1,1,0,1,0,0,1"))
   (rule "commuteUnion" (formula "11") (term "1,1,1,0,0,0,0,1"))
   (rule "Definition_axiom_for_blackHeight_in_Tree" (formula "11") (term "0,0,0,0"))
   (rule "castDel" (formula "11") (term "0,0,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "11") (term "0,1,2,0,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,2,0,0,0,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,0,1,2,0,0,0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,1,2,0,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,2,0,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,1,2,0,0,0,0"))
   (rule "Definition_axiom_for_blackHeight_in_Tree" (formula "11") (term "1,0,0,0"))
   (rule "castDel" (formula "11") (term "1,0,0,0"))
   (rule "inEqSimp_gtToGeq" (formula "11") (term "0,1,2,1,0,0,0"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,2,1,0,0,0"))
   (rule "polySimp_addComm1" (formula "11") (term "0,0,1,2,1,0,0,0"))
   (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,1,2,1,0,0,0"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,2,1,0,0,0"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,1,2,1,0,0,0"))
   (rule "Definition_axiom_for_blackHeight_in_Tree" (formula "11") (term "1,0,0,1"))
   (rule "castDel" (formula "11") (term "1,0,0,1"))
   (rule "eqSymm" (formula "11") (term "0,0,1"))
   (rule "inEqSimp_gtToGeq" (formula "11") (term "0,1,2,0,0,0,1"))
   (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,1,2,0,0,0,1"))
   (rule "polySimp_addComm1" (formula "11") (term "0,0,1,2,0,0,0,1"))
   (rule "inEqSimp_sepNegMonomial1" (formula "11") (term "0,1,2,0,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "11") (term "0,0,1,2,0,0,0,1"))
   (rule "polySimp_elimOne" (formula "11") (term "0,0,1,2,0,0,0,1"))
   (rule "pullOutSelect" (formula "11") (term "1,1,1,2,0,0,0,1") (inst "selectSK=Tree_left_1"))
   (rule "applyEq" (formula "12") (term "1,1,1,0,1,2,0,0,0,1") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,1,0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "12") (term "1,2,1,2,0,0,0,1") (inst "selectSK=Tree_right_1"))
   (rule "applyEq" (formula "13") (term "1,0,0,1,2,0,0,0,1") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,1,0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "13") (term "0,0,0,2,0,0,0,1") (inst "selectSK=Tree_isRed_0"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,1,0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "eqSymm" (formula "1") (term "1,0,1,0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "Definition_axiom_for_footprint_in_Tree" (formula "14") (term "0,1,1,0,0,1,1,0,1") (ifseqformula "13"))
   (rule "setMinusOfUnion" (formula "14") (term "1,1,0,0,1,1,0,1"))
   (rule "setMinusOfUnion" (formula "14") (term "1,1,1,0,0,1,1,0,1"))
   (rule "Definition_axiom_for_footprint_in_Tree" (formula "14") (term "0,1,1,0,0,1,1,1") (ifseqformula "13"))
   (rule "setMinusOfUnion" (formula "14") (term "1,1,0,0,1,1,1"))
   (rule "setMinusOfUnion" (formula "14") (term "1,1,1,0,0,1,1,1"))
   (rule "Class_invariant_axiom_for_Tree" (formula "11") (inst "k=k") (inst "k_0=k_0") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "andLeft" (formula "11"))
   (rule "eqSymm" (formula "11") (term "0,0,0"))
   (rule "disjointDefinition" (formula "17") (term "1"))
   (rule "disjointDefinition" (formula "14") (term "1,0,1"))
   (rule "disjointDefinition" (formula "13") (term "1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "13") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "12"))
   (rule "add_zero_right" (formula "12") (term "0"))
   (rule "polySimp_mulComm0" (formula "12") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
   (rule "mul_literals" (formula "14") (term "0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1"))
   (rule "mul_literals" (formula "13") (term "0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "12"))
   (rule "polySimp_mulLiterals" (formula "12") (term "0"))
   (rule "polySimp_elimOne" (formula "12") (term "0"))
   (rule "Definition_axiom_for_footprint_in_Tree" (formula "4") (term "2,0,0") (ifseqformula "19"))
   (rule "elementOfUnion" (formula "4") (term "0,0"))
    (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "18")))
   (rule "closeFalse" (formula "4"))
)
)
}
