\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 08 01:10:22 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\include "../../iSet.key";

\proofObligation "#Proof Obligation Settings
#Fri Sep 08 01:10:22 CEST 2023
contract=Tree[Tree\\:\\:doubleRedRight()].JML accessible clause.0
name=Tree[Tree\\:\\:doubleRedRight()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "johanna" ) (keyVersion "4d5d8c5cb0b36bcbdc74ead5888a2f6bbedfe5ef"))

(autoModeTime "45236")

(branch "dummy ID"
(rule "impRight" (formula "1") (newnames "self,anon_heap"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
 (builtin "One Step Simplification" (formula "8") (userinteraction))
(rule "Definition_axiom_for_doubleRedRight_in_Tree" (formula "8") (term "0") (ifseqformula "7") (userinteraction))
(rule "Definition_axiom_for_doubleRedRight_in_Tree" (formula "8") (term "1") (ifseqformula "7") (userinteraction))
 (builtin "One Step Simplification" (formula "8") (userinteraction))
(rule "eqTermCut" (formula "8") (term "0,0,1,0,0,0,0") (inst "s=Tree::select(anon(heap,
                  setMinus(allLocs,
                           setMinus(Tree::footprint(heap,
                                                    self),
                                    singleton(self,
                                              Tree::$heightVariant))),
                  anon_heap<<anonHeapFunction>>),
             self<<origin(\"accessible @ file Tree.java @ line 209\",\"[]\")>>,
             Tree::$right)") (userinteraction))
(branch "Assume self.right = self.right@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)]"
   (rule "eqTermCut" (formula "9") (term "0,0,0,1,1") (inst "s=Tree::select(heap, self, Tree::$left)") (userinteraction))
   (branch "Assume self.left@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = self.left"
      (rule "cut_direct" (formula "10") (term "0,1,0,0,0,0") (userinteraction))
      (branch "CUT: self.right = null TRUE"
          (builtin "One Step Simplification" (formula "11"))
         (rule "notRight" (formula "11"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "notLeft" (formula "2"))
         (rule "eqSymm" (formula "7"))
         (rule "applyEq" (formula "7") (term "1") (ifseqformula "5"))
         (rule "close" (formula "14") (ifseqformula "7"))
      )
      (branch "CUT: self.right = null FALSE"
         (rule "eqTermCut" (formula "11") (term "0,0,0,0,0,1") (inst "s=boolean::select(heap, self, Tree::$isRed)") (userinteraction))
         (branch "Assume self.isRed@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = self.isRed"
            (rule "applyEq" (formula "12") (term "0,0,0,0,0,1") (ifseqformula "1") (userinteraction))
            (rule "applyEqReverse" (formula "12") (term "0,0,1,0,0,0,1") (ifseqformula "3") (userinteraction))
            (rule "applyEqReverse" (formula "12") (term "1,0,1,0,0,1") (ifseqformula "3") (userinteraction))
            (rule "eqTermCut" (formula "12") (term "0,1,0,0,1") (inst "s=boolean::select(heap,
                Tree::select(heap, self, Tree::$right),
                Tree::$isRed)") (userinteraction))
            (branch "Assume (self.right@heap).isRed@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = self.right.isRed"
               (rule "applyEq" (formula "13") (term "0,1,0,0,1") (ifseqformula "1") (userinteraction))
               (rule "applyEqReverse" (formula "13") (term "1,0,1,0,1") (ifseqformula "4") (userinteraction))
                (builtin "Use Dependency Contract" (formula "13") (term "0,1,0,1") (ifInst ""  (formula "13") (term "0,1,0,0")) (contract "Tree[Tree::noDoubleRed()].JML accessible clause.0") (userinteraction))
               (rule "impLeft" (formula "11") (userinteraction))
               (branch "Case 1"
                  (rule "Class_invariant_axiom_for_Tree" (formula "10") (inst "k=k") (inst "k_0=k_0") (ifseqformula "12") (userinteraction))
                  (rule "andRight" (formula "11"))
                  (branch "Case 1"
                     (rule "andRight" (formula "11"))
                     (branch "Case 1"
                        (rule "andRight" (formula "11"))
                        (branch "Case 1"
                           (rule "andRight" (formula "11"))
                           (branch "Case 1"
                              (rule "andRight" (formula "11"))
                              (branch "Case 1"
                                 (rule "notRight" (formula "11"))
                                 (rule "close" (formula "13") (ifseqformula "1"))
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                                  (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
                                 (rule "referencedObjectIsCreatedRight" (formula "11") (ifseqformula "13"))
                                 (rule "close" (formula "11") (ifseqformula "5"))
                              )
                           )
                           (branch "Case 2"
                              (rule "andRight" (formula "11"))
                              (branch "Case 1"
                                 (rule "close" (formula "11") (ifseqformula "5"))
                              )
                              (branch "Case 2"
                                  (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                                  (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
                                 (rule "wellFormedAnon" (formula "11"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "10"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "eqSymm" (formula "4"))
                                 (rule "eqSymm" (formula "10") (term "0,0"))
                                 (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "6"))
                                  (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "5")))
                                 (rule "closeTrue" (formula "19"))
                              )
                           )
                        )
                        (branch "Case 2"
                            (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "10"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "10"))
                           (rule "eqSymm" (formula "4"))
                           (rule "eqSymm" (formula "10") (term "0,0"))
                           (rule "disjointDefinition" (formula "18") (term "1"))
                           (rule "disjointDefinition" (formula "12") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "14"))
                           (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11"))
                           (rule "add_zero_right" (formula "11") (term "0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                           (rule "polySimp_mulComm0" (formula "13") (term "1"))
                           (rule "polySimp_rightDist" (formula "13") (term "1"))
                           (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                           (rule "mul_literals" (formula "13") (term "0,1"))
                           (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                           (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                           (rule "polySimp_elimOne" (formula "11") (term "0"))
                           (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_isRed_0"))
                           (rule "simplifySelectOfAnon" (formula "2"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")) (ifInst ""  (formula "8")))
                           (rule "eqSymm" (formula "3"))
                           (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "elementOfSetMinus" (formula "2") (term "0"))
                           (rule "elementOfSingleton" (formula "2") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_isRed_1"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                           (rule "eqSymm" (formula "2"))
                           (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "hideAuxiliaryEq" (formula "2"))
                           (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
                           (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=Tree_left_0"))
                           (rule "applyEq" (formula "23") (term "0,0,0,1,1") (ifseqformula "3"))
                           (rule "applyEq" (formula "23") (term "1,0,0,0,1,1,1") (ifseqformula "3"))
                           (rule "applyEq" (formula "23") (term "1,0,1,1,1,1") (ifseqformula "3"))
                           (rule "simplifySelectOfAnon" (formula "3"))
                            (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "21")) (ifInst ""  (formula "8")))
                           (rule "eqSymm" (formula "4"))
                           (rule "applyEqReverse" (formula "23") (term "1,0,1,1,1,1") (ifseqformula "4"))
                           (rule "applyEqReverse" (formula "23") (term "1,0,0,0,1,1,1") (ifseqformula "4"))
                           (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "applyEqReverse" (formula "23") (term "0,0,0,1,1") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "elementOfSetMinus" (formula "3") (term "0"))
                           (rule "elementOfSingleton" (formula "3") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=Tree_right_0"))
                           (rule "simplifySelectOfAnon" (formula "4"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "21")) (ifInst ""  (formula "8")))
                           (rule "eqSymm" (formula "5"))
                           (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "hideAuxiliaryEq" (formula "5"))
                           (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "elementOfSetMinus" (formula "4") (term "0"))
                           (rule "elementOfSingleton" (formula "4") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "pullOutSelect" (formula "22") (term "0,0,0,1,1,1") (inst "selectSK=Tree_isRed_2"))
                           (rule "simplifySelectOfAnon" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
                           (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "commute_or" (formula "11"))
                           (rule "commute_or" (formula "3"))
                           (rule "limit_java_lang_Object__inv_" (formula "20"))
                           (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
                           (rule "closeFalse" (formula "1"))
                        )
                     )
                     (branch "Case 2"
                        (rule "Definition_axiom_for_footprint_in_Tree" (formula "11") (term "0,1,0") (ifseqformula "12") (userinteraction))
                         (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "12"))
                        (rule "andLeft" (formula "10"))
                        (rule "andLeft" (formula "13"))
                        (rule "eqSymm" (formula "4"))
                        (rule "eqSymm" (formula "10") (term "0,0"))
                        (rule "replace_known_right" (formula "19") (term "0,1,1,0,1,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "disjointDefinition" (formula "18") (term "1"))
                        (rule "disjointDefinition" (formula "12") (term "1,0,1"))
                        (rule "disjointDefinition" (formula "14"))
                        (rule "disjointDefinition" (formula "19"))
                        (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "11"))
                        (rule "add_zero_right" (formula "11") (term "0"))
                        (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                        (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                        (rule "polySimp_elimOne" (formula "11") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "13"))
                        (rule "polySimp_mulComm0" (formula "13") (term "1"))
                        (rule "polySimp_rightDist" (formula "13") (term "1"))
                        (rule "mul_literals" (formula "13") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "13") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "13") (term "1,1"))
                        (rule "setMinusOfUnion" (formula "19") (term "1,0,0"))
                        (rule "setMinusOfUnion" (formula "19") (term "1,1,0,0"))
                        (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_isRed_0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                        (rule "eqSymm" (formula "2"))
                        (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_isRed_1"))
                        (rule "simplifySelectOfAnon" (formula "2"))
                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")) (ifInst ""  (formula "8")))
                        (rule "eqSymm" (formula "3"))
                        (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "elementOfSetMinus" (formula "2") (term "0"))
                        (rule "elementOfSingleton" (formula "2") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=Tree_left_0"))
                        (rule "applyEq" (formula "23") (term "1,0,0,0,1,1,1") (ifseqformula "3"))
                        (rule "applyEq" (formula "23") (term "1,0,1,1,1,1") (ifseqformula "3"))
                        (rule "applyEq" (formula "23") (term "0,0,0,1,1") (ifseqformula "3"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "21")) (ifInst ""  (formula "8")))
                        (rule "eqSymm" (formula "4"))
                        (rule "applyEqReverse" (formula "23") (term "0,0,0,1,1") (ifseqformula "4"))
                        (rule "applyEqReverse" (formula "23") (term "1,0,1,1,1,1") (ifseqformula "4"))
                        (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "23") (term "1,0,0,0,1,1,1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfSetMinus" (formula "3") (term "0"))
                        (rule "elementOfSingleton" (formula "3") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=Tree_right_0"))
                        (rule "simplifySelectOfAnon" (formula "4"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "21")) (ifInst ""  (formula "8")))
                        (rule "eqSymm" (formula "5"))
                        (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "hideAuxiliaryEq" (formula "5"))
                        (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "elementOfSetMinus" (formula "4") (term "0"))
                        (rule "elementOfSingleton" (formula "4") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "pullOutSelect" (formula "22") (term "0,0,0,1,1,1") (inst "selectSK=Tree_isRed_2"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "commuteUnion" (formula "20") (term "1,1,0,0"))
                        (rule "commuteIntersection" (formula "20") (term "0"))
                        (rule "commute_or" (formula "11"))
                        (rule "limit_Tree_footprint" (formula "23") (term "0,1,1,0,0,1,0,1"))
                        (rule "limit_Tree_noDoubleRed" (formula "24") (term "0,1,1,1,0"))
                        (rule "limit_Tree_noDoubleRed" (formula "25") (term "0,1,0,0"))
                        (rule "limit_Tree_footprint" (formula "22") (term "1,0,1"))
                        (rule "applyEq" (formula "24") (term "0,0,1,1,1,0") (ifseqformula "22"))
                        (rule "limit_Tree_footprint" (formula "23") (term "0,0,1"))
                        (rule "applyEq" (formula "25") (term "2,0,1,1,1,1,0") (ifseqformula "23"))
                        (rule "commute_or" (formula "6"))
                        (rule "cnf_rightDist" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "commute_or" (formula "7"))
                        (rule "commute_or" (formula "5") (term "0,0"))
                        (rule "commute_or" (formula "8"))
                        (rule "commute_or" (formula "17"))
                        (rule "limit_Tree_noDoubleRed" (formula "29") (term "0,1,1,1,1"))
                        (rule "limit_Tree_noDoubleRed" (formula "30") (term "0,1,0,1"))
                        (rule "cnf_rightDist" (formula "18"))
                        (rule "andLeft" (formula "18"))
                        (rule "commute_or" (formula "19"))
                        (rule "commute_and_2" (formula "32") (term "0,0"))
                        (rule "cnf_rightDist" (formula "6") (term "0,0"))
                        (rule "commute_or" (formula "6") (term "0,0,0"))
                        (rule "commute_and" (formula "32") (term "1,1,0"))
                        (rule "equalityToElementOfRight" (formula "29") (inst "ov=ov") (inst "fv=fv"))
                         (builtin "One Step Simplification" (formula "29"))
                        (rule "allRight" (formula "29") (inst "sk=ov_0"))
                        (rule "allRight" (formula "29") (inst "sk=fv_0"))
                        (rule "notRight" (formula "29"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfSetMinus" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfSingleton" (formula "30"))
                        (rule "elementOfUnion" (formula "31"))
                        (rule "orRight" (formula "31"))
                        (rule "elementOfUnion" (formula "32"))
                        (rule "orRight" (formula "32"))
                        (rule "elementOfSetMinus" (formula "31"))
                         (builtin "One Step Simplification" (formula "31"))
                        (rule "elementOfSingleton" (formula "31") (term "0,1"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "replace_known_right" (formula "32") (term "0") (ifseqformula "30"))
                         (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "30")))
                        (rule "false_right" (formula "32"))
                        (rule "elementOfSetMinus" (formula "32"))
                        (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "notRight" (formula "32"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "close" (formula "32") (ifseqformula "1"))
                     )
                  )
                  (branch "Case 2"
                     (rule "unlimit_java_lang_Object__inv_" (formula "10") (term "1,1,1,0,0,0") (userinteraction))
                     (rule "Class_invariant_axiom_for_Tree" (formula "10") (term "1,1,1,0,0,0") (inst "k=k") (inst "k_0=k_0") (ifseqformula "13") (userinteraction))
                      (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "13")) (ifInst ""  (formula "13")) (ifInst ""  (formula "13")))
                      (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "11"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "13"))
                     (rule "andLeft" (formula "12"))
                     (rule "andLeft" (formula "10"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "andLeft" (formula "15"))
                     (rule "eqSymm" (formula "4"))
                     (rule "eqSymm" (formula "10") (term "0,0"))
                     (rule "eqSymm" (formula "15") (term "0,0,0"))
                     (rule "disjointDefinition" (formula "24") (term "1"))
                     (rule "disjointDefinition" (formula "12") (term "1,0,1"))
                     (rule "disjointDefinition" (formula "21") (term "1"))
                     (rule "disjointDefinition" (formula "14"))
                     (rule "disjointDefinition" (formula "18") (term "1,0,1"))
                     (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                     (rule "measuredByCheckEmpty" (formula "25") (ifseqformula "9"))
                     (rule "closeTrue" (formula "25"))
                  )
               )
               (branch "Case 2"
                  (rule "applyEq" (formula "14") (term "0,1,0,1") (ifseqformula "11") (userinteraction))
                  (rule "applyEq" (formula "14") (term "0,0,0,1,1") (ifseqformula "3") (userinteraction))
                  (rule "applyEq" (formula "14") (term "1,0,0,0,1,1,1") (ifseqformula "3") (userinteraction))
                  (rule "cut_direct" (formula "14") (term "0,0,1,1") (userinteraction))
                  (branch "CUT: self.left = null TRUE"
                      (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "1")) (ifInst ""  (formula "14")))
                     (rule "closeTrue" (formula "15"))
                  )
                  (branch "CUT: self.left = null FALSE"
                     (rule "eqTermCut" (formula "15") (term "0,0,0,1,1,1") (inst "s=boolean::select(heap,
                Tree::select(heap, self, Tree::$left),
                Tree::$isRed)") (userinteraction))
                     (branch "Assume (self.left@heap).isRed@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = self.left.isRed"
                        (rule "applyEq" (formula "16") (term "0,0,0,1,1,1") (ifseqformula "1") (userinteraction))
                        (rule "applyEq" (formula "16") (term "1,0,1,1,1,1") (ifseqformula "4") (userinteraction))
                         (builtin "Use Dependency Contract" (formula "16") (term "0,1,1,1,1") (ifInst ""  (formula "16") (term "0,1,1,1,0")) (contract "Tree[Tree::noDoubleRed()].JML accessible clause.0") (userinteraction))
                        (rule "Class_invariant_axiom_for_Tree" (formula "11") (inst "k=k") (inst "k_0=k_0") (ifseqformula "14") (userinteraction))
                        (rule "impLeft" (formula "13"))
                        (branch "Case 1"
                           (rule "andRight" (formula "13"))
                           (branch "Case 1"
                              (rule "andRight" (formula "13"))
                              (branch "Case 1"
                                 (rule "andRight" (formula "13"))
                                 (branch "Case 1"
                                    (rule "andRight" (formula "13"))
                                    (branch "Case 1"
                                       (rule "andRight" (formula "13"))
                                       (branch "Case 1"
                                          (rule "notRight" (formula "13"))
                                          (rule "close" (formula "16") (ifseqformula "1"))
                                       )
                                       (branch "Case 2"
                                           (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
                                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
                                          (rule "referencedObjectIsCreatedRight" (formula "13") (ifseqformula "16"))
                                          (rule "close" (formula "13") (ifseqformula "6"))
                                       )
                                    )
                                    (branch "Case 2"
                                       (rule "andRight" (formula "13"))
                                       (branch "Case 1"
                                          (rule "close" (formula "13") (ifseqformula "6"))
                                       )
                                       (branch "Case 2"
                                           (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
                                           (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
                                          (rule "wellFormedAnon" (formula "13"))
                                          (rule "andLeft" (formula "11"))
                                          (rule "andLeft" (formula "11"))
                                          (rule "andLeft" (formula "11"))
                                          (rule "andLeft" (formula "11"))
                                          (rule "andLeft" (formula "11"))
                                          (rule "andLeft" (formula "13"))
                                          (rule "andLeft" (formula "11"))
                                          (rule "andLeft" (formula "13"))
                                          (rule "andLeft" (formula "15"))
                                          (rule "notLeft" (formula "11"))
                                          (rule "andLeft" (formula "12"))
                                          (rule "eqSymm" (formula "5"))
                                          (rule "eqSymm" (formula "22"))
                                          (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "6"))
                                           (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "7")))
                                          (rule "closeTrue" (formula "23"))
                                       )
                                    )
                                 )
                                 (branch "Case 2"
                                     (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
                                     (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
                                    (rule "andLeft" (formula "11"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "andLeft" (formula "11"))
                                    (rule "andLeft" (formula "13"))
                                    (rule "notLeft" (formula "11"))
                                    (rule "andLeft" (formula "12"))
                                    (rule "eqSymm" (formula "5"))
                                    (rule "eqSymm" (formula "22"))
                                    (rule "disjointDefinition" (formula "20"))
                                    (rule "disjointDefinition" (formula "16"))
                                    (rule "disjointDefinition" (formula "13"))
                                    (rule "inEqSimp_ltToLeq" (formula "15"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "11"))
                                    (rule "add_zero_right" (formula "11") (term "0"))
                                    (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                    (rule "inEqSimp_ltToLeq" (formula "12"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                                    (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                    (rule "polySimp_rightDist" (formula "15") (term "1"))
                                    (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                    (rule "mul_literals" (formula "15") (term "0,1"))
                                    (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                                    (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                                    (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                    (rule "polySimp_elimOne" (formula "11") (term "0"))
                                    (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                    (rule "polySimp_mulComm0" (formula "12") (term "1"))
                                    (rule "polySimp_rightDist" (formula "12") (term "1"))
                                    (rule "mul_literals" (formula "12") (term "0,1"))
                                    (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                                    (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                                    (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=Tree_left_0"))
                                    (rule "simplifySelectOfAnon" (formula "4"))
                                     (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "25")) (ifInst ""  (formula "9")))
                                    (rule "eqSymm" (formula "5"))
                                    (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "hideAuxiliaryEq" (formula "5"))
                                    (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "elementOfSetMinus" (formula "4") (term "0"))
                                    (rule "elementOfSingleton" (formula "4") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "4"))
                                    (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_isRed_0"))
                                    (rule "simplifySelectOfAnon" (formula "2"))
                                     (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "26")))
                                    (rule "eqSymm" (formula "3"))
                                    (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "hideAuxiliaryEq" (formula "3"))
                                    (rule "elementOfSetMinus" (formula "2") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "elementOfSetMinus" (formula "2") (term "0,0,0,0"))
                                    (rule "elementOfSingleton" (formula "2") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "2"))
                                    (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_isRed_1"))
                                    (rule "simplifySelectOfAnon" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                                    (rule "eqSymm" (formula "2"))
                                    (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "hideAuxiliaryEq" (formula "2"))
                                    (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
                                    (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=Tree_isRed_2"))
                                    (rule "simplifySelectOfAnon" (formula "3"))
                                     (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "25")) (ifInst ""  (formula "9")))
                                    (rule "eqSymm" (formula "4"))
                                    (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "hideAuxiliaryEq" (formula "4"))
                                    (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "elementOfSetMinus" (formula "3") (term "0"))
                                    (rule "elementOfSingleton" (formula "3") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "3"))
                                    (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=Tree_right_0"))
                                    (rule "simplifySelectOfAnon" (formula "5"))
                                     (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "25")) (ifInst ""  (formula "9")))
                                    (rule "eqSymm" (formula "6"))
                                    (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "6"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "hideAuxiliaryEq" (formula "6"))
                                    (rule "elementOfSetMinus" (formula "5") (term "0,0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "elementOfSetMinus" (formula "5") (term "0"))
                                    (rule "elementOfSingleton" (formula "5") (term "0,1,0"))
                                     (builtin "One Step Simplification" (formula "5"))
                                    (rule "limit_Tree_noDoubleRed" (formula "21") (term "0"))
                                    (rule "applyEq" (formula "21") (term "1") (ifseqformula "22"))
                                    (rule "limit_Tree_footprint" (formula "22") (term "0,1,1,0,0"))
                                    (rule "limit_java_lang_Object__inv_" (formula "25"))
                                    (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "15"))
                                     (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "26")))
                                    (rule "closeFalse" (formula "1"))
                                 )
                              )
                              (branch "Case 2"
                                 (rule "Definition_axiom_for_footprint_in_Tree" (formula "13") (term "0,1,0") (ifseqformula "14") (userinteraction))
                                  (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
                                  (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "andLeft" (formula "11"))
                                 (rule "andLeft" (formula "13"))
                                 (rule "notLeft" (formula "11"))
                                 (rule "andLeft" (formula "12"))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "eqSymm" (formula "22"))
                                 (rule "replace_known_right" (formula "23") (term "0,1,1,0,1,0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "26")))
                                 (rule "disjointDefinition" (formula "20"))
                                 (rule "disjointDefinition" (formula "16"))
                                 (rule "disjointDefinition" (formula "13"))
                                 (rule "disjointDefinition" (formula "23"))
                                 (rule "inEqSimp_ltToLeq" (formula "15"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "11"))
                                 (rule "add_zero_right" (formula "11") (term "0"))
                                 (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                                 (rule "inEqSimp_ltToLeq" (formula "12"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "15"))
                                 (rule "polySimp_mulComm0" (formula "15") (term "1"))
                                 (rule "polySimp_rightDist" (formula "15") (term "1"))
                                 (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
                                 (rule "mul_literals" (formula "15") (term "0,1"))
                                 (rule "polySimp_elimOne" (formula "15") (term "1,1"))
                                 (rule "inEqSimp_sepNegMonomial0" (formula "11"))
                                 (rule "polySimp_mulLiterals" (formula "11") (term "0"))
                                 (rule "polySimp_elimOne" (formula "11") (term "0"))
                                 (rule "inEqSimp_sepPosMonomial0" (formula "12"))
                                 (rule "polySimp_mulComm0" (formula "12") (term "1"))
                                 (rule "polySimp_rightDist" (formula "12") (term "1"))
                                 (rule "mul_literals" (formula "12") (term "0,1"))
                                 (rule "polySimp_mulLiterals" (formula "12") (term "1,1"))
                                 (rule "polySimp_elimOne" (formula "12") (term "1,1"))
                                 (rule "setMinusOfUnion" (formula "23") (term "1,0,0"))
                                 (rule "setMinusOfUnion" (formula "23") (term "1,1,0,0"))
                                 (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_isRed_0"))
                                 (rule "simplifySelectOfAnon" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "26")))
                                 (rule "eqSymm" (formula "3"))
                                 (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "hideAuxiliaryEq" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "2") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "elementOfSetMinus" (formula "2") (term "0,0,0,0"))
                                 (rule "elementOfSingleton" (formula "2") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=Tree_left_0"))
                                 (rule "simplifySelectOfAnon" (formula "4"))
                                  (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "25")) (ifInst ""  (formula "9")))
                                 (rule "eqSymm" (formula "5"))
                                 (rule "applyEqReverse" (formula "4") (term "1") (ifseqformula "5"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "hideAuxiliaryEq" (formula "5"))
                                 (rule "elementOfSetMinus" (formula "4") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "elementOfSetMinus" (formula "4") (term "0"))
                                 (rule "elementOfSingleton" (formula "4") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=Tree_isRed_1"))
                                 (rule "simplifySelectOfAnon" (formula "3"))
                                  (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "25")) (ifInst ""  (formula "9")))
                                 (rule "eqSymm" (formula "4"))
                                 (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "hideAuxiliaryEq" (formula "4"))
                                 (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "3") (term "0"))
                                 (rule "elementOfSingleton" (formula "3") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "3"))
                                 (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_isRed_2"))
                                 (rule "simplifySelectOfAnon" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "27")))
                                 (rule "eqSymm" (formula "2"))
                                 (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "hideAuxiliaryEq" (formula "2"))
                                 (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
                                 (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=Tree_right_0"))
                                 (rule "simplifySelectOfAnon" (formula "5"))
                                  (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "25")) (ifInst ""  (formula "9")))
                                 (rule "eqSymm" (formula "6"))
                                 (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "6"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "hideAuxiliaryEq" (formula "6"))
                                 (rule "elementOfSetMinus" (formula "5") (term "0,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "elementOfSetMinus" (formula "5") (term "0"))
                                 (rule "elementOfSingleton" (formula "5") (term "0,1,0"))
                                  (builtin "One Step Simplification" (formula "5"))
                                 (rule "commuteIntersection" (formula "23") (term "0"))
                                 (rule "limit_Tree_footprint" (formula "21") (term "0,1,1,0,0"))
                                 (rule "limit_Tree_noDoubleRed" (formula "22") (term "0"))
                                 (rule "applyEq" (formula "22") (term "1") (ifseqformula "23"))
                                 (rule "limit_Tree_noDoubleRed" (formula "23") (term "1"))
                                 (rule "limit_Tree_noDoubleRed" (formula "30") (term "0,1,1,1"))
                                 (rule "limit_Tree_noDoubleRed" (formula "31") (term "0,1,1,0"))
                                 (rule "commute_and_2" (formula "32") (term "0"))
                                 (rule "limit_Tree_footprint" (formula "22") (term "0,0"))
                                 (rule "applyEq" (formula "29") (term "0,0,1,1,1,0") (ifseqformula "22"))
                                 (rule "limit_Tree_footprint" (formula "23") (term "1,0"))
                                 (rule "applyEq" (formula "30") (term "0,1,1,1,1,0") (ifseqformula "23"))
                                 (rule "commute_or" (formula "6"))
                                 (rule "commute_or" (formula "5"))
                                 (rule "commute_and_2" (formula "34") (term "0,1"))
                                 (rule "commute_or" (formula "4") (term "0,0"))
                                 (rule "commute_or" (formula "7"))
                                 (rule "commute_or" (formula "3") (term "0,0"))
                                 (rule "commute_and_2" (formula "34") (term "0,0"))
                                 (rule "shift_paren_and" (formula "34") (term "1"))
                                 (rule "commute_and_2" (formula "34") (term "0,1"))
                                 (rule "commute_and_2" (formula "34") (term "0,0,1"))
                                 (rule "commute_and" (formula "34") (term "1,0,0,0"))
                                 (rule "equalityToElementOfRight" (formula "30") (inst "ov=ov") (inst "fv=fv"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "allRight" (formula "30") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "30") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "30"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfSingleton" (formula "31"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "30"))
                                 (rule "orRight" (formula "30"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "16"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "25"))
                                 (rule "elementOfSetMinus" (formula "32"))
                                  (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "31")))
                                 (rule "false_right" (formula "32"))
                                 (rule "elementOfUnion" (formula "32"))
                                 (rule "orRight" (formula "32"))
                                 (rule "elementOfSetMinus" (formula "32"))
                                 (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "notRight" (formula "32"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "33") (ifseqformula "1"))
                              )
                           )
                           (branch "Case 2"
                              (rule "unlimit_java_lang_Object__inv_" (formula "11") (term "1,1,1,0,0,0,0") (userinteraction))
                              (rule "Class_invariant_axiom_for_Tree" (formula "11") (term "1,1,1,0,0,0,0") (inst "k=k") (inst "k_0=k_0") (ifseqformula "16") (userinteraction))
                               (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "11"))
                              (rule "andLeft" (formula "13"))
                              (rule "notLeft" (formula "11"))
                              (rule "andLeft" (formula "13"))
                              (rule "andLeft" (formula "12"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "andLeft" (formula "14"))
                              (rule "eqSymm" (formula "5"))
                              (rule "eqSymm" (formula "28"))
                              (rule "eqSymm" (formula "14") (term "0,0,0"))
                              (rule "disjointDefinition" (formula "26"))
                              (rule "disjointDefinition" (formula "22"))
                              (rule "disjointDefinition" (formula "20") (term "1"))
                              (rule "disjointDefinition" (formula "13"))
                              (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                              (rule "disjointDefinition" (formula "16") (term "1,0,1"))
                              (rule "measuredByCheckEmpty" (formula "29") (ifseqformula "10"))
                              (rule "closeTrue" (formula "29"))
                           )
                        )
                        (branch "Case 2"
                            (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
                            (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")) (ifInst ""  (formula "15")))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "13"))
                           (rule "andLeft" (formula "12"))
                           (rule "andLeft" (formula "11"))
                           (rule "andLeft" (formula "13"))
                           (rule "notLeft" (formula "11"))
                           (rule "eqSymm" (formula "5"))
                           (rule "eqSymm" (formula "23"))
                           (rule "disjointDefinition" (formula "20"))
                           (rule "disjointDefinition" (formula "16"))
                           (rule "disjointDefinition" (formula "13"))
                           (rule "inEqSimp_ltToLeq" (formula "15"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
                           (rule "inEqSimp_ltToLeq" (formula "11"))
                           (rule "add_zero_right" (formula "11") (term "0"))
                           (rule "polySimp_mulComm0" (formula "11") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "12"))
                           (rule "polySimp_mulComm0" (formula "12") (term "1,0,0"))
                           (rule "applyEq" (formula "27") (term "0,1,1,1") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "27"))
                           (rule "closeTrue" (formula "27"))
                        )
                     )
                     (branch "Assume (self.left@heap).isRed@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] != self.left.isRed"
                        (rule "Definition_axiom_for_footprint_in_Tree" (formula "1") (term "0,1,1,0,0,0") (ifseqformula "13") (userinteraction))
                        (rule "unlimit_Tree_footprint" (formula "1") (term "2,0,1,0,1,1,0,0,0") (userinteraction))
                        (rule "Definition_axiom_for_footprint_in_Tree" (formula "1") (term "2,0,1,0,1,1,0,0,0") (ifseqformula "15") (userinteraction))
                         (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")) (ifInst ""  (formula "14")))
                        (rule "notLeft" (formula "1"))
                        (rule "eqSymm" (formula "4"))
                        (rule "replace_known_right" (formula "12") (term "0,0,1,0,1,1,0,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "14")))
                        (rule "setMinusOfUnion" (formula "12") (term "1,1,0,0"))
                        (rule "setMinusOfUnion" (formula "12") (term "1,1,1,0,0"))
                        (rule "setMinusOfUnion" (formula "12") (term "0,1,1,1,0,0"))
                        (rule "setMinusOfUnion" (formula "12") (term "1,0,1,1,1,0,0"))
                        (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=Tree_left_0"))
                        (rule "applyEq" (formula "17") (term "1,0,1,1,1") (ifseqformula "3"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "14")) (ifInst ""  (formula "8")))
                        (rule "eqSymm" (formula "4"))
                        (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "applyEqReverse" (formula "17") (term "1,0,1,1,1") (ifseqformula "4"))
                        (rule "hideAuxiliaryEq" (formula "4"))
                        (rule "elementOfSetMinus" (formula "3") (term "0,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "elementOfSetMinus" (formula "3") (term "0"))
                        (rule "elementOfSingleton" (formula "3") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_isRed_0"))
                        (rule "simplifySelectOfAnon" (formula "2"))
                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "14")) (ifInst ""  (formula "8")))
                        (rule "eqSymm" (formula "3"))
                        (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "hideAuxiliaryEq" (formula "3"))
                        (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "elementOfSetMinus" (formula "2") (term "0"))
                        (rule "elementOfSingleton" (formula "2") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_isRed_1"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")))
                        (rule "eqSymm" (formula "2"))
                        (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "hideAuxiliaryEq" (formula "2"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "pullOutSelect" (formula "16") (term "0,0,0,1,1") (inst "selectSK=Tree_isRed_2"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "pullOutSelect" (formula "5") (term "0") (inst "selectSK=Tree_right_0"))
                        (rule "simplifySelectOfAnon" (formula "5"))
                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "15")) (ifInst ""  (formula "9")))
                        (rule "eqSymm" (formula "6"))
                        (rule "applyEqReverse" (formula "5") (term "1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "hideAuxiliaryEq" (formula "6"))
                        (rule "elementOfSetMinus" (formula "5") (term "0,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "elementOfSetMinus" (formula "5") (term "0"))
                        (rule "elementOfSingleton" (formula "5") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=Tree_isRed_3"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                        (rule "eqSymm" (formula "14"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                        (rule "elementOfUnion" (formula "1") (term "1,0,0,0,0"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1") (term "1,1,0,0,0,0"))
                        (rule "elementOfSingleton" (formula "1") (term "0,1,1,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1") (term "0,1,0,0,0,0"))
                        (rule "elementOfUnion" (formula "1") (term "1,0,1,0,0,0,0"))
                        (rule "elementOfSetMinus" (formula "1") (term "0,0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,0,0,0,0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "ifthenelse_negated" (formula "1") (term "0"))
                        (rule "commute_or" (formula "5"))
                        (rule "commute_or" (formula "4"))
                        (rule "limit_Tree_footprint" (formula "13") (term "0,1,1,0,0"))
                        (rule "limit_Tree_noDoubleRed" (formula "14") (term "1"))
                        (rule "limit_java_lang_Object__inv_" (formula "12"))
                        (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "limit_Tree_noDoubleRed" (formula "16") (term "0"))
                        (rule "applyEq" (formula "16") (term "1") (ifseqformula "17"))
                        (rule "limit_Tree_noDoubleRed" (formula "22") (term "0,1,1,0"))
                        (rule "limit_Tree_noDoubleRed" (formula "23") (term "0,1,1,1"))
                        (rule "commute_or" (formula "8"))
                        (rule "commute_and_2" (formula "24") (term "0,0"))
                        (rule "commute_and_2" (formula "24") (term "0,1"))
                        (rule "commute_or" (formula "5") (term "0,0"))
                        (rule "commute_or" (formula "4") (term "0,0"))
                        (rule "commute_and_2" (formula "24") (term "0"))
                        (rule "commute_and_2" (formula "24") (term "0,0"))
                        (rule "shift_paren_and" (formula "24") (term "1"))
                        (rule "commute_and_2" (formula "24") (term "0,1"))
                        (rule "commute_and_2" (formula "24") (term "0,0,1"))
                        (rule "commute_and" (formula "24") (term "1,0,0,0"))
                        (rule "commute_and" (formula "24") (term "0,0,0,1"))
                        (rule "shift_paren_and" (formula "24") (term "0,0,0"))
                        (rule "equiv_right" (formula "24"))
                        (branch "Case '->'"
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "2"))
                           (rule "andLeft" (formula "1"))
                           (rule "replace_known_left" (formula "29") (term "1,0") (ifseqformula "4"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "1")) (ifInst ""  (formula "3")))
                           (rule "applyEq" (formula "22") (term "1") (ifseqformula "3"))
                           (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
                           (rule "applyEq" (formula "6") (term "1") (ifseqformula "2"))
                           (rule "apply_eq_boolean" (formula "25") (term "0") (ifseqformula "24"))
                           (rule "eqSymm" (formula "25"))
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "notRight" (formula "25"))
                           (rule "applyEq" (formula "22") (term "1") (ifseqformula "4"))
                           (rule "apply_eq_boolean" (formula "8") (term "1,0") (ifseqformula "25"))
                           (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "5"))
                           (rule "applyEq" (formula "24") (term "1") (ifseqformula "4"))
                           (rule "apply_eq_boolean" (formula "9") (term "2,0") (ifseqformula "25"))
                           (rule "applyEqRigid" (formula "8") (term "1") (ifseqformula "1"))
                           (rule "ifEqualsTRUE" (formula "8"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "andLeft" (formula "8"))
                           (rule "notLeft" (formula "8"))
                           (rule "referencedObjectIsCreatedRight" (formula "25") (ifseqformula "29"))
                           (rule "close" (formula "25") (ifseqformula "14"))
                        )
                        (branch "Case '<-'"
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "replace_known_left" (formula "29") (term "1") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "1")) (ifInst ""  (formula "2")))
                           (rule "applyEq" (formula "5") (term "1") (ifseqformula "4"))
                           (rule "applyEq" (formula "21") (term "1") (ifseqformula "2"))
                           (rule "applyEq" (formula "9") (term "1,1") (ifseqformula "3"))
                           (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "1"))
                           (rule "apply_eq_boolean" (formula "8") (term "1") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "8"))
                           (rule "notLeft" (formula "8"))
                           (rule "ifEqualsTRUE" (formula "23"))
                           (rule "orRight" (formula "23"))
                           (rule "applyEq" (formula "22") (term "1") (ifseqformula "2"))
                           (rule "applyEq" (formula "21") (term "1") (ifseqformula "2"))
                           (rule "hideAuxiliaryEqConcrete2" (formula "25"))
                           (rule "commute_and" (formula "23"))
                           (rule "ifthenelse_split" (formula "7") (term "0"))
                           (branch "self.left.<created> = TRUE TRUE"
                              (rule "close" (formula "26") (ifseqformula "8"))
                           )
                           (branch "self.left.<created> = TRUE FALSE"
                              (rule "referencedObjectIsCreatedRight" (formula "23") (ifseqformula "29"))
                              (rule "close" (formula "23") (ifseqformula "12"))
                           )
                        )
                     )
                  )
               )
            )
            (branch "Assume (self.right@heap).isRed@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] != self.right.isRed"
               (rule "Definition_axiom_for_footprint_in_Tree" (formula "1") (term "0,1,1,0,0,0") (ifseqformula "11") (userinteraction))
               (rule "unlimit_Tree_footprint" (formula "1") (term "2,1,1,0,1,1,0,0,0") (userinteraction))
               (rule "Definition_axiom_for_footprint_in_Tree" (formula "1") (term "2,1,1,0,1,1,0,0,0") (ifseqformula "12") (userinteraction))
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "12")))
               (rule "notLeft" (formula "1"))
               (rule "eqSymm" (formula "3"))
               (rule "replace_known_right" (formula "10") (term "0,1,1,0,1,1,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "10"))
               (rule "setMinusOfUnion" (formula "10") (term "1,1,0,0"))
               (rule "setMinusOfUnion" (formula "10") (term "1,1,1,0,0"))
               (rule "setMinusOfUnion" (formula "10") (term "1,1,1,1,0,0"))
               (rule "setMinusOfUnion" (formula "10") (term "1,1,1,1,1,0,0"))
               (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_left_0"))
               (rule "applyEq" (formula "14") (term "1,0,0,0,1,1,1") (ifseqformula "2"))
               (rule "applyEq" (formula "14") (term "0,0,0,1,1") (ifseqformula "2"))
               (rule "applyEq" (formula "14") (term "1,0,1,1,1,1") (ifseqformula "2"))
               (rule "simplifySelectOfAnon" (formula "2"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "12")) (ifInst ""  (formula "7")))
               (rule "eqSymm" (formula "3"))
               (rule "applyEqReverse" (formula "14") (term "1,0,1,1,1,1") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "applyEqReverse" (formula "14") (term "0,0,0,1,1") (ifseqformula "3"))
               (rule "applyEqReverse" (formula "14") (term "1,0,0,0,1,1,1") (ifseqformula "3"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSetMinus" (formula "2") (term "0"))
               (rule "elementOfSingleton" (formula "2") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_isRed_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "7")))
               (rule "eqSymm" (formula "2"))
               (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSetMinus" (formula "1") (term "0"))
               (rule "elementOfSingleton" (formula "1") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "pullOutSelect" (formula "13") (term "1,0,1,0,1") (inst "selectSK=Tree_right_0"))
               (rule "applyEq" (formula "4") (term "0") (ifseqformula "1"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "7")))
               (rule "eqSymm" (formula "4"))
               (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEqReverse" (formula "14") (term "1,0,1,0,1") (ifseqformula "4"))
               (rule "hideAuxiliaryEq" (formula "4"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSetMinus" (formula "1") (term "0"))
               (rule "elementOfSingleton" (formula "1") (term "0,1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "pullOutSelect" (formula "13") (term "0,1,0,0,1") (inst "selectSK=Tree_isRed_1"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
               (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "pullOutSelect" (formula "11") (term "0") (inst "selectSK=Tree_isRed_2"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "14")))
               (rule "eqSymm" (formula "12"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "1,0,0,0,0"))
               (rule "elementOfSetMinus" (formula "1") (term "0,1,0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,1,0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "1,1,0,0,0,0"))
               (rule "elementOfUnion" (formula "1") (term "1,1,1,0,0,0,0"))
               (rule "elementOfSetMinus" (formula "1") (term "0,1,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,1,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "pullOutSelect" (formula "15") (term "0,0,0,1,1,1") (inst "selectSK=Tree_isRed_3"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "commute_or" (formula "6"))
               (rule "commute_or" (formula "5"))
               (rule "limit_java_lang_Object__inv_" (formula "12"))
               (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "limit_Tree_footprint" (formula "17") (term "0,1,1,0,0,1,0,1"))
               (rule "limit_Tree_noDoubleRed" (formula "18") (term "0,1,1,1,0"))
               (rule "limit_Tree_noDoubleRed" (formula "19") (term "0,1,0,0"))
               (rule "commute_or" (formula "7"))
               (rule "limit_Tree_noDoubleRed" (formula "20") (term "0,1,1,1,1"))
               (rule "commute_or" (formula "7") (term "0,0"))
               (rule "limit_Tree_noDoubleRed" (formula "21") (term "0,1,0,1"))
               (rule "commute_and" (formula "22") (term "0,0,1"))
               (rule "commute_and_2" (formula "22") (term "0,0"))
               (rule "cnf_rightDist" (formula "6") (term "0,0"))
               (rule "commute_or" (formula "6") (term "0,0,0"))
               (rule "commute_and" (formula "22") (term "1,1,0"))
               (rule "equiv_right" (formula "22"))
               (branch "Case '->'"
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "replace_known_left" (formula "26") (term "1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "applyEq" (formula "7") (term "1") (ifseqformula "2"))
                  (rule "applyEq" (formula "23") (term "0") (ifseqformula "3"))
                  (rule "eqSymm" (formula "23"))
                  (rule "applyEq" (formula "12") (term "2,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "11") (term "1,0") (ifseqformula "3"))
                  (rule "apply_eq_boolean_rigid" (formula "11") (term "1") (ifseqformula "23"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "notLeft" (formula "11"))
                  (rule "orRight" (formula "22"))
                  (rule "referencedObjectIsCreatedRight" (formula "22") (ifseqformula "26"))
                  (rule "close" (formula "22") (ifseqformula "15"))
               )
               (branch "Case '<-'"
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "applyEq" (formula "5") (term "1") (ifseqformula "3"))
                  (rule "applyEq" (formula "12") (term "1") (ifseqformula "1"))
                  (rule "ifEqualsTRUE" (formula "12"))
                  (rule "applyEq" (formula "14") (term "1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEqConcrete" (formula "1"))
                  (rule "commute_and" (formula "11") (term "0"))
                  (rule "orLeft" (formula "11"))
                  (branch " (self.right@heap).isRed@anon_heap«anonHeapFunction» = TRUE ∧ ( ¬self.right.<created> = TRUE ∨ ¬(self.right, Tree::$isRed) ∊ self.footprint())"
                     (rule "andLeft" (formula "11"))
                     (rule "applyEq" (formula "10") (term "2,0") (ifseqformula "11"))
                     (rule "ifthenelse_split" (formula "9") (term "0"))
                     (branch " ( ¬self.left = null ∨ ¬(self.left, Tree::$isRed) ∊ self.footprint()) ∧ ( ¬self.left.<created> = TRUE ∨ ¬(self.left, Tree::$isRed) ∊ self.footprint()) TRUE"
                        (rule "andLeft" (formula "9"))
                        (rule "applyEqReverse" (formula "3") (term "0,0,0,1") (ifseqformula "11"))
                        (rule "hideAuxiliaryEq" (formula "11"))
                        (rule "ifthenelse_split" (formula "11") (term "0"))
                        (branch "self.right.<created> = TRUE TRUE"
                           (rule "close" (formula "25") (ifseqformula "12"))
                        )
                        (branch "self.right.<created> = TRUE FALSE"
                           (rule "referencedObjectIsCreatedRight" (formula "24") (ifseqformula "27"))
                           (rule "close" (formula "24") (ifseqformula "17"))
                        )
                     )
                     (branch " ( ¬self.left = null ∨ ¬(self.left, Tree::$isRed) ∊ self.footprint()) ∧ ( ¬self.left.<created> = TRUE ∨ ¬(self.left, Tree::$isRed) ∊ self.footprint()) FALSE"
                        (rule "applyEqReverse" (formula "3") (term "0,0,0,1") (ifseqformula "9"))
                        (rule "hideAuxiliaryEq" (formula "9"))
                        (rule "andRight" (formula "22"))
                        (branch
                           (rule "orRight" (formula "22"))
                           (rule "notRight" (formula "22"))
                           (rule "notRight" (formula "23"))
                           (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "replace_known_left" (formula "26") (term "0,0,1") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "applyEq" (formula "6") (term "1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "6") (term "1,1") (ifseqformula "2"))
                           (rule "applyEq" (formula "1") (term "0") (ifseqformula "2"))
                           (rule "applyEq" (formula "8") (term "1,1") (ifseqformula "2"))
                           (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "2"))
                           (rule "applyEq" (formula "8") (term "1,0") (ifseqformula "2"))
                           (rule "limit_Tree_noDoubleRed" (formula "6") (term "1"))
                           (rule "limit_Tree_noDoubleRed" (formula "8") (term "1"))
                           (rule "ifthenelse_split" (formula "10") (term "0"))
                           (branch "self.right.<created> = TRUE TRUE"
                              (rule "close" (formula "24") (ifseqformula "11"))
                           )
                           (branch "self.right.<created> = TRUE FALSE"
                              (rule "referencedObjectIsCreatedRight" (formula "23") (ifseqformula "26"))
                              (rule "close" (formula "23") (ifseqformula "16"))
                           )
                        )
                        (branch
                           (rule "orRight" (formula "22"))
                           (rule "notRight" (formula "22"))
                           (rule "notRight" (formula "23"))
                           (rule "ifthenelse_split" (formula "11") (term "0"))
                           (branch "self.right.<created> = TRUE TRUE"
                              (rule "close" (formula "25") (ifseqformula "12"))
                           )
                           (branch "self.right.<created> = TRUE FALSE"
                              (rule "referencedObjectIsCreatedRight" (formula "24") (ifseqformula "27"))
                              (rule "close" (formula "24") (ifseqformula "17"))
                           )
                        )
                     )
                  )
                  (branch " ¬( ¬self.right.<created> = TRUE ∨ ¬(self.right, Tree::$isRed) ∊ self.footprint()) ∧ self.right.isRed = TRUE"
                     (rule "andLeft" (formula "11"))
                     (rule "notLeft" (formula "11"))
                     (rule "orRight" (formula "22"))
                     (rule "notRight" (formula "23"))
                     (rule "notRight" (formula "23"))
                     (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "24")))
                     (rule "closeFalse" (formula "12"))
                  )
               )
            )
         )
         (branch "Assume self.isRed@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] != self.isRed"
             (builtin "One Step Simplification" (formula "12"))
            (rule "notLeft" (formula "1"))
            (rule "eqSymm" (formula "2"))
            (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_left_0"))
            (rule "applyEq" (formula "13") (term "1,0,0,0,1,1,1") (ifseqformula "1"))
            (rule "applyEq" (formula "13") (term "1,0,1,1,1,1") (ifseqformula "1"))
            (rule "applyEq" (formula "13") (term "0,0,0,1,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
            (rule "eqSymm" (formula "2"))
            (rule "applyEqReverse" (formula "13") (term "1,0,1,1,1,1") (ifseqformula "2"))
            (rule "applyEqReverse" (formula "13") (term "1,0,0,0,1,1,1") (ifseqformula "2"))
            (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "13") (term "0,0,0,1,1") (ifseqformula "2"))
            (rule "hideAuxiliaryEq" (formula "2"))
            (rule "elementOfSetMinus" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSetMinus" (formula "1") (term "0"))
            (rule "elementOfSingleton" (formula "1") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "pullOutSelect" (formula "12") (term "0,0,1,0,0,0,1") (inst "selectSK=Tree_right_0"))
            (rule "applyEq" (formula "13") (term "1,0,1,0,0,1") (ifseqformula "1"))
            (rule "applyEq" (formula "13") (term "1,0,1,0,1") (ifseqformula "1"))
            (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
            (rule "eqSymm" (formula "3"))
            (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "applyEqReverse" (formula "13") (term "1,0,1,0,1") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "13") (term "1,0,1,0,0,1") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "13") (term "0,0,1,0,0,0,1") (ifseqformula "3"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "replace_known_right" (formula "12") (term "0,1,0,0,0,1") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "elementOfSetMinus" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSetMinus" (formula "1") (term "0"))
            (rule "elementOfSingleton" (formula "1") (term "0,1,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "pullOutSelect" (formula "9") (term "0") (inst "selectSK=Tree_isRed_0"))
            (rule "applyEq" (formula "13") (term "0,0,0,0,1") (ifseqformula "1"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
            (rule "eqSymm" (formula "10"))
            (rule "elementOfSetMinus" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "elementOfSetMinus" (formula "1") (term "0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "pullOutSelect" (formula "13") (term "0,1,0,0,1") (inst "selectSK=Tree_isRed_1"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")))
            (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "pullOutSelect" (formula "14") (term "0,0,0,1,1,1") (inst "selectSK=Tree_isRed_2"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "commute_or" (formula "5"))
            (rule "commute_or" (formula "4"))
            (rule "limit_java_lang_Object__inv_" (formula "11"))
            (rule "replace_known_left" (formula "11") (term "1") (ifseqformula "12"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "Class_invariant_axiom_for_Tree" (formula "12") (inst "k=k") (inst "k_0=k_0") (ifseqformula "14"))
             (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "13"))
            (rule "andLeft" (formula "12"))
            (rule "andLeft" (formula "14"))
            (rule "andLeft" (formula "12"))
            (rule "eqSymm" (formula "12") (term "0,0"))
            (rule "disjointDefinition" (formula "20") (term "1"))
            (rule "disjointDefinition" (formula "14") (term "1,0,1"))
            (rule "disjointDefinition" (formula "16"))
            (rule "inEqSimp_ltToLeq" (formula "14") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "15"))
            (rule "polySimp_mulComm0" (formula "15") (term "1,0,0"))
            (rule "inEqSimp_ltToLeq" (formula "13"))
            (rule "add_zero_right" (formula "13") (term "0"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "14") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "14") (term "1,0,0,1"))
            (rule "mul_literals" (formula "14") (term "0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "14") (term "1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "14") (term "1,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "15"))
            (rule "polySimp_mulComm0" (formula "15") (term "1"))
            (rule "polySimp_rightDist" (formula "15") (term "1"))
            (rule "polySimp_mulLiterals" (formula "15") (term "1,1"))
            (rule "mul_literals" (formula "15") (term "0,1"))
            (rule "polySimp_elimOne" (formula "15") (term "1,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "13"))
            (rule "polySimp_mulLiterals" (formula "13") (term "0"))
            (rule "polySimp_elimOne" (formula "13") (term "0"))
            (rule "Definition_axiom_for_noDoubleRed_in_Tree" (formula "24") (term "0,1,0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "24"))
            (rule "Definition_axiom_for_footprint_in_Tree" (formula "1") (term "2,0,0,0,0") (ifseqformula "22"))
            (rule "replace_known_right" (formula "1") (term "0,1,1,2,0,0,0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "1,0,0,0,0"))
            (rule "Definition_axiom_for_footprint_in_Tree" (formula "2") (term "2,0,0,0,0") (ifseqformula "22"))
            (rule "replace_known_right" (formula "2") (term "0,1,1,2,0,0,0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "1,0,0,0,0"))
            (rule "Definition_axiom_for_footprint_in_Tree" (formula "3") (term "2,0,0") (ifseqformula "22"))
            (rule "replace_known_right" (formula "3") (term "0,1,1,2,0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "elementOfUnion" (formula "3") (term "0,0"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "21")))
            (rule "closeFalse" (formula "3"))
         )
      )
   )
   (branch "Assume self.left@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] != self.left"
      (rule "notLeft" (formula "1"))
      (rule "eqSymm" (formula "1"))
      (rule "pullOutSelect" (formula "10") (term "1,0,0,0,1,1,1") (inst "selectSK=Tree_left_0"))
      (rule "applyEq" (formula "11") (term "0,0,0,1,1") (ifseqformula "1"))
      (rule "applyEq" (formula "11") (term "1,0,1,1,1,1") (ifseqformula "1"))
      (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "5")))
      (rule "eqSymm" (formula "9"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "11") (term "1,0,1,0,0,1") (inst "selectSK=Tree_right_0"))
      (rule "applyEq" (formula "12") (term "1,0,1,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "12") (term "0,0,1,0,0,0,1") (ifseqformula "1"))
      (rule "applyEq" (formula "3") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
      (rule "eqSymm" (formula "3"))
      (rule "applyEqReverse" (formula "12") (term "1,0,1,0,0,1") (ifseqformula "3"))
      (rule "applyEqReverse" (formula "12") (term "0,0,1,0,0,0,1") (ifseqformula "3"))
      (rule "applyEqReverse" (formula "12") (term "1,0,1,0,1") (ifseqformula "3"))
      (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "hideAuxiliaryEq" (formula "3"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0"))
      (rule "elementOfSingleton" (formula "1") (term "0,1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "11") (term "0,0,0,0,0,1") (inst "selectSK=Tree_isRed_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "12") (term "0,0,0,1,1,1") (inst "selectSK=Tree_isRed_1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "13") (term "0,1,0,0,1") (inst "selectSK=Tree_isRed_2"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "commute_or" (formula "4"))
      (rule "limit_Tree_noDoubleRed" (formula "14") (term "0,1,0,0"))
      (rule "limit_java_lang_Object__inv_" (formula "12"))
      (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "limit_Tree_noDoubleRed" (formula "16") (term "0,1,1,1,0"))
      (rule "limit_Tree_footprint" (formula "17") (term "0,1,1,0,0,1,0,1"))
      (rule "limit_Tree_noDoubleRed" (formula "18") (term "0,1,1,1,1"))
      (rule "Definition_axiom_for_footprint_in_Tree" (formula "9") (term "2,0,0") (ifseqformula "18"))
      (rule "elementOfUnion" (formula "9") (term "0,0"))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "17")))
      (rule "closeFalse" (formula "9"))
   )
)
(branch "Assume self.right != self.right@heap[anon( allLocs ∖ self.footprint() ∖ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)]"
   (rule "notLeft" (formula "1"))
   (rule "eqSymm" (formula "7"))
   (rule "pullOutSelect" (formula "9") (term "0,0,0,1,1,1") (inst "selectSK=Tree_isRed_0"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "10") (term "1,0,1,0,1") (inst "selectSK=Tree_right_0"))
   (rule "applyEq" (formula "11") (term "1,0,1,0,0,1") (ifseqformula "1"))
   (rule "applyEq" (formula "11") (term "0,0,1,0,0,0,1") (ifseqformula "1"))
   (rule "applyEq" (formula "9") (term "0") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "5")))
   (rule "eqSymm" (formula "9"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "11") (term "0,0,0,1,1") (inst "selectSK=Tree_left_0"))
   (rule "applyEq" (formula "3") (term "0,0,0,1,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "3") (term "0,0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "3") (term "1,1,0") (ifseqformula "1"))
   (rule "applyEq" (formula "12") (term "1,0,1,1,1,1") (ifseqformula "1"))
   (rule "applyEq" (formula "3") (term "1,0,0,1,1,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "3") (term "1,2,0") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "6")))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "12") (term "0,0,0,0,0,1") (inst "selectSK=Tree_isRed_1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "12")) (ifInst ""  (formula "7")))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "13") (term "0,1,0,0,1") (inst "selectSK=Tree_isRed_2"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "limit_Tree_noDoubleRed" (formula "14") (term "0,1,1,1,0"))
   (rule "limit_Tree_footprint" (formula "15") (term "0,1,1,0,0,1,1,1,1"))
   (rule "limit_java_lang_Object__inv_" (formula "13"))
   (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "13"))
   (rule "limit_Tree_noDoubleRed" (formula "17") (term "0,1,0,0"))
   (rule "Definition_axiom_for_footprint_in_Tree" (formula "8") (term "2,0,0,0,0") (ifseqformula "17"))
   (rule "elementOfUnion" (formula "8") (term "0,0,0,0"))
    (builtin "One Step Simplification" (formula "8"))
   (rule "eqSymm" (formula "8") (term "0,0,0,0,0"))
   (rule "elementOfUnion" (formula "8") (term "1,0,0,0,0"))
   (rule "Definition_axiom_for_footprint_in_Tree" (formula "7") (term "2,0,0") (ifseqformula "17"))
   (rule "elementOfUnion" (formula "7") (term "0,0"))
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "16")))
   (rule "closeFalse" (formula "7"))
)
)
}
