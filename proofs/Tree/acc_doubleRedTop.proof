\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Sat Sep 09 01:07:04 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\include "../../iSet.key";

\proofObligation "#Proof Obligation Settings
#Sat Sep 09 01:07:04 CEST 2023
contract=Tree[Tree\\:\\:doubleRedTop()].JML accessible clause.0
name=Tree[Tree\\:\\:doubleRedTop()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "johanna" ) (keyVersion "4d5d8c5cb0b36bcbdc74ead5888a2f6bbedfe5ef"))

(autoModeTime "32529")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
 (builtin "One Step Simplification" (formula "8") (userinteraction))
(rule "Definition_axiom_for_doubleRedTop_in_Tree" (formula "8") (term "0") (ifseqformula "7") (userinteraction))
(rule "Definition_axiom_for_doubleRedTop_in_Tree" (formula "8") (term "1") (ifseqformula "7") (userinteraction))
 (builtin "One Step Simplification" (formula "8"))
(rule "commute_or" (formula "8") (term "1"))
(rule "commute_or" (formula "8") (term "0"))
(rule "limit_java_lang_Object__inv_" (formula "6"))
(rule "replace_known_left" (formula "6") (term "1") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "6"))
(rule "limit_Tree_footprint" (formula "9") (term "0,1,1,0,0,1,1"))
(rule "equiv_right" (formula "10"))
(branch "Case '->'"
   (rule "orRight" (formula "11"))
   (rule "cut_direct" (formula "1") (term "1"))
   (branch "CUT: self.doubleRedRight() = TRUE TRUE"
       (builtin "One Step Simplification" (formula "2"))
      (rule "true_left" (formula "2"))
       (builtin "Use Dependency Contract" (formula "12") (term "0") (ifInst ""  (formula "1") (term "0")) (contract "Tree[Tree::doubleRedRight()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "10") (term "1,1,0,0,0"))
      (rule "replace_known_left" (formula "10") (term "1,0,0,0,0") (ifseqformula "5"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "11")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "9")))
      (rule "disjointDefinition" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "applyEq" (formula "10") (term "1") (ifseqformula "1"))
      (rule "close" (formula "13") (ifseqformula "10"))
   )
   (branch "CUT: self.doubleRedRight() = TRUE FALSE"
       (builtin "One Step Simplification" (formula "1"))
       (builtin "Use Dependency Contract" (formula "13") (term "0") (ifInst ""  (formula "10") (term "0")) (contract "Tree[Tree::doubleRedRight()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "10") (term "1,1,0,0,0"))
      (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")))
      (rule "disjointDefinition" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "apply_eq_boolean" (formula "10") (term "0") (ifseqformula "14"))
      (rule "eqSymm" (formula "10"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "11")))
      (rule "true_left" (formula "10"))
       (builtin "Use Dependency Contract" (formula "12") (term "0") (ifInst ""  (formula "1") (term "0")) (contract "Tree[Tree::doubleRedLeft()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "10") (term "1,1,0,0,0"))
      (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")))
      (rule "disjointDefinition" (formula "10") (term "0"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "applyEq" (formula "13") (term "0") (ifseqformula "10"))
      (rule "close" (formula "13") (ifseqformula "1"))
   )
)
(branch "Case '<-'"
   (rule "orRight" (formula "11"))
    (builtin "Use Dependency Contract" (formula "1") (term "0,1") (ifInst ""  (formula "12") (term "0")) (contract "Tree[Tree::doubleRedRight()].JML accessible clause.0"))
   (rule "wellFormedAnon" (formula "10") (term "1,1,0,0,0"))
   (rule "replace_known_left" (formula "10") (term "1,0,0") (ifseqformula "9"))
    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "11")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")))
   (rule "disjointDefinition" (formula "10") (term "0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "applyEq" (formula "1") (term "0,1") (ifseqformula "10"))
   (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "apply_eq_boolean" (formula "10") (term "1") (ifseqformula "13"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "notLeft" (formula "10"))
    (builtin "Use Dependency Contract" (formula "1") (term "0") (ifInst ""  (formula "12") (term "0")) (contract "Tree[Tree::doubleRedLeft()].JML accessible clause.0"))
   (rule "wellFormedAnon" (formula "10") (term "1,1,0,0,0"))
   (rule "replace_known_left" (formula "10") (term "0,1,0,0,0") (ifseqformula "3"))
    (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "12")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "9")))
   (rule "disjointDefinition" (formula "10") (term "0"))
    (builtin "One Step Simplification" (formula "10"))
   (rule "applyEq" (formula "1") (term "0") (ifseqformula "10"))
   (rule "close" (formula "13") (ifseqformula "1"))
)
)
}
