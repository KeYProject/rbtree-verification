\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 08 01:12:46 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=100000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\include "../../iSet.key";

\proofObligation "#Proof Obligation Settings
#Fri Sep 08 01:12:46 CEST 2023
contract=Tree[Tree\\:\\:footprint()].JML accessible clause.0
name=Tree[Tree\\:\\:footprint()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "johanna" ) (keyVersion "167932a84464f61ce5aea5172abb98fb7bad2121"))
(keyLog "1" (keyUser "johanna" ) (keyVersion "167932a84464f61ce5aea5172abb98fb7bad2121"))
(keyLog "2" (keyUser "johanna" ) (keyVersion "167932a84464f61ce5aea5172abb98fb7bad2121"))
(keyLog "3" (keyUser "johanna" ) (keyVersion "4d5d8c5cb0b36bcbdc74ead5888a2f6bbedfe5ef"))

(autoModeTime "2129297")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "self,anon_heap"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "Definition_axiom_for_footprint_in_Tree" (formula "8") (term "0,1,1,0,1") (ifseqformula "7") (userinteraction))
(rule "Definition_axiom_for_footprint_in_Tree" (formula "8") (term "1") (ifseqformula "7") (userinteraction))
(rule "Definition_axiom_for_footprint_in_Tree" (formula "8") (term "0") (ifseqformula "7") (userinteraction))
(rule "eqTermCut" (formula "8") (term "0,1,1") (inst "s=\\if (Tree::select(heap, self, Tree::$left) = null)
    \\then (empty)
    \\else (Tree::footprint$lmtd(heap,
                                Tree::select(heap,
                                             self,
                                             Tree::$left)))") (userinteraction))
(branch "Assume if ( self.left@heap[anon( allLocs ∖ self.* ∪ if ( self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if ( self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = null) then (∅) else (self.left.footprint$lmtd @heap[anon( allLocs ∖ self.* ∪ if (self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if (self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)]) = if (self.left = null) then (∅) else (self.left.footprint$lmtd)"
   (rule "eqTermCut" (formula "9") (term "1,1,1") (inst "s=\\if (Tree::select(heap, self, Tree::$right) = null)
    \\then (empty)
    \\else (Tree::footprint$lmtd(heap,
                                Tree::select(heap,
                                             self,
                                             Tree::$right)))") (userinteraction))
   (branch "Assume if ( self.right@heap[anon( allLocs ∖ self.* ∪ if ( self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if ( self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = null) then (∅) else (self.right.footprint$lmtd @heap[anon( allLocs ∖ self.* ∪ if (self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if (self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)]) = if (self.right = null) then (∅) else (self.right.footprint$lmtd)"
      (rule "eqSymm" (formula "10"))
      (rule "setMinusOfUnion" (formula "1") (term "1,1,0,1,2,0"))
      (rule "setMinusOfUnion" (formula "2") (term "1,1,0,1,2,0"))
      (rule "setMinusOfUnion" (formula "1") (term "1,1,0,0,0,0"))
      (rule "setMinusOfUnion" (formula "2") (term "1,1,0,2,0"))
      (rule "setMinusOfUnion" (formula "1") (term "1,1,0,2,0"))
      (rule "setMinusOfUnion" (formula "2") (term "1,1,0,0,0,0"))
      (rule "setMinusOfUnion" (formula "10") (term "1,1,0,0,0,1,1,0"))
      (rule "setMinusOfUnion" (formula "10") (term "1,1,0,2,0,1,0"))
      (rule "setMinusOfUnion" (formula "10") (term "1,1,0,0,0,0,1,0"))
      (rule "setMinusOfUnion" (formula "10") (term "1,1,0,1,2,0,1,0"))
      (rule "setMinusOfUnion" (formula "10") (term "1,1,0,2,1,1,0"))
      (rule "setMinusOfUnion" (formula "10") (term "1,1,0,1,2,1,1,0"))
      (rule "setMinusOfUnion" (formula "1") (term "1,1,1,0,1,2,0"))
      (rule "setMinusOfUnion" (formula "2") (term "1,1,1,0,1,2,0"))
      (rule "setMinusOfUnion" (formula "1") (term "1,1,1,0,0,0,0"))
      (rule "setMinusOfUnion" (formula "2") (term "1,1,1,0,2,0"))
      (rule "setMinusOfUnion" (formula "1") (term "1,1,1,0,2,0"))
      (rule "setMinusOfUnion" (formula "2") (term "1,1,1,0,0,0,0"))
      (rule "setMinusOfUnion" (formula "10") (term "1,1,1,0,0,0,1,1,0"))
      (rule "setMinusOfUnion" (formula "10") (term "1,1,1,0,2,0,1,0"))
      (rule "setMinusOfUnion" (formula "10") (term "1,1,1,0,0,0,0,1,0"))
      (rule "setMinusOfUnion" (formula "10") (term "1,1,1,0,1,2,0,1,0"))
      (rule "setMinusOfUnion" (formula "10") (term "1,1,1,0,2,1,1,0"))
      (rule "setMinusOfUnion" (formula "10") (term "1,1,1,0,1,2,1,1,0"))
      (rule "pullOutSelect" (formula "1") (term "1,2,0") (inst "selectSK=Tree_right_0"))
      (rule "applyEq" (formula "11") (term "0,0,1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "2") (term "0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "11") (term "1,2,1,1,0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "6")))
      (rule "applyEq" (formula "11") (term "1,1,0") (ifseqformula "2"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfUnion" (formula "1") (term "1,0,0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
      (rule "elementOfSetMinus" (formula "1") (term "1,1,0,0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,1,0,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,1,1,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,1,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "3") (term "0,0,0") (inst "selectSK=Tree_left_0"))
      (rule "applyEq" (formula "4") (term "1,2,0") (ifseqformula "3"))
      (rule "applyEq" (formula "12") (term "1,2,0,1,0") (ifseqformula "3"))
      (rule "applyEq" (formula "12") (term "0,0,0,1,0") (ifseqformula "3"))
      (rule "simplifySelectOfAnon" (formula "3"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "11")) (ifInst ""  (formula "7")))
      (rule "applyEq" (formula "12") (term "0,1,0") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "closeTrue" (formula "12"))
   )
   (branch "Assume if ( self.right@heap[anon( allLocs ∖ self.* ∪ if ( self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if ( self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = null) then (∅) else (self.right.footprint$lmtd @heap[anon( allLocs ∖ self.* ∪ if (self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if (self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)]) != if (self.right = null) then (∅) else (self.right.footprint$lmtd)"
      (rule "hide_right" (formula "10") (userinteraction))
      (rule "notLeft" (formula "1") (userinteraction))
      (rule "hide_left" (formula "1") (userinteraction))
      (rule "Class_invariant_axiom_for_Tree" (formula "6") (inst "k=k") (inst "k_0=k_0") (ifseqformula "8") (userinteraction))
      (rule "unlimit_java_lang_Object__inv_" (formula "6") (term "1,1,1,0,0,0") (userinteraction))
      (rule "eqTermCut" (formula "7") (term "0,0,0") (inst "s=Tree::select(heap, self, Tree::$right)") (userinteraction))
      (branch "Assume self.right@heap[anon( allLocs ∖ self.* ∪ if (self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if (self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = self.right"
         (rule "applyEq" (formula "8") (term "0,0,0") (ifseqformula "1") (userinteraction))
         (rule "cut_direct" (formula "8") (term "0,0") (userinteraction))
         (branch "CUT: self.right = null TRUE"
             (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
            (rule "closeTrue" (formula "9"))
         )
         (branch "CUT: self.right = null FALSE"
            (rule "applyEq" (formula "9") (term "1,2,0") (ifseqformula "1") (userinteraction))
             (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")) (ifInst ""  (formula "8")) (ifInst ""  (formula "8")))
             (builtin "Use Dependency Contract" (formula "9") (term "0") (ifInst ""  (formula "9") (term "1")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
            (rule "impLeft" (formula "8"))
            (branch "Case 1"
               (rule "andRight" (formula "8"))
               (branch "Case 1"
                  (rule "andRight" (formula "8"))
                  (branch "Case 1"
                     (rule "andRight" (formula "8"))
                     (branch "Case 1"
                        (rule "andRight" (formula "8"))
                        (branch "Case 1"
                           (rule "andRight" (formula "8"))
                           (branch "Case 1"
                              (rule "notRight" (formula "8"))
                              (rule "close" (formula "9") (ifseqformula "1"))
                           )
                           (branch "Case 2"
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")) (ifInst ""  (formula "9")))
                              (rule "referencedObjectIsCreatedRight" (formula "8") (ifseqformula "9"))
                              (rule "close" (formula "8") (ifseqformula "2"))
                           )
                        )
                        (branch "Case 2"
                           (rule "andRight" (formula "8"))
                           (branch "Case 1"
                              (rule "close" (formula "8") (ifseqformula "2"))
                           )
                           (branch "Case 2"
                              (rule "wellFormedAnon" (formula "8"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")) (ifInst ""  (formula "9")))
                              (rule "andLeft" (formula "7"))
                              (rule "andLeft" (formula "7"))
                              (rule "andLeft" (formula "7"))
                              (rule "andLeft" (formula "7"))
                              (rule "andLeft" (formula "8"))
                              (rule "andLeft" (formula "7"))
                              (rule "andLeft" (formula "9"))
                              (rule "andLeft" (formula "7"))
                              (rule "eqSymm" (formula "7") (term "0,0"))
                              (rule "replace_known_right" (formula "1") (term "0,1,1,0,1,1,0,0") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "2")))
                              (rule "closeTrue" (formula "16"))
                           )
                        )
                     )
                     (branch "Case 2"
                         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")))
                        (rule "closeFalse" (formula "7"))
                     )
                  )
                  (branch "Case 2"
                     (rule "hide_right" (formula "10") (userinteraction))
                     (rule "hide_left" (formula "1") (userinteraction))
                     (rule "cut_direct" (formula "7") (term "0,0,1,0,1,0") (userinteraction))
                     (branch "CUT: self.left = null TRUE"
                         (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "1")))
                         (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "1")) (ifInst ""  (formula "9")) (ifInst ""  (formula "1")) (ifInst ""  (formula "9")) (ifInst ""  (formula "1")) (ifInst ""  (formula "9")))
                        (rule "andLeft" (formula "7"))
                        (rule "andLeft" (formula "7"))
                        (rule "andLeft" (formula "7"))
                        (rule "andLeft" (formula "8"))
                        (rule "andLeft" (formula "8"))
                        (rule "disjointDefinition" (formula "13"))
                        (rule "disjointDefinition" (formula "9"))
                        (rule "inEqSimp_ltToLeq" (formula "7"))
                        (rule "add_zero_right" (formula "7") (term "0"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                        (rule "polySimp_elimOne" (formula "7") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                        (rule "polySimp_mulComm0" (formula "8") (term "1"))
                        (rule "polySimp_rightDist" (formula "8") (term "1"))
                        (rule "mul_literals" (formula "8") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                        (rule "setMinusOfUnion" (formula "13") (term "1,0,0"))
                        (rule "commuteUnion" (formula "13") (term "1,1,0"))
                        (rule "commuteUnion" (formula "13") (term "1,1,1,0,0"))
                        (rule "commuteUnion_2" (formula "13") (term "1,0,1,0,0"))
                        (rule "commuteUnion" (formula "13") (term "0,1,0,1,0,0"))
                        (rule "limit_java_lang_Object__inv_" (formula "10"))
                        (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "limit_Tree_footprint" (formula "14") (term "0,1,0"))
                        (rule "applyEq" (formula "15") (term "0,1,1,0,0") (ifseqformula "1"))
                        (rule "equalityToElementOfRight" (formula "15") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "allRight" (formula "15") (inst "sk=ov_0"))
                        (rule "allRight" (formula "15") (inst "sk=fv_0"))
                        (rule "notRight" (formula "15"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "notLeft" (formula "3"))
                        (rule "elementOfSetMinus" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elementOfUnion" (formula "17"))
                        (rule "orRight" (formula "17"))
                        (rule "elementOfSingleton" (formula "17"))
                        (rule "elementOfUnion" (formula "16"))
                        (rule "orRight" (formula "16"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "elementOfUnion" (formula "20"))
                        (rule "orRight" (formula "20"))
                        (rule "elementOfSetMinus" (formula "17"))
                         (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "16")))
                        (rule "false_right" (formula "17"))
                        (rule "elementOfSetMinus" (formula "17"))
                        (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "notRight" (formula "17"))
                        (rule "elementOfUnion" (formula "19"))
                        (rule "orRight" (formula "19"))
                        (rule "elementOfSingleton" (formula "19"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "17"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "close" (formula "19") (ifseqformula "1"))
                     )
                     (branch "CUT: self.left = null FALSE"
                         (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "7")))
                        (rule "Definition_axiom_for_footprint_in_Tree" (formula "6") (term "0,1,1") (ifseqformula "7") (userinteraction))
                         (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "7")) (ifInst ""  (formula "9")) (ifInst ""  (formula "7")) (ifInst ""  (formula "9")) (ifInst ""  (formula "7")) (ifInst ""  (formula "9")))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "7"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "8"))
                        (rule "andLeft" (formula "7"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "8"))
                        (rule "notLeft" (formula "6"))
                        (rule "eqSymm" (formula "16"))
                        (rule "disjointDefinition" (formula "18"))
                        (rule "disjointDefinition" (formula "15"))
                        (rule "disjointDefinition" (formula "11"))
                        (rule "disjointDefinition" (formula "8"))
                        (rule "inEqSimp_ltToLeq" (formula "10"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6"))
                        (rule "add_zero_right" (formula "6") (term "0"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "10"))
                        (rule "polySimp_mulComm0" (formula "10") (term "1"))
                        (rule "polySimp_rightDist" (formula "10") (term "1"))
                        (rule "mul_literals" (formula "10") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "10") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "6"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "0"))
                        (rule "polySimp_elimOne" (formula "6") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                        (rule "polySimp_mulComm0" (formula "7") (term "1"))
                        (rule "polySimp_rightDist" (formula "7") (term "1"))
                        (rule "mul_literals" (formula "7") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                        (rule "setMinusOfUnion" (formula "18") (term "1,0,0"))
                        (rule "distributeIntersection_2" (formula "15") (term "0"))
                        (rule "setMinusOfUnion" (formula "18") (term "1,1,0,0"))
                        (rule "unionEqualsEmpty" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "distributeIntersection_2" (formula "16") (term "0"))
                        (rule "unionEqualsEmpty" (formula "16"))
                        (rule "andLeft" (formula "16"))
                        (rule "commuteUnion_2" (formula "20") (term "1,1,0"))
                        (rule "commuteUnion" (formula "20") (term "1,0,1,0,0"))
                        (rule "commuteUnion_2" (formula "20") (term "1,1,1,1,0,0"))
                        (rule "commuteUnion_2" (formula "20") (term "1,0,1,1,0,0"))
                        (rule "commuteIntersection" (formula "17") (term "0"))
                        (rule "commuteIntersection" (formula "16") (term "0"))
                        (rule "commuteUnion" (formula "20") (term "0,1,1,0"))
                        (rule "commuteUnion_2" (formula "20") (term "0,1,1,1,1,0,0"))
                        (rule "commuteUnion_2" (formula "20") (term "0,1,0,1,1,0,0"))
                        (rule "commuteUnion" (formula "20") (term "0,0,1,1,1,1,0,0"))
                        (rule "commuteUnion" (formula "20") (term "0,0,1,0,1,1,0,0"))
                        (rule "limit_java_lang_Object__inv_" (formula "12"))
                        (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "limit_Tree_footprint" (formula "21") (term "0,1,0"))
                        (rule "applyEq" (formula "22") (term "0,1,1,1,0,0") (ifseqformula "1"))
                        (rule "commuteUnion" (formula "22") (term "1,1,0,0"))
                        (rule "limit_Tree_footprint" (formula "9") (term "1,0"))
                        (rule "applyEq" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "9"))
                        (rule "commuteUnion" (formula "23") (term "1,1,0,0"))
                        (rule "equalityToElementOfRight" (formula "23") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "allRight" (formula "23") (inst "sk=ov_0"))
                        (rule "allRight" (formula "23") (inst "sk=fv_0"))
                        (rule "notRight" (formula "23"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "notLeft" (formula "3"))
                        (rule "elementOfSetMinus" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elementOfUnion" (formula "23"))
                        (rule "orRight" (formula "23"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "21"))
                        (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "20"))
                        (rule "elementOfUnion" (formula "26"))
                        (rule "orRight" (formula "26"))
                        (rule "elementOfUnion" (formula "28"))
                        (rule "orRight" (formula "28"))
                        (rule "elementOfSingleton" (formula "28"))
                        (rule "elementOfUnion" (formula "27"))
                        (rule "orRight" (formula "27"))
                        (rule "elementOfSetMinus" (formula "26"))
                         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "24")))
                        (rule "false_right" (formula "26"))
                        (rule "elementOfUnion" (formula "29"))
                        (rule "orRight" (formula "29"))
                        (rule "elementOfSingleton" (formula "29"))
                        (rule "elementOfSetMinus" (formula "27"))
                        (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "notRight" (formula "27"))
                        (rule "elementOfSetMinus" (formula "27"))
                        (rule "replace_known_left" (formula "27") (term "0,1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "false_right" (formula "27"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "close" (formula "26") (ifseqformula "1"))
                     )
                  )
               )
               (branch "Case 2"
                   (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")) (ifInst ""  (formula "9")))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "9"))
                  (rule "andLeft" (formula "7"))
                  (rule "eqSymm" (formula "7") (term "0,0"))
                  (rule "replace_known_right" (formula "1") (term "0,1,1,0,1,1,0,0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "disjointDefinition" (formula "15") (term "1"))
                  (rule "disjointDefinition" (formula "9") (term "1,0,1"))
                  (rule "disjointDefinition" (formula "11"))
                  (rule "measuredByCheck" (formula "16") (ifseqformula "6"))
                  (rule "precOfInt" (formula "16"))
                  (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "10"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "8"))
                  (rule "add_zero_right" (formula "8") (term "0"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                  (rule "inEqSimp_leqRight" (formula "16"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1"))
                  (rule "mul_literals" (formula "11") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "9"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "0"))
                  (rule "polySimp_elimOne" (formula "9") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "setMinusOfUnion" (formula "18") (term "1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "2") (term "1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "18") (term "1,1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "2") (term "1,1,1,0,0"))
                  (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_right_0"))
                  (rule "simplifySelectOfAnon" (formula "2"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "20")) (ifInst ""  (formula "6")))
                  (rule "eqSymm" (formula "3"))
                  (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "1,0"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "replace_known_right" (formula "2") (term "0,1,0,1,2,1,1,0") (ifseqformula "17"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "17")) (ifInst ""  (formula "17")))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,1,0"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSetMinus" (formula "2") (term "1,1,0"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commuteUnion" (formula "18") (term "1,1,1,0,0"))
                  (rule "commuteUnion_2" (formula "18") (term "1,0,1,1,0,0"))
                  (rule "commuteUnion" (formula "18") (term "1,1,1,1,1,0,0"))
                  (rule "commuteUnion" (formula "18") (term "1,0,1,1,1,0,0"))
                  (rule "commuteUnion" (formula "18") (term "0,1,0,1,1,0,0"))
                  (rule "commuteUnion_2" (formula "18") (term "1,1,1,1,1,1,0,0"))
                  (rule "commuteUnion_2" (formula "18") (term "1,1,0,1,1,1,0,0"))
                  (rule "commute_or" (formula "8"))
                  (rule "limit_Tree_footprint" (formula "12") (term "1,0"))
                  (rule "applyEq" (formula "19") (term "1") (ifseqformula "12"))
                  (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,0") (ifseqformula "12"))
                  (rule "applyEq" (formula "2") (term "2,0,1,1,0") (ifseqformula "12"))
                  (rule "disjointAllFields" (formula "2") (term "0,1,1,0") (ifseqformula "13"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commute_or_2" (formula "2"))
                  (rule "cnf_rightDist" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "commute_or" (formula "11"))
                  (rule "limit_java_lang_Object__inv_" (formula "15"))
                  (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "16"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "limit_Tree_footprint" (formula "19") (term "0,0,1"))
                  (rule "applyEq" (formula "22") (term "2,0,1,1,1,1,0,0") (ifseqformula "19"))
                  (rule "applyEq" (formula "2") (term "2,2,0,1") (ifseqformula "19"))
                  (rule "commute_or" (formula "2") (term "0"))
                  (rule "cnf_rightDist" (formula "10"))
                  (rule "andLeft" (formula "10"))
                  (rule "commute_or" (formula "11"))
                  (rule "cnf_rightDist" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "shift_paren_or" (formula "3"))
                  (rule "commute_or" (formula "3") (term "0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "equalityToElementOfRight" (formula "23") (inst "fv=fv") (inst "ov=ov"))
                  (rule "allRight" (formula "23") (inst "sk=ov_0"))
                  (rule "allRight" (formula "23") (inst "sk=fv_0"))
                  (rule "equiv_right" (formula "23"))
                  (branch "Case '->'"
                     (rule "ifthenelse_split" (formula "3") (term "2,0,1"))
                     (branch "self.left = null TRUE"
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "replace_known_left" (formula "1") (term "0,1,1,1,1,1,1,1,0,2") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                        (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "3"))
                        (rule "limit_Tree_footprint" (formula "17") (term "1"))
                        (rule "associativeLawUnion" (formula "1") (term "1,1,1,1,0,2"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "1"))
                        (rule "pullOutSelect" (formula "1") (term "0,1") (inst "selectSK=java_lang_Object_created__0"))
                        (rule "simplifySelectOfAnon" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "commute_or" (formula "2"))
                        (rule "ifthenelse_split" (formula "1") (term "0"))
                        (branch "¬ov_0 = null ∧ ¬ov_0.<created> = TRUE TRUE"
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "2"))
                           (rule "notLeft" (formula "1"))
                           (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "1,0") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "0") (ifseqformula "6"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                            (builtin "Use Dependency Contract" (formula "2") (term "2") (ifInst ""  (formula "13") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                           (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                           (rule "replace_known_left" (formula "20") (term "1,0,0,0,0,0") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")) (ifInst ""  (formula "6")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "16")))
                           (rule "disjointDefinition" (formula "20") (term "0,0"))
                           (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "10"))
                           (rule "precOfInt" (formula "20") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                           (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "13"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                           (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "12"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "20") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "limit_Tree_footprint" (formula "14") (term "1,0"))
                           (rule "limit_java_lang_Object__inv_" (formula "16"))
                           (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "15")))
                           (rule "true_left" (formula "16"))
                           (rule "limit_Tree_footprint" (formula "19") (term "1"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                           (rule "replaceKnownSelect_taclet00101010_4" (formula "2") (term "0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet000101010_5" (formula "2") (term "0,1"))
                           (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")))
                           (rule "true_left" (formula "2"))
                           (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "16") (inst "k=k") (inst "k_0=k_0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "eqSymm" (formula "16") (term "0,0,0"))
                           (rule "disjointDefinition" (formula "22") (term "1"))
                           (rule "disjointDefinition" (formula "19") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "18") (term "1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "17"))
                           (rule "add_zero_right" (formula "17") (term "0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                           (rule "polySimp_elimOne" (formula "17") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "17") (term "0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "closeFalse" (formula "17"))
                        )
                        (branch "¬ov_0 = null ∧ ¬ov_0.<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "2") (term "0,0") (ifseqformula "1"))
                           (rule "hideAuxiliaryEq" (formula "1"))
                           (rule "commute_or" (formula "1"))
                           (rule "cut_direct" (formula "19") (term "0,0"))
                           (branch "CUT: ov_0 = null TRUE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "false_right" (formula "20"))
                              (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                              (rule "applyEq" (formula "20") (term "0") (ifseqformula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "1,0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "0") (ifseqformula "6"))
                              (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                              (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                               (builtin "Use Dependency Contract" (formula "2") (term "2") (ifInst ""  (formula "13") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                              (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                              (rule "replace_known_left" (formula "20") (term "1,1,1,0,0,0,0") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "21")) (ifInst ""  (formula "3")) (ifInst ""  (formula "6")) (ifInst ""  (formula "6")) (ifInst ""  (formula "16")))
                              (rule "disjointDefinition" (formula "20") (term "0,0"))
                              (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "10"))
                              (rule "precOfInt" (formula "20") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                              (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "13"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                              (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "20") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "limit_Tree_footprint" (formula "19") (term "1"))
                              (rule "limit_Tree_footprint" (formula "2") (term "0,1,1,1,0,2"))
                              (rule "limit_java_lang_Object__inv_" (formula "16"))
                              (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "15"))
                               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "17")))
                              (rule "true_left" (formula "16"))
                              (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "true_left" (formula "2"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "16") (inst "k=k") (inst "k_0=k_0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "eqSymm" (formula "16") (term "0,0,0"))
                              (rule "disjointDefinition" (formula "22") (term "1"))
                              (rule "disjointDefinition" (formula "19") (term "1,0,1"))
                              (rule "disjointDefinition" (formula "18") (term "1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "17"))
                              (rule "add_zero_right" (formula "17") (term "0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "17"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                              (rule "polySimp_elimOne" (formula "17") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "17"))
                              (rule "qeq_literals" (formula "4") (term "0"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "closeFalse" (formula "4"))
                           )
                           (branch "CUT: ov_0 = null FALSE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "notRight" (formula "20"))
                              (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                              (rule "true_left" (formula "2"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "1,0") (ifseqformula "5"))
                              (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "0") (ifseqformula "6"))
                              (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "true_left" (formula "5"))
                               (builtin "Use Dependency Contract" (formula "2") (term "2") (ifInst ""  (formula "13") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                              (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                              (rule "replace_known_left" (formula "20") (term "1,0,0,0,0,0") (ifseqformula "3"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")) (ifInst ""  (formula "6")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "16")))
                              (rule "disjointDefinition" (formula "20") (term "0,0"))
                              (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "10"))
                              (rule "precOfInt" (formula "20") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                              (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "13"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                              (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                              (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "20") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "limit_Tree_footprint" (formula "13") (term "1"))
                              (rule "limit_java_lang_Object__inv_" (formula "16"))
                              (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "15"))
                               (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "17")))
                              (rule "true_left" (formula "16"))
                              (rule "limit_Tree_footprint" (formula "19") (term "1"))
                              (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                              (rule "replaceKnownSelect_taclet00101010_4" (formula "2") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet100101010_5" (formula "2") (term "0,1"))
                              (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")))
                              (rule "true_left" (formula "2"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "16") (inst "k=k") (inst "k_0=k_0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "andLeft" (formula "16"))
                              (rule "eqSymm" (formula "16") (term "0,0,0"))
                              (rule "disjointDefinition" (formula "22") (term "1"))
                              (rule "disjointDefinition" (formula "19") (term "1,0,1"))
                              (rule "disjointDefinition" (formula "18") (term "1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "17"))
                              (rule "add_zero_right" (formula "17") (term "0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "17"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                              (rule "polySimp_elimOne" (formula "17") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "4"))
                              (rule "qeq_literals" (formula "17") (term "0"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "closeFalse" (formula "17"))
                           )
                        )
                     )
                     (branch "self.left = null FALSE"
                        (rule "replace_known_right" (formula "1") (term "0,1,1,0,1,0,1,1,0,2") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "23")) (ifInst ""  (formula "23")))
                        (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "notLeft" (formula "9"))
                        (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "elementOfSingleton" (formula "3") (term "0,1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "commuteUnion_2" (formula "1") (term "1,1,0,1,1,1,0,2"))
                        (rule "commuteUnion_2" (formula "1") (term "1,1,1,1,1,1,0,2"))
                        (rule "commuteUnion" (formula "1") (term "1,1,1,0,2"))
                        (rule "associativeLawUnion" (formula "1") (term "1,1,0,2"))
                        (rule "associativeLawUnion" (formula "1") (term "1,1,1,1,0,2"))
                        (rule "associativeLawUnion" (formula "1") (term "1,1,0,1,1,0,2"))
                        (rule "associativeLawUnion" (formula "1") (term "0,1,1,1,1,0,2"))
                        (rule "associativeLawUnion" (formula "1") (term "0,1,0,0,1,1,0,2"))
                        (rule "associativeLawUnion" (formula "1") (term "0,1,1,0,1,1,0,2"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0") (ifseqformula "3"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "1") (ifseqformula "4"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "3"))
                        (rule "pullOutSelect" (formula "3") (term "0,1") (inst "selectSK=java_lang_Object_created__0"))
                        (rule "simplifySelectOfAnon" (formula "3"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "commute_or" (formula "4"))
                        (rule "ifthenelse_split" (formula "3") (term "0"))
                        (branch "¬ov_0 = null ∧ ¬ov_0.<created> = TRUE TRUE"
                           (rule "andLeft" (formula "3"))
                           (rule "notLeft" (formula "4"))
                           (rule "notLeft" (formula "3"))
                           (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "3"))
                            (builtin "Use Dependency Contract" (formula "4") (term "2") (ifInst ""  (formula "16") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                           (rule "wellFormedAnon" (formula "24") (term "1,1,0,0,0,0"))
                           (rule "replace_known_left" (formula "24") (term "1,0,0,0,0,0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "29")) (ifInst ""  (formula "6")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "19")))
                           (rule "disjointDefinition" (formula "24") (term "0,0"))
                           (rule "measuredByCheck" (formula "24") (term "1,0") (ifseqformula "10"))
                           (rule "precOfInt" (formula "24") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0"))
                           (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "16"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,0"))
                           (rule "replace_known_left" (formula "24") (term "1,1,0") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "24") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "limit_Tree_footprint" (formula "22") (term "1"))
                           (rule "limit_Tree_footprint" (formula "4") (term "0,1,1,1,0,2"))
                           (rule "limit_java_lang_Object__inv_" (formula "19"))
                           (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
                           (rule "true_left" (formula "19"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "4"))
                           (rule "replaceKnownSelect_taclet10101010_4" (formula "4") (term "0,1"))
                           (rule "replaceKnownAuxiliaryConstant_taclet010101010_5" (formula "4") (term "0,1"))
                           (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "3"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "25")))
                           (rule "true_left" (formula "4"))
                           (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "19") (inst "k=k") (inst "k_0=k_0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "andLeft" (formula "19"))
                           (rule "eqSymm" (formula "19") (term "0,0,0"))
                           (rule "disjointDefinition" (formula "25") (term "1"))
                           (rule "disjointDefinition" (formula "22") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "21") (term "1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20"))
                           (rule "add_zero_right" (formula "20") (term "0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                           (rule "polySimp_elimOne" (formula "20") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "20") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "20") (term "0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "closeFalse" (formula "20"))
                        )
                        (branch "¬ov_0 = null ∧ ¬ov_0.<created> = TRUE FALSE"
                           (rule "applyEqReverse" (formula "4") (term "0,0") (ifseqformula "3"))
                           (rule "hideAuxiliaryEq" (formula "3"))
                           (rule "commute_or" (formula "3"))
                           (rule "cut_direct" (formula "24") (term "0,0"))
                           (branch "CUT: ov_0 = null TRUE"
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "false_right" (formula "25"))
                              (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "applyEq" (formula "27") (term "0") (ifseqformula "1"))
                              (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "1"))
                              (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "4"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                               (builtin "Use Dependency Contract" (formula "4") (term "2") (ifInst ""  (formula "16") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                              (rule "wellFormedAnon" (formula "24") (term "1,1,0,0,0,0"))
                              (rule "replace_known_left" (formula "24") (term "1,0,0,0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "27")) (ifInst ""  (formula "3")) (ifInst ""  (formula "6")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")))
                              (rule "disjointDefinition" (formula "24") (term "0,0"))
                              (rule "measuredByCheck" (formula "24") (term "1,0") (ifseqformula "10"))
                              (rule "precOfInt" (formula "24") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0"))
                              (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "16"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,1,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,0"))
                              (rule "replace_known_left" (formula "24") (term "1,1,0") (ifseqformula "15"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0") (ifseqformula "5"))
                              (rule "qeq_literals" (formula "24") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "limit_Tree_footprint" (formula "17") (term "1,0"))
                              (rule "limit_Tree_footprint" (formula "4") (term "0,1,0,1,1,0,2"))
                              (rule "limit_java_lang_Object__inv_" (formula "19"))
                              (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "18")))
                              (rule "true_left" (formula "19"))
                              (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "4"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "true_left" (formula "4"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "19") (inst "k=k") (inst "k_0=k_0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "eqSymm" (formula "19") (term "0,0,0"))
                              (rule "disjointDefinition" (formula "25") (term "1"))
                              (rule "disjointDefinition" (formula "22") (term "1,0,1"))
                              (rule "disjointDefinition" (formula "21") (term "1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "20"))
                              (rule "add_zero_right" (formula "20") (term "0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                              (rule "polySimp_elimOne" (formula "20") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "5") (term "0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "closeFalse" (formula "5"))
                           )
                           (branch "CUT: ov_0 = null FALSE"
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "notRight" (formula "25"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "1")))
                              (rule "true_left" (formula "4"))
                               (builtin "Use Dependency Contract" (formula "4") (term "2") (ifInst ""  (formula "16") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                              (rule "wellFormedAnon" (formula "24") (term "1,1,0,0,0,0"))
                              (rule "replace_known_left" (formula "24") (term "0,1,0,0,0,0") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "28")) (ifInst ""  (formula "3")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "19")))
                              (rule "disjointDefinition" (formula "24") (term "0,0"))
                              (rule "measuredByCheck" (formula "24") (term "1,0") (ifseqformula "10"))
                              (rule "precOfInt" (formula "24") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0"))
                              (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0"))
                              (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "16"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0"))
                              (rule "polySimp_rightDist" (formula "24") (term "1,1,1,0"))
                              (rule "mul_literals" (formula "24") (term "0,1,1,1,0"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,0"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,0"))
                              (rule "replace_known_left" (formula "24") (term "1,1,0") (ifseqformula "15"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0") (ifseqformula "5"))
                              (rule "qeq_literals" (formula "24") (term "0,1,0"))
                               (builtin "One Step Simplification" (formula "24"))
                              (rule "true_left" (formula "24"))
                              (rule "limit_Tree_footprint" (formula "23") (term "1,0"))
                              (rule "limit_Tree_footprint" (formula "4") (term "0,1,0,1,1,0,2"))
                              (rule "limit_java_lang_Object__inv_" (formula "19"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "20")))
                              (rule "true_left" (formula "19"))
                              (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "4"))
                              (rule "replaceKnownSelect_taclet10101010_4" (formula "4") (term "0,1"))
                              (rule "replaceKnownAuxiliaryConstant_taclet110101010_5" (formula "4") (term "0,1"))
                              (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "25")))
                              (rule "true_left" (formula "4"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "19") (inst "k=k") (inst "k_0=k_0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "eqSymm" (formula "19") (term "0,0,0"))
                              (rule "disjointDefinition" (formula "25") (term "1"))
                              (rule "disjointDefinition" (formula "22") (term "1,0,1"))
                              (rule "disjointDefinition" (formula "21") (term "1,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "22") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1"))
                              (rule "inEqSimp_ltToLeq" (formula "20"))
                              (rule "add_zero_right" (formula "20") (term "0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "22") (term "0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1,0,0,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                              (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1"))
                              (rule "mul_literals" (formula "21") (term "0,1,0,0,1"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                              (rule "polySimp_elimOne" (formula "20") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "5") (term "0"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "closeFalse" (formula "5"))
                           )
                        )
                     )
                  )
                  (branch "Case '<-'"
                     (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "23"))
                     (rule "ifthenelse_split" (formula "3") (term "2,0,1"))
                     (branch "self.left = null TRUE"
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "replace_known_left" (formula "25") (term "0,0,1,1,1,1,0,2") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                        (rule "replace_known_left" (formula "11") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "true_left" (formula "11"))
                        (rule "replace_known_left" (formula "12") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "12"))
                        (rule "true_left" (formula "12"))
                        (rule "replace_known_left" (formula "9") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "true_left" (formula "9"))
                        (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "replace_known_left" (formula "10") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "true_left" (formula "10"))
                        (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "3"))
                        (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "3"))
                        (rule "limit_Tree_footprint" (formula "17") (term "1"))
                        (rule "associativeLawUnion" (formula "20") (term "1,1,1,1,0,2"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "1"))
                        (rule "cut_direct" (formula "1") (term "0"))
                        (branch "CUT: ov_0 = null TRUE"
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "19"))
                           (rule "applyEqRigid" (formula "20") (term "0") (ifseqformula "1"))
                           (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "eqSymm" (formula "19"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1,1") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "12"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "5"))
                           (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "onlyCreatedObjectsAreObservedInLocSetsEQ" (formula "2") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                            (builtin "Use Dependency Contract" (formula "21") (term "2") (ifInst ""  (formula "13") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                           (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                           (rule "replace_known_left" (formula "20") (term "1,1,1,0,0,0,0") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "21")) (ifInst ""  (formula "12")) (ifInst ""  (formula "5")) (ifInst ""  (formula "5")) (ifInst ""  (formula "16")))
                           (rule "disjointDefinition" (formula "20") (term "0,0"))
                           (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "9"))
                           (rule "precOfInt" (formula "20") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                           (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "13"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                           (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "11"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "20") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "limit_java_lang_Object__inv_" (formula "16"))
                           (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "17")))
                           (rule "true_left" (formula "16"))
                           (rule "limit_Tree_footprint" (formula "2") (term "2"))
                           (rule "limit_Tree_footprint" (formula "19") (term "1"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "16") (inst "k=k") (inst "k_0=k_0") (ifseqformula "20"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "eqSymm" (formula "16") (term "0,0,0"))
                           (rule "disjointDefinition" (formula "22") (term "1"))
                           (rule "disjointDefinition" (formula "19") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "18") (term "1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "17"))
                           (rule "add_zero_right" (formula "17") (term "0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                           (rule "polySimp_elimOne" (formula "17") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "17"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                        (branch "CUT: ov_0 = null FALSE"
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "14") (term "1") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "onlyCreatedObjectsAreObservedInLocSetsEQ" (formula "2") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")))
                           (rule "true_left" (formula "2"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "5"))
                           (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                            (builtin "Use Dependency Contract" (formula "23") (term "2") (ifInst ""  (formula "12") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                           (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                           (rule "replace_known_left" (formula "20") (term "0,1,1,0,0,0,0") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")) (ifInst ""  (formula "14")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "16")))
                           (rule "disjointDefinition" (formula "20") (term "0,0"))
                           (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "9"))
                           (rule "precOfInt" (formula "20") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                           (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "12"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                           (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "11"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "20") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "limit_Tree_footprint" (formula "23") (term "0,1,1,1,0,2"))
                           (rule "limit_java_lang_Object__inv_" (formula "16"))
                           (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "17")))
                           (rule "true_left" (formula "16"))
                           (rule "limit_Tree_footprint" (formula "19") (term "1"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                           (rule "true_left" (formula "2"))
                           (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "16") (inst "k=k") (inst "k_0=k_0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "andLeft" (formula "16"))
                           (rule "eqSymm" (formula "16") (term "0,0,0"))
                           (rule "disjointDefinition" (formula "22") (term "1"))
                           (rule "disjointDefinition" (formula "19") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "18") (term "1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "17"))
                           (rule "add_zero_right" (formula "17") (term "0"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "19") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "19") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "19") (term "0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "19") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "17"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                           (rule "polySimp_elimOne" (formula "17") (term "0"))
                           (rule "inEqSimp_contradInEq0" (formula "17") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "17") (term "0"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "closeFalse" (formula "17"))
                        )
                     )
                     (branch "self.left = null FALSE"
                        (rule "replace_known_right" (formula "26") (term "0,1,1,0,1,0,1,1,0,2") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "23")) (ifInst ""  (formula "23")) (ifInst ""  (formula "23")))
                        (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "replace_known_right" (formula "13") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "13"))
                        (rule "replace_known_right" (formula "22") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "9"))
                        (rule "notLeft" (formula "9"))
                        (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "elementOfSingleton" (formula "3") (term "0,1"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "20"))
                        (rule "commuteUnion" (formula "26") (term "1,1,1,0,2"))
                        (rule "commuteUnion_2" (formula "26") (term "1,1,1,1,1,1,0,2"))
                        (rule "commuteUnion_2" (formula "26") (term "1,1,0,1,1,1,0,2"))
                        (rule "associativeLawUnion" (formula "26") (term "1,1,0,2"))
                        (rule "associativeLawUnion" (formula "26") (term "1,1,1,1,0,2"))
                        (rule "associativeLawUnion" (formula "26") (term "1,1,0,1,1,0,2"))
                        (rule "associativeLawUnion" (formula "26") (term "0,1,1,1,1,0,2"))
                        (rule "associativeLawUnion" (formula "26") (term "0,1,0,0,1,1,0,2"))
                        (rule "associativeLawUnion" (formula "26") (term "0,1,1,0,1,1,0,2"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "1"))
                        (rule "cut_direct" (formula "1") (term "0"))
                        (branch "CUT: ov_0 = null TRUE"
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "27") (term "0") (ifseqformula "1"))
                           (rule "applyEqRigid" (formula "25") (term "0") (ifseqformula "1"))
                           (rule "eqSymm" (formula "25"))
                           (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "eqSymm" (formula "22"))
                           (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "21"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "15") (term "1,1,0") (ifseqformula "4"))
                           (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,1") (ifseqformula "4"))
                           (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "onlyCreatedObjectsAreObservedInLocSetsEQ" (formula "2") (ifseqformula "14"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                            (builtin "Use Dependency Contract" (formula "28") (term "2") (ifInst ""  (formula "14") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                           (rule "wellFormedAnon" (formula "24") (term "1,1,0,0,0,0"))
                           (rule "replace_known_right" (formula "24") (term "0,0,0,0,0,0,0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "15")) (ifInst ""  (formula "4")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "18")))
                           (rule "disjointDefinition" (formula "24") (term "0,0"))
                           (rule "measuredByCheck" (formula "24") (term "1,0") (ifseqformula "8"))
                           (rule "precOfInt" (formula "24") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0"))
                           (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "14"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,0"))
                           (rule "replace_known_left" (formula "24") (term "1,1,0") (ifseqformula "13"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "24") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "limit_Tree_footprint" (formula "22") (term "1"))
                           (rule "limit_Tree_footprint" (formula "16") (term "1,0"))
                           (rule "limit_java_lang_Object__inv_" (formula "18"))
                           (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                           (rule "true_left" (formula "18"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "18") (inst "k=k") (inst "k_0=k_0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "eqSymm" (formula "18") (term "0,0,0"))
                           (rule "disjointDefinition" (formula "24") (term "1"))
                           (rule "disjointDefinition" (formula "21") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "20") (term "1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19"))
                           (rule "add_zero_right" (formula "19") (term "0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                           (rule "polySimp_elimOne" (formula "19") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "19"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                        (branch "CUT: ov_0 = null FALSE"
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "1,0") (ifseqformula "4"))
                           (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "1,1") (ifseqformula "5"))
                           (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "onlyCreatedObjectsAreObservedInLocSetsEQ" (formula "2") (ifseqformula "15"))
                           (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "25")))
                           (rule "true_left" (formula "2"))
                            (builtin "Use Dependency Contract" (formula "30") (term "2") (ifInst ""  (formula "15") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                           (rule "wellFormedAnon" (formula "24") (term "1,1,0,0,0,0"))
                           (rule "replace_known_left" (formula "24") (term "0,1,0,0,0,0") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "30")) (ifInst ""  (formula "3")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "18")))
                           (rule "disjointDefinition" (formula "24") (term "0,0"))
                           (rule "measuredByCheck" (formula "24") (term "1,0") (ifseqformula "9"))
                           (rule "precOfInt" (formula "24") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0"))
                           (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "15"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,0"))
                           (rule "replace_known_left" (formula "24") (term "1,1,0") (ifseqformula "14"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0") (ifseqformula "4"))
                           (rule "qeq_literals" (formula "24") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "limit_Tree_footprint" (formula "25") (term "2"))
                           (rule "limit_Tree_footprint" (formula "30") (term "0,1,1,1,0,2"))
                           (rule "limit_java_lang_Object__inv_" (formula "18"))
                           (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "19"))
                            (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "17")))
                           (rule "true_left" (formula "18"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                           (rule "true_left" (formula "2"))
                           (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "18") (inst "k=k") (inst "k_0=k_0") (ifseqformula "29"))
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "andLeft" (formula "18"))
                           (rule "eqSymm" (formula "18") (term "0,0,0"))
                           (rule "disjointDefinition" (formula "24") (term "1"))
                           (rule "disjointDefinition" (formula "21") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "20") (term "1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "21") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "19"))
                           (rule "add_zero_right" (formula "19") (term "0"))
                           (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "21") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "21") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "21") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "21") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "21") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "21") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "20") (term "0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                           (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                           (rule "polySimp_elimOne" (formula "19") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "4") (ifseqformula "19"))
                           (rule "qeq_literals" (formula "4") (term "0"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "closeFalse" (formula "4"))
                        )
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "close" (formula "10") (ifseqformula "8"))
            )
         )
      )
      (branch "Assume self.right@heap[anon( allLocs ∖ self.* ∪ if (self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if (self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] != self.right"
          (builtin "One Step Simplification" (formula "7"))
         (rule "notLeft" (formula "1"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "eqSymm" (formula "6") (term "0,0,0"))
         (rule "disjointDefinition" (formula "12") (term "1"))
         (rule "disjointDefinition" (formula "9") (term "1,0,1"))
         (rule "disjointDefinition" (formula "8") (term "1,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1"))
         (rule "inEqSimp_ltToLeq" (formula "7"))
         (rule "add_zero_right" (formula "7") (term "0"))
         (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
         (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1"))
         (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1"))
         (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,1"))
         (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
         (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
         (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
         (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1"))
         (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1"))
         (rule "inEqSimp_sepNegMonomial0" (formula "7"))
         (rule "polySimp_mulLiterals" (formula "7") (term "0"))
         (rule "polySimp_elimOne" (formula "7") (term "0"))
         (rule "setMinusOfUnion" (formula "14") (term "1,1,0,2,0"))
         (rule "setMinusOfUnion" (formula "14") (term "1,1,0,1,2,0"))
         (rule "setMinusOfUnion" (formula "14") (term "1,1,0,0,0,0"))
         (rule "setMinusOfUnion" (formula "13") (term "1,1,0,0"))
         (rule "setMinusOfUnion" (formula "14") (term "1,1,1,0,2,0"))
         (rule "setMinusOfUnion" (formula "14") (term "1,1,1,0,1,2,0"))
         (rule "setMinusOfUnion" (formula "14") (term "1,1,1,0,0,0,0"))
         (rule "setMinusOfUnion" (formula "13") (term "1,1,1,0,0"))
         (rule "pullOutSelect" (formula "14") (term "1,2,0") (inst "selectSK=Tree_right_0"))
         (rule "applyEq" (formula "14") (term "0") (ifseqformula "1"))
         (rule "applyEq" (formula "15") (term "0,0,0") (ifseqformula "1"))
         (rule "simplifySelectOfAnon" (formula "1"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "4")))
         (rule "eqSymm" (formula "14"))
         (rule "elementOfSetMinus" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "elementOfUnion" (formula "1") (term "0,0"))
         (rule "elementOfUnion" (formula "1") (term "1,0,0"))
         (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSetMinus" (formula "1") (term "0,1,0,0"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSetMinus" (formula "1") (term "1,1,0,0"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
         (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
         (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0,1,0,1,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,0,1,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
         (rule "elementOfUnion" (formula "1") (term "0,0,1,1,1,0,0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,1,1,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "commuteUnion" (formula "15") (term "1,0,1,1,1,0,2,0"))
         (rule "commuteUnion_2" (formula "15") (term "1,1,1,1,1,0,2,0"))
         (rule "commuteUnion_2" (formula "15") (term "1,0,1,1,0,2,0"))
         (rule "commuteUnion_2" (formula "15") (term "0,1,1,1,1,1,0,2,0"))
         (rule "commuteUnion_2" (formula "15") (term "0,1,0,1,1,0,2,0"))
         (rule "commuteUnion" (formula "15") (term "0,0,1,1,1,1,1,0,2,0"))
         (rule "commuteUnion" (formula "15") (term "0,0,1,0,1,1,0,2,0"))
         (rule "commute_or" (formula "7") (term "0"))
         (rule "commute_or_2" (formula "7"))
         (rule "limit_java_lang_Object__inv_" (formula "10") (term "1,1"))
         (rule "limit_Tree_footprint" (formula "14") (term "0,0,1"))
         (rule "applyEq" (formula "17") (term "2,0,0,1,1,1,0,2,0") (ifseqformula "14"))
         (rule "applyEq" (formula "1") (term "2,2,0,0,1,0,0") (ifseqformula "14"))
         (rule "cnf_rightDist" (formula "11"))
         (rule "andLeft" (formula "11"))
         (rule "commute_or" (formula "12"))
         (rule "limit_Tree_footprint" (formula "16") (term "1,0,1"))
         (rule "applyEq" (formula "1") (term "2,2,0,1,1,0,0") (ifseqformula "16"))
         (rule "applyEq" (formula "19") (term "2,1") (ifseqformula "16"))
         (rule "applyEq" (formula "19") (term "2,0,1,1,1,1,0,2,0") (ifseqformula "16"))
         (rule "cnf_rightDist" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "commute_or" (formula "10"))
         (rule "cnf_rightDist" (formula "12"))
         (rule "andLeft" (formula "12"))
         (rule "commute_or" (formula "13"))
         (rule "cnf_rightDist" (formula "9"))
         (rule "andLeft" (formula "9"))
         (rule "commute_or" (formula "10"))
         (rule "applyEq_or_gen1" (formula "7"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "equalityToElementOfRight" (formula "22") (inst "fv=fv") (inst "ov=ov"))
         (rule "allRight" (formula "22") (inst "sk=ov_0"))
         (rule "allRight" (formula "22") (inst "sk=fv_0"))
         (rule "equiv_right" (formula "22"))
         (branch "Case '->'"
            (rule "ifthenelse_split" (formula "2") (term "2,1,0,0,0,0"))
            (branch "self.right = null TRUE"
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
               (rule "replace_known_left" (formula "1") (term "0,0,1,1,1,1,0,2,2") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
               (rule "replace_known_left" (formula "24") (term "0,2") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "false_right" (formula "24"))
               (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "true_left" (formula "15"))
               (rule "replace_known_left" (formula "19") (term "1,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "applyEq" (formula "18") (term "1,1") (ifseqformula "2"))
               (rule "applyEq" (formula "9") (term "0,0,1") (ifseqformula "2"))
               (rule "eqSymm" (formula "9") (term "0,1"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "true_left" (formula "9"))
               (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "2"))
               (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "2"))
               (rule "applyEq" (formula "18") (term "0") (ifseqformula "2"))
               (rule "eqSymm" (formula "18"))
               (rule "replace_known_right" (formula "1") (term "0,2") (ifseqformula "18"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "2"))
               (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "2"))
               (rule "limit_Tree_footprint" (formula "17") (term "1"))
               (rule "limit_java_lang_Object__inv_" (formula "13") (term "1"))
               (rule "cnf_rightDist" (formula "3") (term "0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "commute_and" (formula "3") (term "0,0"))
               (rule "cut_direct" (formula "11") (term "0"))
               (branch "CUT: self.left = null TRUE"
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "true_left" (formula "12"))
                  (rule "replace_known_left" (formula "1") (term "0,1,1,0,1,1,0,2") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
                  (rule "replace_known_left" (formula "3") (term "0,2,1,1,0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
                  (rule "applyEqReverse" (formula "1") (term "1,2") (ifseqformula "3"))
                  (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "18"))
                  (rule "closeTrue" (formula "18"))
               )
               (branch "CUT: self.left = null FALSE"
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "replace_known_right" (formula "1") (term "0,0,1,1,1,0,2") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")))
                  (rule "replace_known_right" (formula "3") (term "0,2,0,0,1,0,0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")))
                  (rule "disjointAllFields" (formula "3") (term "1,1,0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "12"))
                  (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "applyEqReverse" (formula "1") (term "1,2") (ifseqformula "3"))
                  (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "19"))
                  (rule "closeTrue" (formula "19"))
               )
            )
            (branch "self.right = null FALSE"
               (rule "replace_known_right" (formula "1") (term "0,1,1,1,0,1,1,1,0,2,2") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
               (rule "replace_known_right" (formula "24") (term "0,2") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "24"))
               (rule "replace_known_right" (formula "2") (term "0,2,1,0,1,1,1,0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
               (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "disjointAllFields" (formula "2") (term "0,1,1,0,0") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "replace_known_right" (formula "21") (term "1,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "commuteUnion" (formula "1") (term "1,1,1,0,2,2"))
               (rule "commuteUnion_2" (formula "1") (term "1,0,1,1,0,2,2"))
               (rule "commuteUnion_2" (formula "1") (term "1,0,1,1,1,0,2,2"))
               (rule "commuteUnion_2" (formula "1") (term "1,1,1,1,1,1,0,2,2"))
               (rule "cnf_rightDist" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "commute_and" (formula "2") (term "0,0"))
               (rule "ifthenelse_split" (formula "1") (term "0,1,1,1,1,0,2,2"))
               (branch "self.left = null TRUE"
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "replace_known_left" (formula "3") (term "0,2,0,0,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "24")))
                  (rule "closeFalse" (formula "3"))
               )
               (branch "self.left = null FALSE"
                  (rule "replace_known_right" (formula "2") (term "0,2,0,0,0,0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
                  (rule "replace_known_right" (formula "1") (term "0,1,1,1,1,1,1,1,0,2,2") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
                  (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "notLeft" (formula "8"))
                  (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "disjointAllFields" (formula "2") (term "1,1,0,0") (ifseqformula "10"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "22"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "ifthenelse_negated" (formula "2") (term "0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "24")))
                  (rule "closeFalse" (formula "2"))
               )
            )
         )
         (branch "Case '<-'"
            (rule "ifthenelse_split" (formula "2") (term "2,1,0,0,0,0"))
            (branch "self.right = null TRUE"
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
               (rule "replace_known_left" (formula "24") (term "0,1,1,1,0,1,1,1,0,2,2") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "2")))
               (rule "replace_known_left" (formula "1") (term "0,2") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "closeFalse" (formula "1"))
            )
            (branch "self.right = null FALSE"
               (rule "replace_known_right" (formula "24") (term "0,1,1,1,0,1,1,1,0,2,2") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
               (rule "replace_known_right" (formula "2") (term "0,2,1,0,1,0,1,0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
               (rule "replace_known_right" (formula "1") (term "0,2") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "14"))
               (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "disjointAllFields" (formula "2") (term "0,1,1,0,0") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "16"))
                (builtin "One Step Simplification" (formula "13"))
               (rule "replace_known_right" (formula "21") (term "1,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "15"))
                (builtin "One Step Simplification" (formula "22"))
               (rule "commuteUnion" (formula "25") (term "1,1,1,0,2,2"))
               (rule "commuteUnion_2" (formula "25") (term "1,0,1,1,0,2,2"))
               (rule "commuteUnion_2" (formula "25") (term "1,0,1,1,1,0,2,2"))
               (rule "commuteUnion_2" (formula "25") (term "1,1,1,1,1,1,0,2,2"))
               (rule "cnf_rightDist" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "commute_and" (formula "2") (term "0,0"))
               (rule "ifthenelse_split" (formula "25") (term "0,1,1,1,1,0,2,2"))
               (branch "self.left = null TRUE"
                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "replace_known_left" (formula "3") (term "0,2,0,0,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "25")))
                  (rule "closeFalse" (formula "3"))
               )
               (branch "self.left = null FALSE"
                  (rule "replace_known_right" (formula "2") (term "0,2,1,1,0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "25")) (ifInst ""  (formula "25")))
                  (rule "replace_known_right" (formula "26") (term "0,1,1,0,1,1,1,0,2,2") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "25")) (ifInst ""  (formula "25")))
                  (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "disjointAllFields" (formula "2") (term "1,1,0,0") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "notLeft" (formula "8"))
                  (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "11"))
                  (rule "replace_known_right" (formula "20") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "ifthenelse_negated" (formula "2") (term "0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "24")))
                  (rule "closeFalse" (formula "2"))
               )
            )
         )
      )
   )
)
(branch "Assume if ( self.left@heap[anon( allLocs ∖ self.* ∪ if ( self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if ( self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = null) then (∅) else (self.left.footprint$lmtd @heap[anon( allLocs ∖ self.* ∪ if (self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if (self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)]) != if (self.left = null) then (∅) else (self.left.footprint$lmtd)"
   (rule "hide_right" (formula "9") (userinteraction))
   (rule "notLeft" (formula "1") (userinteraction))
   (rule "eqTermCut" (formula "7") (term "0,0,1") (inst "s=Tree::select(anon(heap,
                  setMinus(allLocs,
                           setMinus(union(allFields(self),
                                          union(\\if (  Tree::select(heap,
                                                                    self,
                                                                    Tree::$left)
                                                     = null)
                                                    \\then (empty)
                                                    \\else (Tree::footprint$lmtd(heap,
                                                                                Tree::select(heap,
                                                                                             self,
                                                                                             Tree::$left))),
                                                \\if (  Tree::select(heap,
                                                                    self,
                                                                    Tree::$right)
                                                     = null)
                                                    \\then (empty)
                                                    \\else (Tree::footprint$lmtd(heap,
                                                                                Tree::select(heap,
                                                                                             self,
                                                                                             Tree::$right))))),
                                    union(union(union(singleton(self,
                                                                Tree::$isRed),
                                                      \\if (  Tree::select(heap,
                                                                          self,
                                                                          Tree::$left)
                                                           = null)
                                                          \\then (empty)
                                                          \\else (singleton(Tree::select(heap,
                                                                                        self,
                                                                                        Tree::$left),
                                                                           Tree::$isRed))),
                                                \\if (  Tree::select(heap,
                                                                    self,
                                                                    Tree::$right)
                                                     = null)
                                                    \\then (empty)
                                                    \\else (singleton(Tree::select(heap,
                                                                                  self,
                                                                                  Tree::$right),
                                                                     Tree::$isRed))),
                                          singleton(self,
                                                    Tree::$heightVariant)))),
                  anon_heap<<anonHeapFunction>>),
             self<<origin(\"accessible @ file Tree.java @ line 38\",\"[]\")>>,
             Tree::$left)") (userinteraction))
   (branch "Assume self.left = self.left@heap[anon( allLocs ∖ self.* ∪ if (self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if (self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ if (self.left = null) then (∅) else ({(self.left, Tree::$isRed)}) ∪ if (self.right = null) then (∅) else ({(self.right, Tree::$isRed)}) ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)]"
      (rule "applyEqReverse" (formula "8") (term "0,0,0") (ifseqformula "1") (userinteraction))
      (rule "applyEqReverse" (formula "8") (term "1,2,0") (ifseqformula "1") (userinteraction))
      (rule "cut_direct" (formula "8") (term "0,0") (userinteraction))
      (branch "CUT: self.left = null TRUE"
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
         (rule "closeTrue" (formula "9"))
      )
      (branch "CUT: self.left = null FALSE"
          (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")) (ifInst ""  (formula "8")) (ifInst ""  (formula "8")))
          (builtin "Use Dependency Contract" (formula "9") (term "0") (ifInst ""  (formula "9") (term "1")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
         (rule "Class_invariant_axiom_for_Tree" (formula "7") (inst "k_0=k_0") (inst "k=k") (ifseqformula "11") (userinteraction))
         (rule "unlimit_java_lang_Object__inv_" (formula "7") (term "1,1,1,0,0,0,0") (userinteraction))
         (rule "impLeft" (formula "8"))
         (branch "Case 1"
            (rule "andRight" (formula "8"))
            (branch "Case 1"
               (rule "andRight" (formula "8"))
               (branch "Case 1"
                  (rule "andRight" (formula "8"))
                  (branch "Case 1"
                     (rule "andRight" (formula "8"))
                     (branch "Case 1"
                        (rule "andRight" (formula "8"))
                        (branch "Case 1"
                           (rule "notRight" (formula "8"))
                           (rule "close" (formula "9") (ifseqformula "1"))
                        )
                        (branch "Case 2"
                            (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")) (ifInst ""  (formula "9")))
                           (rule "referencedObjectIsCreatedRight" (formula "8") (ifseqformula "9"))
                           (rule "close" (formula "8") (ifseqformula "2"))
                        )
                     )
                     (branch "Case 2"
                        (rule "andRight" (formula "8"))
                        (branch "Case 1"
                           (rule "close" (formula "8") (ifseqformula "2"))
                        )
                        (branch "Case 2"
                           (rule "wellFormedAnon" (formula "8"))
                            (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")) (ifInst ""  (formula "9")))
                           (rule "andLeft" (formula "7"))
                           (rule "andLeft" (formula "7"))
                           (rule "andLeft" (formula "7"))
                           (rule "andLeft" (formula "7"))
                           (rule "andLeft" (formula "7"))
                           (rule "andLeft" (formula "7"))
                           (rule "andLeft" (formula "9"))
                           (rule "andLeft" (formula "9"))
                           (rule "eqSymm" (formula "1"))
                           (rule "eqSymm" (formula "7") (term "0,0"))
                           (rule "replace_known_right" (formula "1") (term "0,0,1,0,1,1,0,0") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
                           (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "2"))
                            (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "3")))
                           (rule "closeTrue" (formula "16"))
                        )
                     )
                  )
                  (branch "Case 2"
                      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")))
                     (rule "closeFalse" (formula "7"))
                  )
               )
               (branch "Case 2"
                  (rule "cut_direct" (formula "8") (term "0,1,1,0,1,0") (userinteraction))
                  (branch "CUT: self.right = null TRUE"
                      (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "10")) (ifInst ""  (formula "1")) (ifInst ""  (formula "10")) (ifInst ""  (formula "1")) (ifInst ""  (formula "10")) (ifInst ""  (formula "1")))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "1")))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "eqSymm" (formula "2"))
                     (rule "replace_known_left" (formula "2") (term "0,1,1,0,1,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "1")))
                     (rule "replace_known_left" (formula "16") (term "0,1,1,0,1,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "1")))
                     (rule "disjointDefinition" (formula "14"))
                     (rule "disjointDefinition" (formula "10"))
                     (rule "inEqSimp_ltToLeq" (formula "8"))
                     (rule "add_zero_right" (formula "8") (term "0"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "9"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                     (rule "polySimp_elimOne" (formula "8") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                     (rule "polySimp_mulComm0" (formula "9") (term "1"))
                     (rule "polySimp_rightDist" (formula "9") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                     (rule "mul_literals" (formula "9") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                     (rule "setMinusOfUnion" (formula "2") (term "1,1,0,0"))
                     (rule "setMinusOfUnion" (formula "16") (term "1,1,0,0"))
                     (rule "setMinusOfUnion" (formula "14") (term "1,0,0"))
                     (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_left_0"))
                     (rule "simplifySelectOfAnon" (formula "2"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "18")) (ifInst ""  (formula "6")))
                     (rule "eqSymm" (formula "3"))
                     (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "hideAuxiliaryEq" (formula "3"))
                     (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "elementOfUnion" (formula "2") (term "0"))
                     (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "elementOfSetMinus" (formula "2") (term "1,0"))
                     (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                     (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                     (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "commuteUnion_2" (formula "13") (term "1,1,0"))
                     (rule "commuteUnion" (formula "15") (term "1,1,1,1,0,0"))
                     (rule "commuteUnion_2" (formula "15") (term "1,0,1,1,0,0"))
                     (rule "commuteUnion_2" (formula "13") (term "1,0,1,0,0"))
                     (rule "commuteUnion_2" (formula "13") (term "1,1,1,0,0"))
                     (rule "commuteUnion" (formula "13") (term "0,1,1,0"))
                     (rule "commuteUnion" (formula "15") (term "0,1,0,1,1,0,0"))
                     (rule "commuteUnion" (formula "13") (term "0,1,0,1,0,0"))
                     (rule "commuteUnion" (formula "13") (term "0,1,1,1,0,0"))
                     (rule "limit_java_lang_Object__inv_" (formula "10"))
                     (rule "replace_known_left" (formula "10") (term "1") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "limit_Tree_footprint" (formula "14") (term "0,1,0"))
                     (rule "applyEq" (formula "17") (term "0,1,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "17") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "15") (term "0,1,1,0,0") (ifseqformula "1"))
                     (rule "equalityToElementOfRight" (formula "17") (inst "fv=fv") (inst "ov=ov"))
                     (rule "allRight" (formula "17") (inst "sk=ov_0"))
                     (rule "allRight" (formula "17") (inst "sk=fv_0"))
                     (rule "equiv_right" (formula "17"))
                     (branch "Case '->'"
                        (rule "equalityToElementOfRight" (formula "16") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "allRight" (formula "16") (inst "sk=ov_1"))
                        (rule "allRight" (formula "16") (inst "sk=fv_1"))
                        (rule "notRight" (formula "16"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfUnion" (formula "18"))
                        (rule "orRight" (formula "18"))
                        (rule "elementOfUnion" (formula "17"))
                        (rule "orRight" (formula "17"))
                        (rule "elementOfSetMinus" (formula "20"))
                        (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "notRight" (formula "20"))
                        (rule "elementOfSetMinus" (formula "20"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")))
                        (rule "false_right" (formula "20"))
                        (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "elementOfUnion" (formula "19"))
                        (rule "orRight" (formula "19"))
                        (rule "elementOfSingleton" (formula "19"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "elementOfUnion" (formula "20"))
                        (rule "orRight" (formula "20"))
                        (rule "elementOfSingleton" (formula "20"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "close" (formula "19") (ifseqformula "1"))
                     )
                     (branch "Case '<-'"
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "equalityToElementOfRight" (formula "17") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "17"))
                        (rule "allRight" (formula "17") (inst "sk=ov_1"))
                        (rule "allRight" (formula "17") (inst "sk=fv_1"))
                        (rule "notRight" (formula "17"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfUnion" (formula "18"))
                        (rule "orRight" (formula "18"))
                        (rule "elementOfUnion" (formula "17"))
                        (rule "orRight" (formula "17"))
                        (rule "elementOfSetMinus" (formula "20"))
                        (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "notRight" (formula "20"))
                        (rule "elementOfSetMinus" (formula "20"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")))
                        (rule "false_right" (formula "20"))
                        (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "elementOfUnion" (formula "19"))
                        (rule "orRight" (formula "19"))
                        (rule "elementOfSingleton" (formula "19"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "elementOfUnion" (formula "20"))
                        (rule "orRight" (formula "20"))
                        (rule "elementOfSingleton" (formula "20"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "close" (formula "19") (ifseqformula "1"))
                     )
                  )
                  (branch "CUT: self.right = null FALSE"
                     (rule "Definition_axiom_for_footprint_in_Tree" (formula "7") (term "1,1,1") (ifseqformula "8") (userinteraction))
                      (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "10")) (ifInst ""  (formula "8")) (ifInst ""  (formula "10")) (ifInst ""  (formula "8")) (ifInst ""  (formula "10")) (ifInst ""  (formula "8")))
                      (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "8")))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "8"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "7"))
                     (rule "andLeft" (formula "9"))
                     (rule "notLeft" (formula "7"))
                     (rule "andLeft" (formula "8"))
                     (rule "eqSymm" (formula "1"))
                     (rule "eqSymm" (formula "17"))
                     (rule "replace_known_right" (formula "21") (term "0,1,0,1,1,1,0,0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")))
                     (rule "replace_known_right" (formula "1") (term "0,1,0,1,1,1,0,0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "18")) (ifInst ""  (formula "20")))
                     (rule "disjointDefinition" (formula "19"))
                     (rule "disjointDefinition" (formula "16"))
                     (rule "disjointDefinition" (formula "12"))
                     (rule "disjointDefinition" (formula "9"))
                     (rule "inEqSimp_ltToLeq" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1,0,0"))
                     (rule "inEqSimp_ltToLeq" (formula "7"))
                     (rule "add_zero_right" (formula "7") (term "0"))
                     (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1,0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "11"))
                     (rule "polySimp_mulComm0" (formula "11") (term "1"))
                     (rule "polySimp_rightDist" (formula "11") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "11") (term "1,1"))
                     (rule "mul_literals" (formula "11") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "11") (term "1,1"))
                     (rule "inEqSimp_sepNegMonomial0" (formula "7"))
                     (rule "polySimp_mulLiterals" (formula "7") (term "0"))
                     (rule "polySimp_elimOne" (formula "7") (term "0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "8"))
                     (rule "polySimp_mulComm0" (formula "8") (term "1"))
                     (rule "polySimp_rightDist" (formula "8") (term "1"))
                     (rule "polySimp_mulLiterals" (formula "8") (term "1,1"))
                     (rule "mul_literals" (formula "8") (term "0,1"))
                     (rule "polySimp_elimOne" (formula "8") (term "1,1"))
                     (rule "setMinusOfUnion" (formula "21") (term "1,1,0,0"))
                     (rule "setMinusOfUnion" (formula "1") (term "1,1,0,0"))
                     (rule "setMinusOfUnion" (formula "19") (term "1,0,0"))
                     (rule "distributeIntersection" (formula "16") (term "0"))
                     (rule "setMinusOfUnion" (formula "21") (term "1,1,1,0,0"))
                     (rule "setMinusOfUnion" (formula "1") (term "1,1,1,0,0"))
                     (rule "setMinusOfUnion" (formula "19") (term "1,1,0,0"))
                     (rule "unionEqualsEmpty" (formula "16"))
                     (rule "andLeft" (formula "16"))
                     (rule "distributeIntersection" (formula "17") (term "0"))
                     (rule "unionEqualsEmpty" (formula "17"))
                     (rule "andLeft" (formula "17"))
                     (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_left_0"))
                     (rule "simplifySelectOfAnon" (formula "1"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "5")))
                     (rule "eqSymm" (formula "2"))
                     (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "0"))
                     (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfUnion" (formula "1") (term "1,0"))
                     (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSetMinus" (formula "1") (term "1,1,0"))
                     (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                     (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "commuteUnion" (formula "20") (term "1,1,0"))
                     (rule "commuteUnion" (formula "22") (term "1,0,1,1,0,0"))
                     (rule "commuteUnion_2" (formula "20") (term "1,0,1,0,0"))
                     (rule "commuteUnion" (formula "22") (term "1,1,1,1,1,0,0"))
                     (rule "commuteUnion" (formula "22") (term "1,0,1,1,1,0,0"))
                     (rule "commuteUnion_2" (formula "20") (term "1,0,1,1,0,0"))
                     (rule "commuteUnion_2" (formula "20") (term "1,1,1,1,0,0"))
                     (rule "commuteIntersection" (formula "15") (term "0"))
                     (rule "commuteUnion_2" (formula "20") (term "0,1,0,1,0,0"))
                     (rule "commuteUnion_2" (formula "20") (term "0,1,0,1,1,0,0"))
                     (rule "commuteUnion" (formula "20") (term "0,1,1,1,1,0,0"))
                     (rule "commuteUnion" (formula "20") (term "0,0,1,0,1,0,0"))
                     (rule "commuteUnion" (formula "20") (term "0,0,1,0,1,1,0,0"))
                     (rule "limit_java_lang_Object__inv_" (formula "9"))
                     (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "limit_Tree_footprint" (formula "21") (term "0,1,0"))
                     (rule "applyEq" (formula "24") (term "1") (ifseqformula "1"))
                     (rule "applyEq" (formula "24") (term "0,0,1,1,1,0,0") (ifseqformula "1"))
                     (rule "applyEq" (formula "22") (term "0,0,1,1,0,0") (ifseqformula "1"))
                     (rule "limit_Tree_footprint" (formula "13") (term "1,0"))
                     (rule "applyEq" (formula "25") (term "0,1,1,1,1,0,0") (ifseqformula "13"))
                     (rule "applyEq" (formula "23") (term "0,1,1,1,0,0") (ifseqformula "13"))
                     (rule "associativeLawUnion" (formula "23") (term "1,1,0"))
                     (rule "equalityToElementOfRight" (formula "25") (inst "fv=fv") (inst "ov=ov"))
                     (rule "allRight" (formula "25") (inst "sk=ov_0"))
                     (rule "allRight" (formula "25") (inst "sk=fv_0"))
                     (rule "equiv_right" (formula "25"))
                     (branch "Case '->'"
                        (rule "equalityToElementOfRight" (formula "24") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "allRight" (formula "24") (inst "sk=ov_1"))
                        (rule "allRight" (formula "24") (inst "sk=fv_1"))
                        (rule "notRight" (formula "24"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfUnion" (formula "24"))
                        (rule "orRight" (formula "24"))
                        (rule "elementOfUnion" (formula "23"))
                        (rule "orRight" (formula "23"))
                        (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "22"))
                        (rule "elementOfSetMinus" (formula "26"))
                         (builtin "One Step Simplification" (formula "26"))
                        (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "21"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "false_right" (formula "28"))
                        (rule "elementOfUnion" (formula "28"))
                        (rule "orRight" (formula "28"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "elementOfUnion" (formula "27"))
                        (rule "orRight" (formula "27"))
                        (rule "elementOfSingleton" (formula "27"))
                        (rule "elementOfSetMinus" (formula "30"))
                        (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "notRight" (formula "30"))
                        (rule "elementOfSetMinus" (formula "31"))
                        (rule "elementOfUnion" (formula "29"))
                        (rule "orRight" (formula "29"))
                        (rule "elementOfSingleton" (formula "29"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "32") (term "0,1"))
                        (rule "elementOfSingleton" (formula "32") (term "1,0,1"))
                        (rule "replace_known_right" (formula "32") (term "0,1,0,1") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "32") (term "0,1"))
                        (rule "elementOfSingleton" (formula "32") (term "0,0,1"))
                        (rule "replace_known_right" (formula "32") (term "0,0,0,1") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "close" (formula "26") (ifseqformula "1"))
                     )
                     (branch "Case '<-'"
                        (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "21"))
                        (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "20"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "19"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "equalityToElementOfRight" (formula "28") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "allRight" (formula "28") (inst "sk=ov_1"))
                        (rule "allRight" (formula "28") (inst "sk=fv_1"))
                        (rule "notRight" (formula "28"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "notLeft" (formula "2"))
                        (rule "elementOfUnion" (formula "24"))
                        (rule "orRight" (formula "24"))
                        (rule "elementOfUnion" (formula "23"))
                        (rule "orRight" (formula "23"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "21"))
                        (rule "elementOfSetMinus" (formula "27"))
                         (builtin "One Step Simplification" (formula "27"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "replace_known_right" (formula "28") (term "0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "28"))
                        (rule "false_right" (formula "28"))
                        (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "22"))
                        (rule "elementOfUnion" (formula "29"))
                        (rule "orRight" (formula "29"))
                        (rule "elementOfUnion" (formula "27"))
                        (rule "orRight" (formula "27"))
                        (rule "elementOfSingleton" (formula "27"))
                        (rule "elementOfSetMinus" (formula "30"))
                        (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "30"))
                        (rule "notRight" (formula "30"))
                        (rule "elementOfSetMinus" (formula "31"))
                        (rule "elementOfUnion" (formula "29"))
                        (rule "orRight" (formula "29"))
                        (rule "elementOfSingleton" (formula "29"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "32") (term "0,1"))
                        (rule "elementOfSingleton" (formula "32") (term "1,0,1"))
                        (rule "replace_known_right" (formula "32") (term "0,1,0,1") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "32") (term "0,1"))
                        (rule "elementOfSingleton" (formula "32") (term "0,0,1"))
                        (rule "replace_known_right" (formula "32") (term "0,0,0,1") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "32"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "close" (formula "26") (ifseqformula "1"))
                     )
                  )
               )
            )
            (branch "Case 2"
                (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")) (ifInst ""  (formula "9")))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "7"))
               (rule "andLeft" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "eqSymm" (formula "1"))
               (rule "eqSymm" (formula "7") (term "0,0"))
               (rule "replace_known_right" (formula "1") (term "0,1,0,0,1,1,1,0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
               (rule "disjointDefinition" (formula "15") (term "1"))
               (rule "disjointDefinition" (formula "12") (term "1,0,1"))
               (rule "disjointDefinition" (formula "10"))
               (rule "measuredByCheck" (formula "16") (ifseqformula "6"))
               (rule "precOfInt" (formula "16"))
               (rule "replace_known_left" (formula "16") (term "1") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "16"))
               (rule "inEqSimp_ltToLeq" (formula "12") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "8"))
               (rule "add_zero_right" (formula "8") (term "0"))
               (rule "polySimp_mulComm0" (formula "8") (term "1,0"))
               (rule "inEqSimp_ltToLeq" (formula "9"))
               (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
               (rule "inEqSimp_leqRight" (formula "16"))
               (rule "add_zero_right" (formula "1") (term "0"))
               (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "13") (term "1,0,0,1"))
               (rule "mul_literals" (formula "13") (term "0,1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "13") (term "1,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "13") (term "1,1,0,0,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "9"))
               (rule "polySimp_mulLiterals" (formula "9") (term "0"))
               (rule "polySimp_elimOne" (formula "9") (term "0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "10"))
               (rule "polySimp_mulComm0" (formula "10") (term "1"))
               (rule "polySimp_rightDist" (formula "10") (term "1"))
               (rule "mul_literals" (formula "10") (term "0,1"))
               (rule "polySimp_mulLiterals" (formula "10") (term "1,1"))
               (rule "polySimp_elimOne" (formula "10") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial1" (formula "1"))
               (rule "polySimp_mulLiterals" (formula "1") (term "0"))
               (rule "polySimp_elimOne" (formula "1") (term "0"))
               (rule "setMinusOfUnion" (formula "18") (term "1,1,0,0"))
               (rule "setMinusOfUnion" (formula "2") (term "1,1,0,0"))
               (rule "setMinusOfUnion" (formula "18") (term "1,1,1,0,0"))
               (rule "setMinusOfUnion" (formula "2") (term "1,1,1,0,0"))
               (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_left_0"))
               (rule "simplifySelectOfAnon" (formula "2"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "20")) (ifInst ""  (formula "6")))
               (rule "eqSymm" (formula "3"))
               (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0"))
               (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "1,0"))
               (rule "elementOfUnion" (formula "2") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSetMinus" (formula "2") (term "0,1,0"))
               (rule "elementOfUnion" (formula "2") (term "0,0,0"))
               (rule "elementOfSetMinus" (formula "2") (term "1,1,0"))
               (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,1,0,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0,0,0,0"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
               (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
               (rule "elementOfUnion" (formula "2") (term "0,0,1,0,1,0"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,0,1,0,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,1,0,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0,0,1,1,1,0"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,0,1,1,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "commuteUnion_2" (formula "18") (term "1,0,1,1,0,0"))
               (rule "commuteUnion" (formula "18") (term "1,0,1,1,1,0,0"))
               (rule "commuteUnion_2" (formula "18") (term "1,1,1,1,1,0,0"))
               (rule "commuteUnion_2" (formula "18") (term "0,1,0,1,1,0,0"))
               (rule "commuteUnion_2" (formula "18") (term "0,1,1,1,1,1,0,0"))
               (rule "commuteUnion" (formula "18") (term "0,0,1,0,1,1,0,0"))
               (rule "commuteUnion" (formula "18") (term "0,0,1,1,1,1,1,0,0"))
               (rule "commute_or" (formula "8"))
               (rule "limit_java_lang_Object__inv_" (formula "12"))
               (rule "replace_known_left" (formula "12") (term "1") (ifseqformula "13"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "limit_Tree_footprint" (formula "17") (term "1,0,1"))
               (rule "applyEq" (formula "2") (term "2,2,0,1,1,0") (ifseqformula "17"))
               (rule "applyEq" (formula "20") (term "2,0,1,1,1,1,0,0") (ifseqformula "17"))
               (rule "limit_Tree_footprint" (formula "18") (term "0,0,1"))
               (rule "applyEq" (formula "2") (term "2,0,0,1,0") (ifseqformula "18"))
               (rule "disjointAllFields" (formula "2") (term "0,0,1,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "applyEq" (formula "21") (term "0,0,1,1,1,0,0") (ifseqformula "18"))
               (rule "applyEq" (formula "21") (term "1") (ifseqformula "18"))
               (rule "cnf_rightDist" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "commute_or_2" (formula "2"))
               (rule "commute_or" (formula "15"))
               (rule "commute_or" (formula "2") (term "0"))
               (rule "cnf_rightDist" (formula "14"))
               (rule "andLeft" (formula "14"))
               (rule "commute_or" (formula "15"))
               (rule "cnf_rightDist" (formula "2"))
               (rule "andLeft" (formula "2"))
               (rule "shift_paren_or" (formula "3"))
               (rule "commute_or" (formula "3") (term "0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "true_left" (formula "2"))
               (rule "applyEq_or_gen0" (formula "8"))
               (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "notLeft" (formula "8"))
               (rule "equalityToElementOfRight" (formula "23") (inst "fv=fv") (inst "ov=ov"))
               (rule "allRight" (formula "23") (inst "sk=ov_0"))
               (rule "allRight" (formula "23") (inst "sk=fv_0"))
               (rule "equiv_right" (formula "23"))
               (branch "Case '->'"
                  (rule "cut_direct" (formula "21") (term "0"))
                  (branch "CUT: self.right = null TRUE"
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "replace_known_left" (formula "1") (term "0,0,1,1,1,1,0,2") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                     (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "true_left" (formula "15"))
                     (rule "replace_known_left" (formula "3") (term "0,2,0,1") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "applyEq" (formula "18") (term "0") (ifseqformula "17"))
                     (rule "eqSymm" (formula "18"))
                     (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "17"))
                     (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "17"))
                     (rule "limit_Tree_footprint" (formula "15") (term "1"))
                     (rule "associativeLawUnion" (formula "1") (term "1,1,1,1,0,2"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "12") (term "1") (ifseqformula "3"))
                     (rule "replace_known_right" (formula "12") (term "0") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "12"))
                     (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "1"))
                     (rule "selectCreatedOfAnonAsFormula" (formula "1") (term "1"))
                     (rule "shift_paren_or" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "4"))
                     (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "true_left" (formula "19"))
                     (rule "cut_direct" (formula "1") (term "0,0"))
                     (branch "CUT: ov_0 = null TRUE"
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                         (builtin "Use Dependency Contract" (formula "2") (term "2") (ifInst ""  (formula "18") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                        (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                        (rule "replace_known_left" (formula "20") (term "0,1,1,0,0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "21")) (ifInst ""  (formula "13")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "14")))
                        (rule "disjointDefinition" (formula "20") (term "0,0"))
                        (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "8"))
                        (rule "precOfInt" (formula "20") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                        (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "18"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                        (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "20") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "limit_Tree_footprint" (formula "11") (term "1,0"))
                        (rule "limit_java_lang_Object__inv_" (formula "14"))
                        (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")))
                        (rule "true_left" (formula "14"))
                        (rule "limit_Tree_footprint" (formula "17") (term "1"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "14") (inst "k=k") (inst "k_0=k_0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "eqSymm" (formula "14") (term "0,0,0"))
                        (rule "disjointDefinition" (formula "20") (term "1"))
                        (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                        (rule "disjointDefinition" (formula "16") (term "1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "15"))
                        (rule "add_zero_right" (formula "15") (term "0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "15"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                     (branch "CUT: ov_0 = null FALSE"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "cut_direct" (formula "1") (term "0"))
                        (branch "CUT: ov_0.<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                            (builtin "Use Dependency Contract" (formula "2") (term "2") (ifInst ""  (formula "18") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                           (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                           (rule "replace_known_left" (formula "20") (term "1,0,0,0") (ifseqformula "14"))
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")) (ifInst ""  (formula "13")) (ifInst ""  (formula "4")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")))
                           (rule "disjointDefinition" (formula "20") (term "0,0"))
                           (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "8"))
                           (rule "precOfInt" (formula "20") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                           (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "18"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                           (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "20") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "limit_Tree_footprint" (formula "22") (term "2"))
                           (rule "limit_Tree_footprint" (formula "17") (term "1"))
                           (rule "limit_java_lang_Object__inv_" (formula "14"))
                           (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")))
                           (rule "true_left" (formula "14"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "selectCreatedOfAnonAsFormula" (formula "2"))
                           (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "true_left" (formula "2"))
                           (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "14") (inst "k=k") (inst "k_0=k_0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "eqSymm" (formula "14") (term "0,0,0"))
                           (rule "disjointDefinition" (formula "20") (term "1"))
                           (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "16") (term "1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "15"))
                           (rule "add_zero_right" (formula "15") (term "0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                        (branch "CUT: ov_0.<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "1"))
                            (builtin "Use Dependency Contract" (formula "2") (term "2") (ifInst ""  (formula "18") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                           (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                           (rule "replace_known_right" (formula "20") (term "0,0,0,0,0,0,0") (ifseqformula "23"))
                            (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "13")) (ifInst ""  (formula "4")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "14")))
                           (rule "disjointDefinition" (formula "20") (term "0,0"))
                           (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "8"))
                           (rule "precOfInt" (formula "20") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                           (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "18"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                           (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "3"))
                           (rule "qeq_literals" (formula "20") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "true_left" (formula "20"))
                           (rule "limit_Tree_footprint" (formula "17") (term "1"))
                           (rule "limit_java_lang_Object__inv_" (formula "14"))
                           (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
                            (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "12")))
                           (rule "true_left" (formula "14"))
                           (rule "limit_Tree_footprint" (formula "23") (term "2"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "2"))
                           (rule "selectCreatedOfAnonAsFormula" (formula "2"))
                           (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")))
                           (rule "true_left" (formula "2"))
                           (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "14") (inst "k=k") (inst "k_0=k_0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "andLeft" (formula "14"))
                           (rule "eqSymm" (formula "14") (term "0,0,0"))
                           (rule "disjointDefinition" (formula "20") (term "1"))
                           (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "16") (term "1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "15"))
                           (rule "add_zero_right" (formula "15") (term "0"))
                           (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                           (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                           (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                           (rule "polySimp_elimOne" (formula "15") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "15"))
                           (rule "qeq_literals" (formula "3") (term "0"))
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "closeFalse" (formula "3"))
                        )
                     )
                  )
                  (branch "CUT: self.right = null FALSE"
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "replace_known_right" (formula "1") (term "0,1,1,0,1,1,0,2") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
                     (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "replace_known_right" (formula "3") (term "0,2,0,1") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "elementOfSingleton" (formula "3") (term "0,1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "associativeLawUnion" (formula "1") (term "1,1,0,2"))
                     (rule "associativeLawUnion" (formula "1") (term "1,1,0,1,1,0,2"))
                     (rule "associativeLawUnion" (formula "1") (term "0,1,1,0,1,1,0,2"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0") (ifseqformula "3"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                     (rule "selectCreatedOfAnonAsFormula" (formula "2") (term "1"))
                     (rule "shift_paren_or" (formula "2"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "0,1,1,1,1,1,0,2") (ifseqformula "5"))
                     (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "cut_direct" (formula "2") (term "0,0"))
                     (branch "CUT: ov_0 = null TRUE"
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "applyEqRigid" (formula "4") (term "0") (ifseqformula "2"))
                        (rule "applyEq" (formula "27") (term "0") (ifseqformula "2"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "4"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                         (builtin "Use Dependency Contract" (formula "4") (term "2") (ifInst ""  (formula "22") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                        (rule "wellFormedAnon" (formula "24") (term "1,1,0,0,0,0"))
                        (rule "replace_known_left" (formula "24") (term "1,0,0,0,0,0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "27")) (ifInst ""  (formula "6")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "15")))
                        (rule "disjointDefinition" (formula "24") (term "0,0"))
                        (rule "measuredByCheck" (formula "24") (term "1,0") (ifseqformula "10"))
                        (rule "precOfInt" (formula "24") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0"))
                        (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "22"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,0"))
                        (rule "replace_known_left" (formula "24") (term "1,1,0") (ifseqformula "12"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "24") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "limit_Tree_footprint" (formula "22") (term "1"))
                        (rule "limit_Tree_footprint" (formula "23") (term "1,0"))
                        (rule "limit_java_lang_Object__inv_" (formula "15"))
                        (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "15"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "4"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "15") (inst "k=k") (inst "k_0=k_0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "eqSymm" (formula "15") (term "0,0,0"))
                        (rule "disjointDefinition" (formula "21") (term "1"))
                        (rule "disjointDefinition" (formula "18") (term "1,0,1"))
                        (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16"))
                        (rule "add_zero_right" (formula "16") (term "0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "closeFalse" (formula "16"))
                     )
                     (branch "CUT: ov_0 = null FALSE"
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "cut_direct" (formula "2") (term "0"))
                        (branch "CUT: ov_0.<created> = TRUE TRUE"
                            (builtin "One Step Simplification" (formula "3"))
                           (rule "true_left" (formula "3"))
                            (builtin "Use Dependency Contract" (formula "4") (term "2") (ifInst ""  (formula "22") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                           (rule "wellFormedAnon" (formula "24") (term "1,1,0,0,0,0"))
                           (rule "replace_known_left" (formula "24") (term "1,0,0,0,0,0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "28")) (ifInst ""  (formula "6")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "15")))
                           (rule "disjointDefinition" (formula "24") (term "0,0"))
                           (rule "measuredByCheck" (formula "24") (term "1,0") (ifseqformula "10"))
                           (rule "precOfInt" (formula "24") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0"))
                           (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "22"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,0"))
                           (rule "replace_known_left" (formula "24") (term "1,1,0") (ifseqformula "12"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "24") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "limit_Tree_footprint" (formula "17") (term "1,0"))
                           (rule "limit_Tree_footprint" (formula "4") (term "0,1,0,1,1,0,2"))
                           (rule "limit_java_lang_Object__inv_" (formula "15"))
                           (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
                           (rule "true_left" (formula "15"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "4"))
                           (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "25"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=java_lang_Object_created__0"))
                           (rule "simplifySelectOfAnon" (formula "4"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "26")) (ifInst ""  (formula "2")))
                           (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "15") (inst "k=k") (inst "k_0=k_0") (ifseqformula "27"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "eqSymm" (formula "15") (term "0,0,0"))
                           (rule "disjointDefinition" (formula "21") (term "1"))
                           (rule "disjointDefinition" (formula "18") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "16"))
                           (rule "add_zero_right" (formula "16") (term "0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                           (rule "polySimp_elimOne" (formula "16") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "5") (term "0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "closeFalse" (formula "5"))
                        )
                        (branch "CUT: ov_0.<created> = TRUE FALSE"
                            (builtin "One Step Simplification" (formula "2"))
                            (builtin "Use Dependency Contract" (formula "4") (term "2") (ifInst ""  (formula "22") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                           (rule "wellFormedAnon" (formula "24") (term "1,1,0,0,0,0"))
                           (rule "replace_known_left" (formula "24") (term "0,1,0,0,0,0") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "29")) (ifInst ""  (formula "1")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "15")))
                           (rule "disjointDefinition" (formula "24") (term "0,0"))
                           (rule "measuredByCheck" (formula "24") (term "1,0") (ifseqformula "10"))
                           (rule "precOfInt" (formula "24") (term "1,0"))
                           (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0"))
                           (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0"))
                           (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "22"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0"))
                           (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0"))
                           (rule "polySimp_rightDist" (formula "24") (term "1,1,1,0"))
                           (rule "mul_literals" (formula "24") (term "0,1,1,1,0"))
                           (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,0"))
                           (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,0"))
                           (rule "replace_known_left" (formula "24") (term "1,1,0") (ifseqformula "12"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0") (ifseqformula "5"))
                           (rule "qeq_literals" (formula "24") (term "0,1,0"))
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "true_left" (formula "24"))
                           (rule "limit_Tree_footprint" (formula "29") (term "2"))
                           (rule "limit_Tree_footprint" (formula "4") (term "0,1,1,1,0,2"))
                           (rule "limit_java_lang_Object__inv_" (formula "15"))
                           (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "16"))
                            (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
                           (rule "true_left" (formula "15"))
                           (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "4"))
                           (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "26"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "pullOutSelect" (formula "4") (term "0") (inst "selectSK=java_lang_Object_created__0"))
                           (rule "simplifySelectOfAnon" (formula "4"))
                            (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "27")) (ifInst ""  (formula "26")))
                           (rule "applyEqReverse" (formula "5") (term "0") (ifseqformula "4"))
                           (rule "hideAuxiliaryEq" (formula "4"))
                           (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "15") (inst "k=k") (inst "k_0=k_0") (ifseqformula "28"))
                            (builtin "One Step Simplification" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "andLeft" (formula "15"))
                           (rule "eqSymm" (formula "15") (term "0,0,0"))
                           (rule "disjointDefinition" (formula "21") (term "1"))
                           (rule "disjointDefinition" (formula "18") (term "1,0,1"))
                           (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
                           (rule "inEqSimp_ltToLeq" (formula "16"))
                           (rule "add_zero_right" (formula "16") (term "0"))
                           (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
                           (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                           (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                           (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                           (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                           (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                           (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                           (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                           (rule "polySimp_elimOne" (formula "16") (term "0"))
                           (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "16"))
                           (rule "qeq_literals" (formula "5") (term "0"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "closeFalse" (formula "5"))
                        )
                     )
                  )
               )
               (branch "Case '<-'"
                  (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "11"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "cut_direct" (formula "21") (term "0"))
                  (branch "CUT: self.right = null TRUE"
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "true_left" (formula "22"))
                     (rule "replace_known_left" (formula "25") (term "0,1,1,0,1,1,0,2") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                     (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "true_left" (formula "14"))
                     (rule "replace_known_left" (formula "3") (term "0,2,0,1") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "13"))
                     (rule "true_left" (formula "13"))
                     (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "17"))
                     (rule "applyEq" (formula "19") (term "0") (ifseqformula "17"))
                     (rule "eqSymm" (formula "19"))
                     (rule "applyEq" (formula "15") (term "1,0") (ifseqformula "17"))
                     (rule "limit_Tree_footprint" (formula "15") (term "1"))
                     (rule "associativeLawUnion" (formula "20") (term "1,1,1,1,0,2"))
                     (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "1"))
                     (rule "cut_direct" (formula "1") (term "0"))
                     (branch "CUT: ov_0 = null TRUE"
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "21") (term "0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "19") (term "0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "19"))
                        (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "eqSymm" (formula "19"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0") (ifseqformula "4"))
                        (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "4"))
                        (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "onlyCreatedObjectsAreObservedInLocSetsEQ" (formula "2") (ifseqformula "18"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                         (builtin "Use Dependency Contract" (formula "21") (term "2") (ifInst ""  (formula "18") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                        (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                        (rule "replace_known_left" (formula "20") (term "0,1,1,0,0,0,0") (ifseqformula "4"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "21")) (ifInst ""  (formula "11")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "14")))
                        (rule "disjointDefinition" (formula "20") (term "0,0"))
                        (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "8"))
                        (rule "precOfInt" (formula "20") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                        (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "18"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                        (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "20") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "limit_Tree_footprint" (formula "21") (term "0,1,1,1,0,2"))
                        (rule "limit_Tree_footprint" (formula "17") (term "1"))
                        (rule "limit_java_lang_Object__inv_" (formula "14"))
                        (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "13")))
                        (rule "true_left" (formula "14"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "14") (inst "k=k") (inst "k_0=k_0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "eqSymm" (formula "14") (term "0,0,0"))
                        (rule "disjointDefinition" (formula "20") (term "1"))
                        (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                        (rule "disjointDefinition" (formula "16") (term "1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "15"))
                        (rule "add_zero_right" (formula "15") (term "0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "15"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                     (branch "CUT: ov_0 = null FALSE"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0") (ifseqformula "4"))
                        (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "11"))
                        (rule "onlyCreatedObjectsAreObservedInLocSetsEQ" (formula "2") (ifseqformula "18"))
                        (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")))
                        (rule "true_left" (formula "2"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "4"))
                        (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "true_left" (formula "19"))
                         (builtin "Use Dependency Contract" (formula "23") (term "2") (ifInst ""  (formula "18") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                        (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                        (rule "replace_known_left" (formula "20") (term "1,0,0,0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")) (ifInst ""  (formula "11")) (ifInst ""  (formula "4")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")))
                        (rule "disjointDefinition" (formula "20") (term "0,0"))
                        (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "8"))
                        (rule "precOfInt" (formula "20") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                        (rule "applyEq" (formula "20") (term "1,1") (ifseqformula "18"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                        (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "20") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "limit_Tree_footprint" (formula "2") (term "2"))
                        (rule "limit_Tree_footprint" (formula "17") (term "1"))
                        (rule "limit_java_lang_Object__inv_" (formula "14"))
                        (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "15")))
                        (rule "true_left" (formula "14"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "2"))
                        (rule "replace_known_left" (formula "2") (term "1") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")))
                        (rule "true_left" (formula "2"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "14") (inst "k=k") (inst "k_0=k_0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "andLeft" (formula "14"))
                        (rule "eqSymm" (formula "14") (term "0,0,0"))
                        (rule "disjointDefinition" (formula "20") (term "1"))
                        (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                        (rule "disjointDefinition" (formula "16") (term "1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "15"))
                        (rule "add_zero_right" (formula "15") (term "0"))
                        (rule "polySimp_mulComm0" (formula "15") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "16") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "16") (term "0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "16") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "15"))
                        (rule "polySimp_mulLiterals" (formula "15") (term "0"))
                        (rule "polySimp_elimOne" (formula "15") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "15") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "15") (term "0"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "closeFalse" (formula "15"))
                     )
                  )
                  (branch "CUT: self.right = null FALSE"
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "replace_known_right" (formula "26") (term "0,1,1,1,0,1,1,1,0,2") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
                     (rule "replace_known_right" (formula "3") (term "0,2,0,1") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "15"))
                     (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "elementOfSingleton" (formula "3") (term "0,1"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "20"))
                     (rule "associativeLawUnion" (formula "26") (term "1,1,0,2"))
                     (rule "associativeLawUnion" (formula "26") (term "1,1,0,1,1,0,2"))
                     (rule "associativeLawUnion" (formula "26") (term "0,1,1,0,1,1,0,2"))
                     (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "1"))
                     (rule "cut_direct" (formula "1") (term "0"))
                     (branch "CUT: ov_0 = null TRUE"
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "applyEqRigid" (formula "27") (term "0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "22") (term "0") (ifseqformula "1"))
                        (rule "applyEq" (formula "2") (term "0") (ifseqformula "1"))
                        (rule "applyEqRigid" (formula "24") (term "0") (ifseqformula "1"))
                        (rule "eqSymm" (formula "24"))
                        (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "22"))
                        (rule "eqSymm" (formula "22"))
                        (rule "disjointNotInOtherLocset1" (formula "2") (ifseqformula "21"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "1,0") (ifseqformula "4"))
                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "3"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "onlyCreatedObjectsAreObservedInLocSetsEQ" (formula "3") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                         (builtin "Use Dependency Contract" (formula "28") (term "2") (ifInst ""  (formula "22") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                        (rule "wellFormedAnon" (formula "24") (term "1,1,0,0,0,0"))
                        (rule "replace_known_left" (formula "24") (term "0,1,0,0,0,0") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "28")) (ifInst ""  (formula "4")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "15")))
                        (rule "disjointDefinition" (formula "24") (term "0,0"))
                        (rule "measuredByCheck" (formula "24") (term "1,0") (ifseqformula "10"))
                        (rule "precOfInt" (formula "24") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0"))
                        (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "22"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,0"))
                        (rule "replace_known_left" (formula "24") (term "1,1,0") (ifseqformula "12"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "24") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "limit_Tree_footprint" (formula "28") (term "0,1,0,1,1,0,2"))
                        (rule "limit_Tree_footprint" (formula "23") (term "1,0"))
                        (rule "limit_java_lang_Object__inv_" (formula "15"))
                        (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "16"))
                         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "14")))
                        (rule "true_left" (formula "15"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "3"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "true_left" (formula "3"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "15") (inst "k=k") (inst "k_0=k_0") (ifseqformula "27"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "eqSymm" (formula "15") (term "0,0,0"))
                        (rule "disjointDefinition" (formula "21") (term "1"))
                        (rule "disjointDefinition" (formula "18") (term "1,0,1"))
                        (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16"))
                        (rule "add_zero_right" (formula "16") (term "0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0"))
                        (rule "inEqSimp_contradInEq0" (formula "16") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "16") (term "0"))
                         (builtin "One Step Simplification" (formula "16"))
                        (rule "closeFalse" (formula "16"))
                     )
                     (branch "CUT: ov_0 = null FALSE"
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "3") (term "1,0") (ifseqformula "4"))
                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "28"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0") (ifseqformula "5"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "26"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreObservedInLocSetsEQ" (formula "3") (ifseqformula "22"))
                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
                        (rule "true_left" (formula "3"))
                         (builtin "Use Dependency Contract" (formula "30") (term "2") (ifInst ""  (formula "22") (term "0")) (contract "Tree[Tree::footprint()].JML accessible clause.0"))
                        (rule "wellFormedAnon" (formula "24") (term "1,1,0,0,0,0"))
                        (rule "replace_known_left" (formula "24") (term "1,0,0,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "30")) (ifInst ""  (formula "4")) (ifInst ""  (formula "6")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")))
                        (rule "disjointDefinition" (formula "24") (term "0,0"))
                        (rule "measuredByCheck" (formula "24") (term "1,0") (ifseqformula "10"))
                        (rule "precOfInt" (formula "24") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "24") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "24") (term "0,1,0"))
                        (rule "applyEq" (formula "24") (term "1,1") (ifseqformula "22"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "24") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "24") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "24") (term "1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "24") (term "1,1,1,1,0"))
                        (rule "mul_literals" (formula "24") (term "0,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "24") (term "1,1,1,1,0"))
                        (rule "replace_known_left" (formula "24") (term "1,1,0") (ifseqformula "12"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "inEqSimp_contradInEq0" (formula "24") (term "1,0") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "24") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "24"))
                        (rule "true_left" (formula "24"))
                        (rule "limit_Tree_footprint" (formula "13") (term "1,0"))
                        (rule "limit_Tree_footprint" (formula "25") (term "2"))
                        (rule "limit_java_lang_Object__inv_" (formula "15"))
                        (rule "replace_known_left" (formula "15") (term "0") (ifseqformula "14"))
                         (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "16")))
                        (rule "true_left" (formula "15"))
                        (rule "onlyCreatedObjectsAreObservedInLocSets" (formula "3"))
                        (rule "replace_known_right" (formula "3") (term "0") (ifseqformula "25"))
                         (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")))
                        (rule "true_left" (formula "3"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "15") (inst "k=k") (inst "k_0=k_0") (ifseqformula "29"))
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "andLeft" (formula "15"))
                        (rule "eqSymm" (formula "15") (term "0,0,0"))
                        (rule "disjointDefinition" (formula "21") (term "1"))
                        (rule "disjointDefinition" (formula "18") (term "1,0,1"))
                        (rule "disjointDefinition" (formula "17") (term "1,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "18") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,0,0,1"))
                        (rule "inEqSimp_ltToLeq" (formula "16"))
                        (rule "add_zero_right" (formula "16") (term "0"))
                        (rule "polySimp_mulComm0" (formula "16") (term "1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "18") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "18") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "18") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "18") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "0,0,1"))
                        (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1"))
                        (rule "polySimp_rightDist" (formula "17") (term "1,0,0,1"))
                        (rule "mul_literals" (formula "17") (term "0,1,0,0,1"))
                        (rule "polySimp_mulLiterals" (formula "17") (term "1,1,0,0,1"))
                        (rule "polySimp_elimOne" (formula "17") (term "1,1,0,0,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "16"))
                        (rule "polySimp_mulLiterals" (formula "16") (term "0"))
                        (rule "polySimp_elimOne" (formula "16") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "5") (ifseqformula "16"))
                        (rule "qeq_literals" (formula "5") (term "0"))
                         (builtin "One Step Simplification" (formula "5"))
                        (rule "closeFalse" (formula "5"))
                     )
                  )
               )
            )
         )
         (branch "Case 2"
            (rule "close" (formula "10") (ifseqformula "8"))
         )
      )
   )
   (branch "Assume self.left != self.left@heap[anon( allLocs ∖ self.* ∪ if (self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if (self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ if (self.left = null) then (∅) else ({(self.left, Tree::$isRed)}) ∪ if (self.right = null) then (∅) else ({(self.right, Tree::$isRed)}) ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)]"
      (rule "notLeft" (formula "1"))
      (rule "eqSymm" (formula "7"))
      (rule "setMinusOfUnion" (formula "8") (term "1,1,0,1,2,0"))
      (rule "setMinusOfUnion" (formula "8") (term "1,1,0,2,0"))
      (rule "setMinusOfUnion" (formula "8") (term "1,1,0,0,0,0"))
      (rule "setMinusOfUnion" (formula "7") (term "1,1,0,0"))
      (rule "setMinusOfUnion" (formula "8") (term "1,1,1,0,1,2,0"))
      (rule "setMinusOfUnion" (formula "8") (term "1,1,1,0,2,0"))
      (rule "setMinusOfUnion" (formula "8") (term "1,1,1,0,0,0,0"))
      (rule "setMinusOfUnion" (formula "7") (term "1,1,1,0,0"))
      (rule "pullOutSelect" (formula "8") (term "1,2,0") (inst "selectSK=Tree_left_0"))
      (rule "applyEq" (formula "9") (term "0,0,0") (ifseqformula "1"))
      (rule "applyEq" (formula "8") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "4")))
      (rule "eqSymm" (formula "8"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfUnion" (formula "1") (term "1,0,0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "1,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,1,1,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,1,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,1,0,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "commuteUnion_2" (formula "9") (term "1,0,1,1,0,2,0"))
      (rule "commuteUnion" (formula "9") (term "1,1,1,1,1,0,2,0"))
      (rule "commuteUnion" (formula "9") (term "1,0,1,1,1,0,2,0"))
      (rule "commuteUnion_2" (formula "9") (term "0,1,0,1,1,0,2,0"))
      (rule "commuteUnion" (formula "9") (term "0,0,1,0,1,1,0,2,0"))
      (rule "limit_java_lang_Object__inv_" (formula "7"))
      (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "ifthenelse_split" (formula "10") (term "0,0,1,1,1,0,2,0"))
      (branch "self.left = null TRUE"
          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
         (rule "orRight" (formula "11"))
         (rule "replace_known_left" (formula "2") (term "0,2,0,0,0,0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
         (rule "applyEq" (formula "10") (term "0") (ifseqformula "1"))
         (rule "eqSymm" (formula "10"))
         (rule "applyEq" (formula "2") (term "1,0") (ifseqformula "1"))
         (rule "cnf_rightDist" (formula "2") (term "0,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "commute_and" (formula "2") (term "0,0"))
         (rule "equalityToElementOfRight" (formula "11") (inst "fv=fv") (inst "ov=ov"))
          (builtin "One Step Simplification" (formula "11"))
         (rule "allRight" (formula "11") (inst "sk=ov_0"))
         (rule "allRight" (formula "11") (inst "sk=fv_0"))
         (rule "notRight" (formula "11"))
         (rule "associativeLawUnion" (formula "1") (term "1,1,1,1,0,2"))
         (rule "ifthenelse_split" (formula "3") (term "2,1,1,0,0"))
         (branch "self.right = null TRUE"
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
            (rule "applyEqReverse" (formula "1") (term "1,2") (ifseqformula "4"))
            (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "closeTrue" (formula "12"))
         )
         (branch "self.right = null FALSE"
            (rule "replace_known_right" (formula "1") (term "0,1,1,1,1,1,0,2") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "11")) (ifInst ""  (formula "11")))
            (rule "replace_known_right" (formula "3") (term "0,2,0,0,1,0,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "11")))
            (rule "elementOfSingleton" (formula "3") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "elementOfSingleton" (formula "3") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "applyEqReverse" (formula "1") (term "1,2") (ifseqformula "3"))
            (rule "applyEqReverse" (formula "12") (term "0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "12"))
            (rule "closeTrue" (formula "12"))
         )
      )
      (branch "self.left = null FALSE"
         (rule "replace_known_right" (formula "1") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
         (rule "replace_known_right" (formula "11") (term "0,1,0,1,0,1,1,0,2,0") (ifseqformula "10"))
          (builtin "One Step Simplification" (formula "11") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
         (rule "elementOfSingleton" (formula "1") (term "0,0,1,1,1,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,1,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "commute_and" (formula "1") (term "1,1,0,0"))
         (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
         (rule "commute_or" (formula "1") (term "0,1,0,0"))
         (rule "cnf_rightDist" (formula "1") (term "1,1,0,0"))
         (rule "commute_or" (formula "1") (term "0,1,1,0,0"))
         (rule "cnf_rightDist" (formula "1") (term "0,1,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "cnf_rightDist" (formula "1") (term "0,0"))
         (rule "commute_or" (formula "1") (term "1,0,0"))
         (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
         (rule "cnf_rightDist" (formula "1") (term "1,0,0"))
         (rule "commute_or_2" (formula "1") (term "1,1,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "shift_paren_or" (formula "1") (term "0,1,0,0"))
         (rule "commute_or" (formula "1") (term "0,0,1,0,0"))
         (rule "cnf_rightDist" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "shift_paren_or" (formula "1") (term "0,0,0,0"))
         (rule "commute_and" (formula "1") (term "0,0,0"))
         (rule "commute_or" (formula "1") (term "0,1,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "equalityToElementOfRight" (formula "11") (inst "fv=fv") (inst "ov=ov"))
         (rule "allRight" (formula "11") (inst "sk=ov_0"))
         (rule "allRight" (formula "11") (inst "sk=fv_0"))
         (rule "equiv_right" (formula "11"))
         (branch "Case '->'"
            (rule "shift_paren_and" (formula "2") (term "0,0"))
            (rule "ifthenelse_split" (formula "2") (term "2,1,1,0,0"))
            (branch "self.right = null TRUE"
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "11")))
               (rule "closeFalse" (formula "3"))
            )
            (branch "self.right = null FALSE"
               (rule "replace_known_right" (formula "1") (term "0,1,1,0,1,1,0,2,2") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
               (rule "replace_known_right" (formula "2") (term "0,2,0,1,0,1,0,0,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")) (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
               (rule "elementOfSingleton" (formula "2") (term "0,0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,1,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "2") (term "0,1,0,1,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "2") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "11")))
               (rule "closeFalse" (formula "2"))
            )
         )
         (branch "Case '<-'"
            (rule "shift_paren_and" (formula "2") (term "0,0"))
            (rule "ifthenelse_split" (formula "2") (term "2,1,1,0,0"))
            (branch "self.right = null TRUE"
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "11")))
               (rule "closeFalse" (formula "3"))
            )
            (branch "self.right = null FALSE"
               (rule "replace_known_right" (formula "13") (term "0,0,1,1,1,1,0,2,2") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
               (rule "replace_known_right" (formula "2") (term "0,2,0,0,0,0,0,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")) (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
               (rule "elementOfSingleton" (formula "2") (term "0,1,0,1,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,1,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "2") (term "0,1,0,0"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "11")))
               (rule "closeFalse" (formula "2"))
            )
         )
      )
   )
)
)
}
