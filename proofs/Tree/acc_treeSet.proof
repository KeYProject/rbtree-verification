\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 08 01:30:22 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=100000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\include "../../iSet.key";

\proofObligation "#Proof Obligation Settings
#Fri Sep 08 01:30:22 CEST 2023
contract=Tree[Tree\\:\\:treeSet()].JML accessible clause.0
name=Tree[Tree\\:\\:treeSet()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "johanna" ) (keyVersion "167932a84464f61ce5aea5172abb98fb7bad2121"))
(keyLog "1" (keyUser "johanna" ) (keyVersion "4d5d8c5cb0b36bcbdc74ead5888a2f6bbedfe5ef"))

(autoModeTime "182335")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "self,anon_heap"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "Definition_axiom_for_footprint_in_Tree" (formula "8") (term "0,1,1,0,1") (ifseqformula "7") (userinteraction))
(rule "Definition_axiom_for_treeSet_in_Tree" (formula "8") (term "1") (ifseqformula "7") (userinteraction))
(rule "Definition_axiom_for_treeSet_in_Tree" (formula "8") (term "0") (ifseqformula "7") (userinteraction))
(rule "hide_left" (formula "6") (userinteraction))
(rule "insert_hidden_taclet_0" (userinteraction))
(rule "Class_invariant_axiom_for_Tree" (formula "1") (inst "k_0=k_0") (inst "k=k") (ifseqformula "7") (userinteraction))
(rule "eqTermCut" (formula "8") (term "0,0,0,1") (inst "s=Tree::select(heap, self, Tree::$left)") (userinteraction))
(branch "Assume self.left@heap[anon( allLocs ∖ self.* ∪ if (self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if (self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ if (self.left = null) then (∅) else ({(self.left, Tree::$isRed)}) ∪ if (self.right = null) then (∅) else ({(self.right, Tree::$isRed)}) ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] = self.left"
   (rule "applyEq" (formula "9") (term "0,0,0,1") (ifseqformula "1") (userinteraction))
   (rule "applyEq" (formula "9") (term "1,2,0,1") (ifseqformula "1") (userinteraction))
   (rule "eqTermCut" (formula "9") (term "0,0,1,1,0") (inst "s=Tree::select(anon(heap,
                  setMinus(allLocs,
                           setMinus(union(allFields(self),
                                          union(\\if (  Tree::select(heap,
                                                                    self,
                                                                    Tree::$left)
                                                     = null)
                                                    \\then (empty)
                                                    \\else (Tree::footprint$lmtd(heap,
                                                                                Tree::select(heap,
                                                                                             self,
                                                                                             Tree::$left))),
                                                \\if (  Tree::select(heap,
                                                                    self,
                                                                    Tree::$right)
                                                     = null)
                                                    \\then (empty)
                                                    \\else (Tree::footprint$lmtd(heap,
                                                                                Tree::select(heap,
                                                                                             self,
                                                                                             Tree::$right))))),
                                    union(union(union(singleton(self,
                                                                Tree::$isRed),
                                                      \\if (  Tree::select(heap,
                                                                          self,
                                                                          Tree::$left)
                                                           = null)
                                                          \\then (empty)
                                                          \\else (singleton(Tree::select(heap,
                                                                                        self,
                                                                                        Tree::$left),
                                                                           Tree::$isRed))),
                                                \\if (  Tree::select(heap,
                                                                    self,
                                                                    Tree::$right)
                                                     = null)
                                                    \\then (empty)
                                                    \\else (singleton(Tree::select(heap,
                                                                                  self,
                                                                                  Tree::$right),
                                                                     Tree::$isRed))),
                                          singleton(self,
                                                    Tree::$heightVariant)))),
                  anon_heap<<anonHeapFunction>>),
             self<<origin(\"accessible @ file Tree.java @ line 56\",\"[]\")>>,
             Tree::$right)") (userinteraction))
   (branch "Assume self.right = self.right@heap[anon( allLocs ∖ self.* ∪ if (self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if (self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ if (self.left = null) then (∅) else ({(self.left, Tree::$isRed)}) ∪ if (self.right = null) then (∅) else ({(self.right, Tree::$isRed)}) ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)]"
      (rule "applyEqReverse" (formula "10") (term "0,0,1,1,1") (ifseqformula "1") (userinteraction))
      (rule "applyEqReverse" (formula "10") (term "1,2,1,1,1") (ifseqformula "1") (userinteraction))
       (builtin "Use Dependency Contract" (formula "10") (term "2,0,1") (ifInst ""  (formula "10") (term "2,0,0")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
      (rule "impLeft" (formula "9") (userinteraction))
      (branch "Case 1"
         (rule "cut_direct" (formula "3") (term "1,0,1") (userinteraction))
         (branch "CUT: self.right = null TRUE"
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
            (rule "wellFormedAnon" (formula "10") (term "1,1,0,0,0"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "4"))
            (rule "andLeft" (formula "4"))
            (rule "eqSymm" (formula "15"))
            (rule "eqSymm" (formula "1"))
            (rule "replace_known_left" (formula "15") (term "0,1,1,0,1,1,0,2,1,1,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
            (rule "replace_known_left" (formula "2") (term "0,1,1,0,1,1,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
            (rule "replace_known_left" (formula "1") (term "0,1,1,0,1,1,0,0") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
            (rule "replace_known_left" (formula "13") (term "0,1,0,0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "8")) (ifInst ""  (formula "9")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
            (rule "disjointDefinition" (formula "5") (term "1,0,1"))
            (rule "disjointDefinition" (formula "13") (term "1,0"))
            (rule "measuredByCheck" (formula "13") (term "1") (ifseqformula "12"))
            (rule "precOfInt" (formula "13") (term "1"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "add_zero_right" (formula "4") (term "0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "13") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,0,0,1,1"))
            (rule "inEqSimp_commuteLeq" (formula "13") (term "0,1"))
            (rule "applyEq" (formula "1") (term "1") (ifseqformula "3"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "13") (term "1,1"))
            (rule "polySimp_mulComm0" (formula "13") (term "1,1,1"))
            (rule "polySimp_rightDist" (formula "13") (term "1,1,1"))
            (rule "mul_literals" (formula "13") (term "0,1,1,1"))
            (rule "polySimp_mulLiterals" (formula "13") (term "1,1,1,1"))
            (rule "polySimp_elimOne" (formula "13") (term "1,1,1,1"))
            (rule "setMinusOfUnion" (formula "15") (term "1,1,0,0,0,1,0"))
            (rule "setMinusOfUnion" (formula "15") (term "1,1,0,2,0,0"))
            (rule "setMinusOfUnion" (formula "2") (term "1,1,0,0"))
            (rule "setMinusOfUnion" (formula "1") (term "1,1,0,0"))
            (rule "setMinusOfUnion" (formula "13") (term "1,0,0,1,0"))
            (rule "pullOutSelect" (formula "15") (term "0,0,1,0") (inst "selectSK=Tree_key_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "11")))
            (rule "elementOfSetMinus" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSetMinus" (formula "1") (term "1,0,0"))
            (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "0,1,1,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "0,1,1,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,1,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "pullOutSelect" (formula "3") (term "0") (inst "selectSK=Tree_left_0"))
            (rule "simplifySelectOfAnon" (formula "3"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "16")) (ifInst ""  (formula "12")))
            (rule "eqSymm" (formula "4"))
            (rule "applyEqReverse" (formula "3") (term "1") (ifseqformula "4"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "hideAuxiliaryEq" (formula "4"))
            (rule "elementOfSetMinus" (formula "3") (term "0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "elementOfUnion" (formula "3") (term "0"))
            (rule "elementOfSetMinus" (formula "3") (term "1,0"))
            (rule "elementOfSetMinus" (formula "3") (term "0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "elementOfUnion" (formula "3") (term "0,1,1,0"))
            (rule "elementOfSingleton" (formula "3") (term "1,0,1,1,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "elementOfUnion" (formula "3") (term "0,1,1,0"))
            (rule "elementOfSingleton" (formula "3") (term "0,0,1,1,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "elementOfUnion" (formula "3") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "3") (term "1,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "elementOfUnion" (formula "3") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "3") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_right_0"))
            (rule "simplifySelectOfAnon" (formula "2"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "16")) (ifInst ""  (formula "12")))
            (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
            (rule "ifEqualsNull" (formula "2"))
            (rule "replace_known_left" (formula "2") (term "1,1") (ifseqformula "5"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfSetMinus" (formula "2") (term "0,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfSetMinus" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "1"))
            (rule "elementOfUnion" (formula "2") (term "0,0,0"))
            (rule "elementOfSetMinus" (formula "2") (term "0,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfSetMinus" (formula "2") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,0,1"))
            (rule "elementOfSingleton" (formula "2") (term "1,0,0,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,0,1"))
            (rule "elementOfSingleton" (formula "2") (term "0,0,0,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfSetMinus" (formula "2") (term "1,1"))
            (rule "elementOfSetMinus" (formula "2") (term "1,0,0,0"))
            (rule "elementOfUnion" (formula "2") (term "0,0,0,0,0"))
            (rule "elementOfSingleton" (formula "2") (term "1,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,1,1,1"))
            (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,1,1,0,0,0"))
            (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,1,1,0,0,0"))
            (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,1,1,1"))
            (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,1"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,0,0,0,0"))
            (rule "elementOfSingleton" (formula "2") (term "0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "commuteUnion" (formula "15") (term "1,1,0,1,0"))
            (rule "commuteUnion" (formula "17") (term "1,0,1,1,0,2,0,0"))
            (rule "commuteUnion_2" (formula "17") (term "1,1,1,1,0,2,0,0"))
            (rule "commuteUnion" (formula "15") (term "1,1,1,0,0,1,0"))
            (rule "commuteUnion_2" (formula "15") (term "1,0,1,0,0,1,0"))
            (rule "commuteUnion" (formula "17") (term "0,1,1,1,1,0,2,0,0"))
            (rule "commuteUnion" (formula "15") (term "0,1,0,1,0,0,1,0"))
            (rule "limit_java_lang_Object__inv_" (formula "15") (term "1,0,0"))
            (rule "limit_Tree_footprint" (formula "8") (term "1,0,1,0,1"))
            (rule "applyEq" (formula "17") (term "2,0,1,1,0,0,1,0") (ifseqformula "8"))
            (rule "applyEq" (formula "19") (term "2,0,1,1,1,0,2,0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "3") (term "2,2,0,1,0,0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "2") (term "2,2,0,1,0,0") (ifseqformula "8"))
            (rule "applyEq" (formula "3") (term "2,2,0,1,1") (ifseqformula "8"))
            (rule "applyEq" (formula "5") (term "2,2,0,1,0") (ifseqformula "8"))
            (rule "cnf_rightDist" (formula "9"))
            (rule "andLeft" (formula "9"))
            (rule "commute_or_2" (formula "5"))
            (rule "commute_or" (formula "10"))
            (rule "ifthenelse_split" (formula "20") (term "0,1"))
            (branch "self.left = null TRUE"
               (rule "replace_known_left" (formula "21") (term "0,1,1,1,1,1,0,2,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
               (rule "eqSymm" (formula "21"))
               (rule "replace_known_left" (formula "3") (term "0,2,0,1,0,0") (ifseqformula "1"))
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
               (rule "applyEqReverse" (formula "21") (term "0,0,1,1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "closeTrue" (formula "21"))
            )
            (branch "self.left = null FALSE"
               (rule "replace_known_right" (formula "21") (term "0,0,0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
               (rule "replace_known_right" (formula "2") (term "0,2,0,1,0,0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
               (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "9"))
               (rule "andLeft" (formula "9"))
               (rule "disjointAllFields" (formula "2") (term "0,1,0,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "11"))
               (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "replace_known_right" (formula "5") (term "0,2,0,1") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
               (rule "disjointAllFields" (formula "5") (term "0,1") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "replace_known_right" (formula "3") (term "0,2,0,1,1") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
               (rule "disjointAllFields" (formula "3") (term "0,1,1") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "disjointAllFields" (formula "3") (term "0,1,0,0,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_right" (formula "19") (term "0,0,0,0,0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "9")))
               (rule "ifthenelse_negated" (formula "2") (term "0"))
               (rule "elementOfSingleton" (formula "5") (term "0,0"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "elementOfSingleton" (formula "3") (term "0,1"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "true_left" (formula "3"))
               (rule "elementOfSingleton" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "applyEqReverse" (formula "20") (term "0,0,1,0") (ifseqformula "2"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "associativeLawUnion" (formula "16") (term "1,1,0,1,0"))
               (rule "associativeLawUnion" (formula "19") (term "1,0,1,1,0,0,0"))
               (rule "associativeLawUnion" (formula "16") (term "0,1,1,0,1,0"))
               (rule "associativeLawUnion" (formula "16") (term "1,1,1,0,0,1,0"))
               (rule "ifthenelse_split" (formula "16") (term "1,1,1,0,1,0"))
               (branch "self.left.right = null TRUE"
                   (builtin "One Step Simplification" (formula "17"))
                  (rule "ifthenelse_split" (formula "17") (term "1,1,1,0,1,0"))
                  (branch "self.left.left = null TRUE"
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "0") (ifseqformula "13"))
                     (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "5"))
                     (rule "true_left" (formula "5"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1") (ifseqformula "13"))
                     (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0") (ifseqformula "14"))
                     (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "14"))
                     (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "cut_direct" (formula "19") (term "1"))
                     (branch "CUT: self.left.heightVariant ≥ 0 TRUE"
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "9"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "allRight" (formula "20") (inst "sk=ov_0"))
                        (rule "allRight" (formula "20") (inst "sk=fv_0"))
                        (rule "notRight" (formula "20"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "notLeft" (formula "3"))
                        (rule "elementOfSetMinus" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elementOfUnion" (formula "22"))
                        (rule "orRight" (formula "22"))
                        (rule "elementOfSingleton" (formula "22"))
                        (rule "elementOfSingleton" (formula "23"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "11"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "elementOfUnion" (formula "22"))
                        (rule "orRight" (formula "22"))
                        (rule "elementOfSetMinus" (formula "23"))
                        (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "notRight" (formula "23"))
                        (rule "elementOfSetMinus" (formula "23"))
                         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")) (ifInst ""  (formula "22")))
                        (rule "false_right" (formula "23"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "close" (formula "23") (ifseqformula "1"))
                     )
                     (branch "CUT: self.left.heightVariant ≥ 0 FALSE"
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "false_right" (formula "20"))
                        (rule "inEqSimp_geqRight" (formula "19"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                         (builtin "Use Dependency Contract" (formula "22") (term "0,0") (ifInst ""  (formula "22") (term "0,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
                        (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                        (rule "replace_known_left" (formula "20") (term "0,1,0,1,1,1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")) (ifInst ""  (formula "11")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "4")) (ifInst ""  (formula "2")))
                        (rule "disjointDefinition" (formula "20") (term "0,0"))
                        (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "19"))
                        (rule "precOfInt" (formula "20") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                        (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "20") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "limit_Tree_footprint" (formula "8") (term "1"))
                        (rule "limit_java_lang_Object__inv_" (formula "4"))
                        (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "13")))
                        (rule "true_left" (formula "4"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "4") (inst "k=k") (inst "k_0=k_0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "inEqSimp_ltToLeq" (formula "4"))
                        (rule "add_zero_right" (formula "4") (term "0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "1") (term "0"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "closeFalse" (formula "1"))
                     )
                  )
                  (branch "self.left.left = null FALSE"
                     (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "12"))
                     (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "cut_direct" (formula "18") (term "1"))
                     (branch "CUT: self.left.heightVariant ≥ 0 TRUE"
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "8"))
                        (rule "mul_literals" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1") (ifseqformula "13"))
                        (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "allRight" (formula "20") (inst "sk=ov_0"))
                        (rule "allRight" (formula "20") (inst "sk=fv_0"))
                        (rule "notRight" (formula "20"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "notLeft" (formula "3"))
                        (rule "elementOfSetMinus" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elementOfUnion" (formula "21"))
                        (rule "orRight" (formula "21"))
                        (rule "elementOfSingleton" (formula "22"))
                        (rule "elementOfUnion" (formula "20"))
                        (rule "orRight" (formula "20"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "elementOfUnion" (formula "23"))
                        (rule "orRight" (formula "23"))
                        (rule "elementOfSingleton" (formula "24"))
                        (rule "elementOfSingleton" (formula "23"))
                        (rule "elementOfSetMinus" (formula "21"))
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "20")))
                        (rule "false_right" (formula "21"))
                        (rule "elementOfSetMinus" (formula "21"))
                        (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "notRight" (formula "21"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "close" (formula "22") (ifseqformula "1"))
                     )
                     (branch "CUT: self.left.heightVariant ≥ 0 FALSE"
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "false_right" (formula "19"))
                        (rule "inEqSimp_geqRight" (formula "18"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1") (ifseqformula "13"))
                        (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "10"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0") (ifseqformula "14"))
                        (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "true_left" (formula "2"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "14"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "1"))
                         (builtin "Use Dependency Contract" (formula "23") (term "0,0") (ifInst ""  (formula "23") (term "0,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
                        (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                        (rule "replace_known_left" (formula "20") (term "0,1,0,1,1,1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")) (ifInst ""  (formula "11")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "4")) (ifInst ""  (formula "21")))
                        (rule "disjointDefinition" (formula "20") (term "0,0"))
                        (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "19"))
                        (rule "precOfInt" (formula "20") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                        (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "20") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "limit_Tree_footprint" (formula "23") (term "0,1,1,1,0,0,0"))
                        (rule "limit_java_lang_Object__inv_" (formula "4"))
                        (rule "replace_known_left" (formula "4") (term "1") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "13")))
                        (rule "true_left" (formula "4"))
                         (builtin "Use Dependency Contract" (formula "23") (term "0,0") (ifInst ""  (formula "23") (term "0,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
                        (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                        (rule "replace_known_left" (formula "20") (term "0,1,0,0,0,0") (ifseqformula "15"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")) (ifInst ""  (formula "11")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "4")) (ifInst ""  (formula "21")) (ifInst ""  (formula "3")))
                        (rule "disjointDefinition" (formula "20") (term "0,0"))
                        (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "19"))
                        (rule "precOfInt" (formula "20") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                        (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "2"))
                        (rule "qeq_literals" (formula "20") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "4") (inst "k=k") (inst "k_0=k_0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "21")) (ifInst ""  (formula "3")) (ifInst ""  (formula "21")) (ifInst ""  (formula "3")) (ifInst ""  (formula "21")) (ifInst ""  (formula "3")))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "disjointDefinition" (formula "6"))
                        (rule "inEqSimp_ltToLeq" (formula "4"))
                        (rule "add_zero_right" (formula "4") (term "0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "4"))
                        (rule "qeq_literals" (formula "2") (term "0"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "closeFalse" (formula "2"))
                     )
                  )
               )
               (branch "self.left.right = null FALSE"
                  (rule "commuteUnion_2" (formula "17") (term "1,1,0,1,0"))
                  (rule "ifthenelse_split" (formula "17") (term "1,1,1,0,1,0"))
                  (branch "self.left.left = null TRUE"
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "12"))
                     (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "1,1,0") (ifseqformula "12"))
                     (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "replace_known_left" (formula "19") (term "0,0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "13"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "19"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "0") (ifseqformula "14"))
                     (rule "replace_known_left" (formula "2") (term "0") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "cut_direct" (formula "20") (term "1"))
                     (branch "CUT: self.left.heightVariant ≥ 0 TRUE"
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "9"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "equalityToElementOfRight" (formula "21") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "allRight" (formula "21") (inst "sk=ov_0"))
                        (rule "allRight" (formula "21") (inst "sk=fv_0"))
                        (rule "notRight" (formula "21"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "notLeft" (formula "3"))
                        (rule "elementOfSetMinus" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elementOfUnion" (formula "22"))
                        (rule "orRight" (formula "22"))
                        (rule "elementOfSingleton" (formula "23"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "12"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "elementOfUnion" (formula "22"))
                        (rule "orRight" (formula "22"))
                        (rule "elementOfUnion" (formula "24"))
                        (rule "orRight" (formula "24"))
                        (rule "elementOfSingleton" (formula "25"))
                        (rule "elementOfSingleton" (formula "24"))
                        (rule "elementOfSetMinus" (formula "23"))
                        (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "23"))
                        (rule "notRight" (formula "23"))
                        (rule "elementOfSetMinus" (formula "23"))
                         (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "1")) (ifInst ""  (formula "22")))
                        (rule "false_right" (formula "23"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "24"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "close" (formula "23") (ifseqformula "1"))
                     )
                     (branch "CUT: self.left.heightVariant ≥ 0 FALSE"
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "false_right" (formula "21"))
                        (rule "inEqSimp_geqRight" (formula "20"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_zero_right" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                         (builtin "Use Dependency Contract" (formula "23") (term "0,0") (ifInst ""  (formula "23") (term "0,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
                        (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                        (rule "replace_known_left" (formula "20") (term "0,1,0,0,1,1,1,0,0") (ifseqformula "3"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")) (ifInst ""  (formula "10")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "4")) (ifInst ""  (formula "21")))
                        (rule "disjointDefinition" (formula "20") (term "0,0"))
                        (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "19"))
                        (rule "precOfInt" (formula "20") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                        (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "9"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "20") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "limit_Tree_footprint" (formula "11") (term "1,0"))
                        (rule "limit_java_lang_Object__inv_" (formula "4"))
                        (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "13"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "5")))
                        (rule "true_left" (formula "4"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "4") (inst "k=k") (inst "k_0=k_0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")) (ifInst ""  (formula "21")) (ifInst ""  (formula "3")) (ifInst ""  (formula "21")) (ifInst ""  (formula "3")) (ifInst ""  (formula "21")))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "4"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "disjointDefinition" (formula "6"))
                        (rule "inEqSimp_ltToLeq" (formula "4"))
                        (rule "add_zero_right" (formula "4") (term "0"))
                        (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                        (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                        (rule "polySimp_elimOne" (formula "4") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1"))
                        (rule "polySimp_rightDist" (formula "5") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                        (rule "mul_literals" (formula "5") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                        (rule "inEqSimp_contradInEq0" (formula "4") (ifseqformula "1"))
                        (rule "qeq_literals" (formula "4") (term "0"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "closeFalse" (formula "4"))
                     )
                  )
                  (branch "self.left.left = null FALSE"
                     (rule "commuteUnion_2" (formula "18") (term "1,1,0,1,0"))
                     (rule "cut_direct" (formula "18") (term "1"))
                     (branch "CUT: self.left.heightVariant ≥ 0 TRUE"
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "inEqSimp_exactShadow3" (formula "1") (ifseqformula "7"))
                        (rule "times_zero_1" (formula "1") (term "0,0"))
                        (rule "add_zero_left" (formula "1") (term "0"))
                        (rule "inEqSimp_sepPosMonomial1" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "12"))
                        (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "1") (ifseqformula "12"))
                        (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "2"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "allRight" (formula "20") (inst "sk=ov_0"))
                        (rule "allRight" (formula "20") (inst "sk=fv_0"))
                        (rule "notRight" (formula "20"))
                        (rule "elementOfIntersect" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "elementOfSetMinus" (formula "2"))
                        (rule "andLeft" (formula "2"))
                        (rule "notLeft" (formula "3"))
                        (rule "elementOfSetMinus" (formula "1"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "notLeft" (formula "1"))
                        (rule "elementOfUnion" (formula "20"))
                        (rule "orRight" (formula "20"))
                        (rule "elementOfSingleton" (formula "21"))
                        (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "elementOfUnion" (formula "20"))
                        (rule "orRight" (formula "20"))
                        (rule "elementOfUnion" (formula "22"))
                        (rule "orRight" (formula "22"))
                        (rule "elementOfSingleton" (formula "23"))
                        (rule "elementOfSetMinus" (formula "21"))
                        (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "1"))
                         (builtin "One Step Simplification" (formula "21"))
                        (rule "notRight" (formula "21"))
                        (rule "elementOfSetMinus" (formula "21"))
                         (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")) (ifInst ""  (formula "20")))
                        (rule "false_right" (formula "21"))
                        (rule "elementOfUnion" (formula "21"))
                        (rule "orRight" (formula "21"))
                        (rule "elementOfSingleton" (formula "21"))
                        (rule "elementOfSingleton" (formula "22"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "1"))
                        (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "22"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfUnion" (formula "1"))
                        (rule "elementOfSingleton" (formula "1") (term "0"))
                        (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "elementOfSingleton" (formula "1"))
                        (rule "andLeft" (formula "1"))
                        (rule "close" (formula "21") (ifseqformula "1"))
                     )
                     (branch "CUT: self.left.heightVariant ≥ 0 FALSE"
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "false_right" (formula "19"))
                        (rule "inEqSimp_geqRight" (formula "18"))
                        (rule "times_zero_1" (formula "1") (term "1,0,0"))
                        (rule "add_literals" (formula "1") (term "0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                        (rule "mul_literals" (formula "1") (term "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "12"))
                        (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                         (builtin "One Step Simplification" (formula "4"))
                        (rule "true_left" (formula "4"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "2") (term "1") (ifseqformula "12"))
                        (rule "replace_known_right" (formula "2") (term "0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "2"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "13"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "1"))
                        (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "14"))
                        (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                         (builtin "One Step Simplification" (formula "1"))
                         (builtin "Use Dependency Contract" (formula "24") (term "0,0") (ifInst ""  (formula "24") (term "0,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
                        (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                        (rule "replace_known_right" (formula "20") (term "0,1,0,1,1,1,0,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "5")) (ifInst ""  (formula "22")))
                        (rule "disjointDefinition" (formula "20") (term "0,0"))
                        (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "19"))
                        (rule "precOfInt" (formula "20") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                        (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "20") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "limit_Tree_footprint" (formula "24") (term "0,1,1,1,0,0,0"))
                        (rule "limit_java_lang_Object__inv_" (formula "5"))
                        (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "6"))
                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "13")))
                        (rule "true_left" (formula "5"))
                         (builtin "Use Dependency Contract" (formula "24") (term "0,0") (ifInst ""  (formula "24") (term "0,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
                        (rule "wellFormedAnon" (formula "20") (term "1,1,0,0,0,0"))
                        (rule "replace_known_right" (formula "20") (term "0,1,0,1,1,1,0,0") (ifseqformula "21"))
                         (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "16")) (ifInst ""  (formula "5")) (ifInst ""  (formula "22")))
                        (rule "disjointDefinition" (formula "20") (term "0,0"))
                        (rule "measuredByCheck" (formula "20") (term "1,0") (ifseqformula "19"))
                        (rule "precOfInt" (formula "20") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,0,0,1,1,0"))
                        (rule "inEqSimp_commuteLeq" (formula "20") (term "0,1,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "20") (term "1,1,0"))
                        (rule "polySimp_mulComm0" (formula "20") (term "1,1,1,0"))
                        (rule "polySimp_rightDist" (formula "20") (term "1,1,1,0"))
                        (rule "polySimp_mulLiterals" (formula "20") (term "1,1,1,1,0"))
                        (rule "mul_literals" (formula "20") (term "0,1,1,1,0"))
                        (rule "polySimp_elimOne" (formula "20") (term "1,1,1,1,0"))
                        (rule "replace_known_left" (formula "20") (term "1,1,0") (ifseqformula "10"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "inEqSimp_contradInEq0" (formula "20") (term "1,0") (ifseqformula "3"))
                        (rule "qeq_literals" (formula "20") (term "0,1,0"))
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "true_left" (formula "20"))
                        (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "5") (inst "k=k") (inst "k_0=k_0") (ifseqformula "23"))
                         (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "6"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "7"))
                        (rule "andLeft" (formula "5"))
                        (rule "andLeft" (formula "7"))
                        (rule "notLeft" (formula "5"))
                        (rule "andLeft" (formula "6"))
                        (rule "eqSymm" (formula "30"))
                        (rule "disjointDefinition" (formula "14"))
                        (rule "disjointDefinition" (formula "10"))
                        (rule "disjointDefinition" (formula "7"))
                        (rule "inEqSimp_ltToLeq" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1,0,0"))
                        (rule "inEqSimp_ltToLeq" (formula "5"))
                        (rule "add_zero_right" (formula "5") (term "0"))
                        (rule "polySimp_mulComm0" (formula "5") (term "1,0"))
                        (rule "inEqSimp_ltToLeq" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "9"))
                        (rule "polySimp_mulComm0" (formula "9") (term "1"))
                        (rule "polySimp_rightDist" (formula "9") (term "1"))
                        (rule "mul_literals" (formula "9") (term "0,1"))
                        (rule "polySimp_mulLiterals" (formula "9") (term "1,1"))
                        (rule "polySimp_elimOne" (formula "9") (term "1,1"))
                        (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                        (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                        (rule "polySimp_elimOne" (formula "5") (term "0"))
                        (rule "inEqSimp_sepPosMonomial0" (formula "6"))
                        (rule "polySimp_mulComm0" (formula "6") (term "1"))
                        (rule "polySimp_rightDist" (formula "6") (term "1"))
                        (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
                        (rule "mul_literals" (formula "6") (term "0,1"))
                        (rule "polySimp_elimOne" (formula "6") (term "1,1"))
                        (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "5"))
                        (rule "qeq_literals" (formula "3") (term "0"))
                         (builtin "One Step Simplification" (formula "3"))
                        (rule "closeFalse" (formula "3"))
                     )
                  )
               )
            )
         )
         (branch "CUT: self.right = null FALSE"
            (rule "Definition_axiom_for_footprint_in_Tree" (formula "3") (term "1,1,1") (ifseqformula "9") (userinteraction))
            (rule "unlimit_java_lang_Object__inv_" (formula "3") (term "1,1,1,0,0,0,0") (userinteraction))
            (rule "andRight" (formula "10") (userinteraction))
            (branch "Case 1"
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "9")) (ifInst ""  (formula "9")))
               (rule "wellFormedAnon" (formula "10") (term "1,1,0,0"))
               (rule "andLeft" (formula "3"))
               (rule "andLeft" (formula "3"))
               (rule "andLeft" (formula "3"))
               (rule "andLeft" (formula "3"))
               (rule "andLeft" (formula "4"))
               (rule "andLeft" (formula "3"))
               (rule "andLeft" (formula "5"))
               (rule "andLeft" (formula "3"))
               (rule "eqSymm" (formula "20"))
               (rule "eqSymm" (formula "1"))
               (rule "eqSymm" (formula "3") (term "0,0"))
               (rule "replace_known_right" (formula "2") (term "0,1,0,1,1,1,0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "17")))
               (rule "replace_known_right" (formula "1") (term "0,1,1,0,1,1,0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")))
               (rule "replace_known_right" (formula "20") (term "0,1,0,1,1,1,0,2,0,0") (ifseqformula "17"))
                (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "17")) (ifInst ""  (formula "17")) (ifInst ""  (formula "17")) (ifInst ""  (formula "17")) (ifInst ""  (formula "17")) (ifInst ""  (formula "17")) (ifInst ""  (formula "17")))
               (rule "replace_known_left" (formula "18") (term "0,1,0,0") (ifseqformula "12"))
                (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "12")) (ifInst ""  (formula "13")) (ifInst ""  (formula "17")) (ifInst ""  (formula "17")))
               (rule "disjointDefinition" (formula "11") (term "1"))
               (rule "disjointDefinition" (formula "5") (term "1,0,1"))
               (rule "disjointDefinition" (formula "7"))
               (rule "disjointDefinition" (formula "18") (term "1"))
               (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1"))
               (rule "inEqSimp_ltToLeq" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
               (rule "inEqSimp_ltToLeq" (formula "4"))
               (rule "add_zero_right" (formula "4") (term "0"))
               (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
               (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,1"))
               (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
               (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
               (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1"))
               (rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
               (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1"))
               (rule "inEqSimp_sepPosMonomial0" (formula "6"))
               (rule "polySimp_mulComm0" (formula "6") (term "1"))
               (rule "polySimp_rightDist" (formula "6") (term "1"))
               (rule "polySimp_mulLiterals" (formula "6") (term "1,1"))
               (rule "mul_literals" (formula "6") (term "0,1"))
               (rule "polySimp_elimOne" (formula "6") (term "1,1"))
               (rule "inEqSimp_sepNegMonomial0" (formula "4"))
               (rule "polySimp_mulLiterals" (formula "4") (term "0"))
               (rule "polySimp_elimOne" (formula "4") (term "0"))
               (rule "setMinusOfUnion" (formula "2") (term "1,1,0,0"))
               (rule "setMinusOfUnion" (formula "1") (term "1,1,0,0"))
               (rule "setMinusOfUnion" (formula "20") (term "1,1,0,1,1,0"))
               (rule "setMinusOfUnion" (formula "20") (term "1,1,0,2,0,0"))
               (rule "setMinusOfUnion" (formula "20") (term "1,1,0,0,0,1,0"))
               (rule "distributeIntersection" (formula "11") (term "0,1"))
               (rule "setMinusOfUnion" (formula "18") (term "1,0,0,1"))
               (rule "setMinusOfUnion" (formula "2") (term "1,1,1,0,0"))
               (rule "setMinusOfUnion" (formula "1") (term "1,1,1,0,0"))
               (rule "setMinusOfUnion" (formula "20") (term "1,1,1,0,1,1,0"))
               (rule "setMinusOfUnion" (formula "20") (term "1,1,1,0,2,0,0"))
               (rule "setMinusOfUnion" (formula "20") (term "1,1,1,0,0,0,1,0"))
               (rule "distributeIntersection" (formula "11") (term "1,0,1"))
               (rule "setMinusOfUnion" (formula "18") (term "1,1,0,0,1"))
               (rule "unionEqualsEmpty" (formula "11") (term "1"))
               (rule "unionEqualsEmpty" (formula "11") (term "1,1"))
               (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_left_0"))
               (rule "simplifySelectOfAnon" (formula "2"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "20")) (ifInst ""  (formula "15")))
               (rule "eqSymm" (formula "3"))
               (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "hideAuxiliaryEq" (formula "3"))
               (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0"))
               (rule "elementOfUnion" (formula "2") (term "1,0"))
               (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSetMinus" (formula "2") (term "1,1,0"))
               (rule "elementOfSetMinus" (formula "2") (term "0,1,0"))
               (rule "elementOfUnion" (formula "2") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,1,0,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,1,0,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
               (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,1,0,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfUnion" (formula "2") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_right_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "15")))
               (rule "eqSymm" (formula "2"))
               (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "hideAuxiliaryEq" (formula "2"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0"))
               (rule "elementOfUnion" (formula "1") (term "1,0"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSetMinus" (formula "1") (term "1,1,0"))
               (rule "elementOfSetMinus" (formula "1") (term "0,1,0"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,1,1,1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,1,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "pullOutSelect" (formula "20") (term "0,0,1,0") (inst "selectSK=Tree_key_0"))
               (rule "simplifySelectOfAnon" (formula "1"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "15")))
               (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "ifthenelse_negated" (formula "1") (term "0"))
               (rule "elementOfUnion" (formula "1") (term "0,0"))
               (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "1,0,0"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSetMinus" (formula "1") (term "0,1,0,0"))
               (rule "elementOfSetMinus" (formula "1") (term "1,1,0,0"))
               (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,1,1,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "commuteUnion" (formula "19") (term "1,1,0,1"))
               (rule "commuteUnion_2" (formula "21") (term "1,0,1,1,0,1,1,0"))
               (rule "commuteUnion_2" (formula "21") (term "1,0,1,1,0,2,0,0"))
               (rule "commuteUnion_2" (formula "19") (term "1,0,1,0,0,1"))
               (rule "commuteUnion_2" (formula "21") (term "1,1,1,1,1,0,1,1,0"))
               (rule "commuteUnion_2" (formula "21") (term "1,0,1,1,1,0,1,1,0"))
               (rule "commuteUnion_2" (formula "21") (term "1,1,1,1,1,0,2,0,0"))
               (rule "commuteUnion" (formula "21") (term "1,0,1,1,1,0,2,0,0"))
               (rule "commuteUnion" (formula "19") (term "1,0,1,1,0,0,1"))
               (rule "commuteUnion" (formula "19") (term "1,1,1,1,0,0,1"))
               (rule "commuteIntersection" (formula "12") (term "0,0,1"))
               (rule "commuteUnion" (formula "21") (term "0,1,0,1,1,0,1,1,0"))
               (rule "commuteUnion_2" (formula "21") (term "0,1,0,1,1,0,2,0,0"))
               (rule "commuteUnion" (formula "19") (term "0,1,0,1,0,0,1"))
               (rule "commuteUnion" (formula "21") (term "0,1,1,1,1,1,0,1,1,0"))
               (rule "commuteUnion_2" (formula "21") (term "0,1,0,1,1,1,0,1,1,0"))
               (rule "commuteUnion" (formula "21") (term "0,1,1,1,1,1,0,2,0,0"))
               (rule "commuteUnion_2" (formula "21") (term "1,1,0,1,1,1,0,2,0,0"))
               (rule "commuteUnion_2" (formula "19") (term "1,1,0,1,1,0,0,1"))
               (rule "commuteUnion_2" (formula "19") (term "1,1,1,1,1,0,0,1"))
               (rule "commuteUnion_2" (formula "21") (term "1,0,1,1,0,2,0,0"))
               (rule "commuteUnion_2" (formula "21") (term "1,0,1,1,1,0,1,1,0"))
               (rule "commuteUnion" (formula "21") (term "1,1,1,0,2,0,0"))
               (rule "commuteUnion" (formula "19") (term "1,1,0,0,1"))
               (rule "commuteUnion" (formula "21") (term "0,0,1,0,1,1,0,2,0,0"))
               (rule "commuteUnion" (formula "21") (term "1,1,1,0,1,1,0"))
               (rule "commuteUnion" (formula "21") (term "0,0,1,1,1,1,1,0,1,1,0"))
               (rule "commute_or" (formula "4"))
               (rule "limit_java_lang_Object__inv_" (formula "6") (term "1,1"))
               (rule "limit_Tree_footprint" (formula "7") (term "1,0,1,0,1"))
               (rule "applyEq" (formula "23") (term "2,0,1,1,1,1,0,2,0,0") (ifseqformula "7"))
               (rule "applyEq" (formula "3") (term "2,2,0,0,1,0") (ifseqformula "7"))
               (rule "applyEq" (formula "21") (term "2,0,1,1,1,0,0,1") (ifseqformula "7"))
               (rule "applyEq" (formula "23") (term "2,0,1,1,1,1,0,1,1,0") (ifseqformula "7"))
               (rule "applyEq" (formula "2") (term "2,2,0,0,1,0") (ifseqformula "7"))
               (rule "applyEq" (formula "1") (term "2,2,0,0,1,0,0") (ifseqformula "7"))
               (rule "limit_Tree_footprint" (formula "10") (term "1,0"))
               (rule "applyEq" (formula "22") (term "0,0,1,1,0,0,1") (ifseqformula "10"))
               (rule "applyEq" (formula "24") (term "0,0,1,1,1,0,1,1,0") (ifseqformula "10"))
               (rule "applyEq" (formula "24") (term "0,0,1,1,1,0,2,0,0") (ifseqformula "10"))
               (rule "applyEq" (formula "1") (term "2,0,1,1,0,0") (ifseqformula "10"))
               (rule "disjointAllFields" (formula "1") (term "0,1,1,0,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "applyEq" (formula "2") (term "2,0,1,1,0") (ifseqformula "10"))
               (rule "disjointAllFields" (formula "2") (term "0,1,1,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "applyEq" (formula "3") (term "2,0,1,1,0") (ifseqformula "10"))
               (rule "disjointAllFields" (formula "3") (term "0,1,1,0") (ifseqformula "11"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "cnf_rightDist" (formula "8"))
               (rule "andLeft" (formula "8"))
               (rule "ifthenelse_split" (formula "25") (term "0,1"))
               (branch "self.left = null TRUE"
                  (rule "replace_known_left" (formula "26") (term "0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "replace_known_left" (formula "2") (term "0,2,0,0,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "applyEqReverse" (formula "26") (term "0,0,1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "true_left" (formula "16"))
                  (rule "replace_known_left" (formula "9") (term "1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "true_left" (formula "9"))
                  (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "true_left" (formula "8"))
                  (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "replace_known_left" (formula "2") (term "0,2,0,1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "true_left" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "0,2,0,1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "true_left" (formula "2"))
                  (rule "replace_known_left" (formula "17") (term "0,0,1,1,1,0,0,1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "false_right" (formula "17"))
                  (rule "applyEq" (formula "3") (term "1,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "1"))
                  (rule "applyEq" (formula "3") (term "1,0") (ifseqformula "1"))
                  (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "1"))
                  (rule "limit_java_lang_Object__inv_" (formula "3") (term "1"))
                  (rule "limit_Tree_footprint" (formula "4") (term "1"))
                  (rule "equiv_left" (formula "3"))
                  (branch "Case 1"
                     (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "1,1,0") (ifseqformula "12"))
                     (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "13"))
                     (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                      (builtin "Use Dependency Contract" (formula "20") (term "1,1,0") (ifInst ""  (formula "20") (term "1,1,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
                     (rule "wellFormedAnon" (formula "18") (term "1,1,0,0,0,0"))
                     (rule "replace_known_left" (formula "18") (term "0,1,1,0,0,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "19")) (ifInst ""  (formula "8")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                     (rule "disjointDefinition" (formula "18") (term "1,0,0"))
                     (rule "measuredByCheck" (formula "18") (term "1,0") (ifseqformula "17"))
                     (rule "precOfInt" (formula "18") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1,1,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1,1,0"))
                     (rule "replace_known_left" (formula "18") (term "1,1,0") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "commuteUnion" (formula "18") (term "1,1,0,1,0,0"))
                     (rule "limit_java_lang_Object__inv_" (formula "18") (term "0,0,0"))
                     (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "associativeLawUnion" (formula "19") (term "1,1,0,0,0"))
                     (rule "associativeLawUnion" (formula "19") (term "0,1,1,0,0,0"))
                     (rule "ifthenelse_split" (formula "19") (term "1,1,1,0,0,0"))
                     (branch "self.right.right = null TRUE"
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "ifthenelse_split" (formula "20") (term "1,1,1,0,0,0"))
                        (branch "self.right.left = null TRUE"
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "cut_direct" (formula "21") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "6"))
                              (rule "mul_literals" (formula "21") (term "0,0"))
                              (rule "add_zero_left" (formula "21") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                              (rule "mul_literals" (formula "21") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "13"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "13"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "cut_direct" (formula "22") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "closeTrue" (formula "25"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "equalityToElementOfRight" (formula "22") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "allRight" (formula "22") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "22") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "22"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfSingleton" (formula "23"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "elementOfSetMinus" (formula "25"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "elementOfSetMinus" (formula "26"))
                                 (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "notRight" (formula "26"))
                                 (rule "replace_known_left" (formula "26") (term "0,1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "false_right" (formula "26"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "11"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "25") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "inEqSimp_geqRight" (formula "21"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "14"))
                              (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "14"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "limit_java_lang_Object__inv_" (formula "5"))
                              (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "6"))
                               (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")))
                              (rule "true_left" (formula "5"))
                              (rule "limit_Tree_footprint" (formula "24") (term "0,1,1,1,0,1,1,0"))
                              (rule "limit_Tree_footprint" (formula "6") (term "1"))
                              (rule "limit_java_lang_Object__inv_" (formula "19"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "20")))
                              (rule "true_left" (formula "19"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "19") (inst "k=k") (inst "k_0=k_0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "inEqSimp_ltToLeq" (formula "19"))
                              (rule "add_zero_right" (formula "19") (term "0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                              (rule "polySimp_elimOne" (formula "19") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "19") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "19") (term "0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "closeFalse" (formula "19"))
                           )
                        )
                        (branch "self.right.left = null FALSE"
                           (rule "cut_direct" (formula "20") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "6"))
                              (rule "mul_literals" (formula "20") (term "0,0"))
                              (rule "add_zero_left" (formula "20") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                              (rule "mul_literals" (formula "20") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "13"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "cut_direct" (formula "22") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "closeTrue" (formula "26"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "equalityToElementOfRight" (formula "22") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "allRight" (formula "22") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "22") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "22"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "11"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "elementOfUnion" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "elementOfSingleton" (formula "26"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "23")))
                                 (rule "false_right" (formula "24"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                 (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "notRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "25") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "inEqSimp_geqRight" (formula "20"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "14"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "limit_java_lang_Object__inv_" (formula "20"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "21")))
                              (rule "true_left" (formula "20"))
                              (rule "limit_Tree_footprint" (formula "25") (term "0,1,1,1,0,1,1,0"))
                              (rule "limit_Tree_footprint" (formula "7") (term "1"))
                              (rule "limit_java_lang_Object__inv_" (formula "6"))
                              (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
                              (rule "true_left" (formula "6"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "20") (inst "k=k") (inst "k_0=k_0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "disjointDefinition" (formula "22"))
                              (rule "inEqSimp_ltToLeq" (formula "20"))
                              (rule "add_zero_right" (formula "20") (term "0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                              (rule "polySimp_elimOne" (formula "20") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1"))
                              (rule "polySimp_rightDist" (formula "21") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                              (rule "mul_literals" (formula "21") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                     )
                     (branch "self.right.right = null FALSE"
                        (rule "commuteUnion_2" (formula "19") (term "1,1,0,0,0"))
                        (rule "ifthenelse_split" (formula "19") (term "1,1,1,0,0,0"))
                        (branch "self.right.left = null TRUE"
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "cut_direct" (formula "20") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "6"))
                              (rule "mul_literals" (formula "20") (term "0,0"))
                              (rule "add_zero_left" (formula "20") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                              (rule "mul_literals" (formula "20") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "14"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "cut_direct" (formula "22") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "closeTrue" (formula "26"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "equalityToElementOfRight" (formula "22") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "allRight" (formula "22") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "22") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "22"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "11"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "elementOfUnion" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "elementOfSingleton" (formula "26"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "23")))
                                 (rule "false_right" (formula "24"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                 (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "notRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "25") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "inEqSimp_geqRight" (formula "20"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "15"))
                              (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "limit_java_lang_Object__inv_" (formula "20"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "21")))
                              (rule "true_left" (formula "20"))
                              (rule "limit_Tree_footprint" (formula "25") (term "0,1,1,1,0,1,1,0"))
                              (rule "limit_Tree_footprint" (formula "7") (term "1"))
                              (rule "limit_java_lang_Object__inv_" (formula "6"))
                              (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "7"))
                               (builtin "One Step Simplification" (formula "6") (ifInst ""  (formula "5")))
                              (rule "true_left" (formula "6"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "20") (inst "k=k") (inst "k_0=k_0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "disjointDefinition" (formula "22"))
                              (rule "inEqSimp_ltToLeq" (formula "20"))
                              (rule "add_zero_right" (formula "20") (term "0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                              (rule "polySimp_elimOne" (formula "20") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1"))
                              (rule "polySimp_rightDist" (formula "21") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                              (rule "mul_literals" (formula "21") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "2") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "2") (term "0"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "closeFalse" (formula "2"))
                           )
                        )
                        (branch "self.right.left = null FALSE"
                           (rule "commuteUnion_2" (formula "19") (term "1,1,0,0,0"))
                           (rule "cut_direct" (formula "19") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "6"))
                              (rule "mul_literals" (formula "19") (term "0,0"))
                              (rule "add_zero_left" (formula "19") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                              (rule "mul_literals" (formula "19") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0,1,0,1,1,0,0") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "21") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "cut_direct" (formula "22") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "closeTrue" (formula "27"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "equalityToElementOfRight" (formula "22") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "allRight" (formula "22") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "22") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "22"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "elementOfSetMinus" (formula "25"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "elementOfSetMinus" (formula "26"))
                                 (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "notRight" (formula "26"))
                                 (rule "replace_known_left" (formula "26") (term "0,1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "false_right" (formula "26"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "12"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "elementOfUnion" (formula "25"))
                                 (rule "orRight" (formula "25"))
                                 (rule "elementOfSingleton" (formula "26"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "elementOfUnion" (formula "25"))
                                 (rule "orRight" (formula "25"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "elementOfSingleton" (formula "26"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "25") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "inEqSimp_geqRight" (formula "19"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "15"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "limit_java_lang_Object__inv_" (formula "7"))
                              (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
                              (rule "true_left" (formula "7"))
                              (rule "limit_java_lang_Object__inv_" (formula "21"))
                              (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "13")))
                              (rule "true_left" (formula "21"))
                              (rule "limit_Tree_footprint" (formula "10") (term "1"))
                              (rule "limit_Tree_footprint" (formula "8") (term "1"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "21") (inst "k=k") (inst "k_0=k_0") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "22"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "23"))
                              (rule "notLeft" (formula "21"))
                              (rule "andLeft" (formula "22"))
                              (rule "eqSymm" (formula "32"))
                              (rule "disjointDefinition" (formula "30"))
                              (rule "disjointDefinition" (formula "26"))
                              (rule "disjointDefinition" (formula "23"))
                              (rule "inEqSimp_ltToLeq" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "21"))
                              (rule "add_zero_right" (formula "21") (term "0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1"))
                              (rule "polySimp_rightDist" (formula "25") (term "1"))
                              (rule "mul_literals" (formula "25") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                              (rule "polySimp_elimOne" (formula "21") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1"))
                              (rule "mul_literals" (formula "22") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                        )
                     )
                  )
                  (branch "Case 2"
                     (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,0") (ifseqformula "10"))
                     (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "1") (term "0") (ifseqformula "11"))
                     (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                      (builtin "Use Dependency Contract" (formula "20") (term "1,1,0") (ifInst ""  (formula "20") (term "1,1,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
                     (rule "wellFormedAnon" (formula "16") (term "1,1,0,0,0,0"))
                     (rule "replace_known_left" (formula "16") (term "1,0,0,0,0,0") (ifseqformula "4"))
                      (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "19")) (ifInst ""  (formula "11")) (ifInst ""  (formula "11")) (ifInst ""  (formula "12")))
                     (rule "disjointDefinition" (formula "16") (term "1,0,0"))
                     (rule "measuredByCheck" (formula "16") (term "1,0") (ifseqformula "15"))
                     (rule "precOfInt" (formula "16") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "16") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "16") (term "0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "16") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "16") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "16") (term "1,1,1,0"))
                     (rule "mul_literals" (formula "16") (term "0,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "16") (term "1,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "16") (term "1,1,1,1,0"))
                     (rule "replace_known_left" (formula "16") (term "1,1,0") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "commuteUnion_2" (formula "16") (term "1,1,0,1,0,0"))
                     (rule "commuteUnion_2" (formula "16") (term "0,1,1,0,1,0,0"))
                     (rule "commuteUnion" (formula "16") (term "0,0,1,1,0,1,0,0"))
                     (rule "limit_java_lang_Object__inv_" (formula "16") (term "0,0,0"))
                     (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "8"))
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "replace_known_left" (formula "17") (term "0,0,0") (ifseqformula "16"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "ifthenelse_split" (formula "17") (term "1,1,1,0,0,0"))
                     (branch "self.right.right = null TRUE"
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "ifthenelse_split" (formula "18") (term "1,1,1,0,0,0"))
                        (branch "self.right.left = null TRUE"
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "cut_direct" (formula "19") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "5"))
                              (rule "mul_literals" (formula "19") (term "0,0"))
                              (rule "add_zero_left" (formula "19") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                              (rule "mul_literals" (formula "19") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "11"))
                              (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0") (ifseqformula "11"))
                              (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "cut_direct" (formula "20") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "20"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "closeTrue" (formula "25"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "allRight" (formula "20") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "20") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "20"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "22"))
                                 (rule "orRight" (formula "22"))
                                 (rule "elementOfSingleton" (formula "23"))
                                 (rule "elementOfSingleton" (formula "22"))
                                 (rule "elementOfUnion" (formula "21"))
                                 (rule "orRight" (formula "21"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "8"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "elementOfSetMinus" (formula "22"))
                                  (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "21")))
                                 (rule "false_right" (formula "22"))
                                 (rule "elementOfSetMinus" (formula "22"))
                                 (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "notRight" (formula "22"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "23") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "inEqSimp_geqRight" (formula "19"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "12"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "12"))
                              (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "limit_Tree_footprint" (formula "7") (term "1"))
                              (rule "limit_Tree_footprint" (formula "4") (term "1"))
                              (rule "limit_java_lang_Object__inv_" (formula "21"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")))
                              (rule "true_left" (formula "1"))
                              (rule "limit_java_lang_Object__inv_" (formula "17"))
                              (rule "replace_known_left" (formula "17") (term "1") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "9")))
                              (rule "true_left" (formula "17"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "17") (inst "k=k") (inst "k_0=k_0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "20")) (ifInst ""  (formula "19")) (ifInst ""  (formula "20")) (ifInst ""  (formula "19")) (ifInst ""  (formula "20")) (ifInst ""  (formula "19")))
                              (rule "andLeft" (formula "17"))
                              (rule "andLeft" (formula "17"))
                              (rule "inEqSimp_ltToLeq" (formula "17"))
                              (rule "add_zero_right" (formula "17") (term "0"))
                              (rule "polySimp_mulComm0" (formula "17") (term "1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "17"))
                              (rule "polySimp_mulLiterals" (formula "17") (term "0"))
                              (rule "polySimp_elimOne" (formula "17") (term "0"))
                              (rule "inEqSimp_contradInEq1" (formula "1") (ifseqformula "17"))
                              (rule "qeq_literals" (formula "1") (term "0"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "closeFalse" (formula "1"))
                           )
                        )
                        (branch "self.right.left = null FALSE"
                           (rule "cut_direct" (formula "18") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "5"))
                              (rule "mul_literals" (formula "18") (term "0,0"))
                              (rule "add_zero_left" (formula "18") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                              (rule "mul_literals" (formula "18") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "12"))
                              (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "cut_direct" (formula "20") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "20"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "closeTrue" (formula "26"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "allRight" (formula "20") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "20") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "20"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "22"))
                                 (rule "orRight" (formula "22"))
                                 (rule "elementOfUnion" (formula "21"))
                                 (rule "orRight" (formula "21"))
                                 (rule "elementOfSingleton" (formula "22"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                 (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "notRight" (formula "24"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                                 (rule "false_right" (formula "24"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "10"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfSingleton" (formula "23"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "23") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "inEqSimp_geqRight" (formula "18"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "12"))
                              (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "limit_Tree_footprint" (formula "5") (term "1"))
                              (rule "limit_Tree_footprint" (formula "25") (term "0,1,1,1,0,1,1,0"))
                              (rule "limit_java_lang_Object__inv_" (formula "18"))
                              (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "10")))
                              (rule "true_left" (formula "18"))
                              (rule "limit_java_lang_Object__inv_" (formula "22"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                              (rule "true_left" (formula "1"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "18") (inst "k=k") (inst "k_0=k_0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "disjointDefinition" (formula "20"))
                              (rule "inEqSimp_ltToLeq" (formula "18"))
                              (rule "add_zero_right" (formula "18") (term "0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "19"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1"))
                              (rule "mul_literals" (formula "19") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                              (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "18") (term "0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "closeFalse" (formula "18"))
                           )
                        )
                     )
                     (branch "self.right.right = null FALSE"
                        (rule "commuteUnion_2" (formula "17") (term "1,1,0,0,0"))
                        (rule "ifthenelse_split" (formula "17") (term "1,1,1,0,0,0"))
                        (branch "self.right.left = null TRUE"
                            (builtin "One Step Simplification" (formula "18"))
                           (rule "cut_direct" (formula "18") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "5"))
                              (rule "mul_literals" (formula "18") (term "0,0"))
                              (rule "add_zero_left" (formula "18") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                              (rule "mul_literals" (formula "18") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "0") (ifseqformula "11"))
                              (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "cut_direct" (formula "20") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "20"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "closeTrue" (formula "26"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "allRight" (formula "20") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "20") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "20"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "22"))
                                 (rule "orRight" (formula "22"))
                                 (rule "elementOfUnion" (formula "21"))
                                 (rule "orRight" (formula "21"))
                                 (rule "elementOfSingleton" (formula "22"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                 (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "notRight" (formula "24"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "1")))
                                 (rule "false_right" (formula "24"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "10"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfSingleton" (formula "23"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "23") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "inEqSimp_geqRight" (formula "18"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "12"))
                              (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "limit_Tree_footprint" (formula "5") (term "1"))
                              (rule "limit_Tree_footprint" (formula "25") (term "0,1,1,1,0,1,1,0"))
                              (rule "limit_java_lang_Object__inv_" (formula "18"))
                              (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "10")))
                              (rule "true_left" (formula "18"))
                              (rule "limit_java_lang_Object__inv_" (formula "22"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")))
                              (rule "true_left" (formula "1"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "18") (inst "k=k") (inst "k_0=k_0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "disjointDefinition" (formula "20"))
                              (rule "inEqSimp_ltToLeq" (formula "18"))
                              (rule "add_zero_right" (formula "18") (term "0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "19"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "19"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1"))
                              (rule "polySimp_rightDist" (formula "19") (term "1"))
                              (rule "mul_literals" (formula "19") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "19") (term "1,1"))
                              (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "18") (term "0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "closeFalse" (formula "18"))
                           )
                        )
                        (branch "self.right.left = null FALSE"
                           (rule "commuteUnion_2" (formula "17") (term "1,1,0,0,0"))
                           (rule "cut_direct" (formula "17") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "inEqSimp_exactShadow3" (formula "17") (ifseqformula "5"))
                              (rule "mul_literals" (formula "17") (term "0,0"))
                              (rule "add_zero_left" (formula "17") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "17"))
                              (rule "mul_literals" (formula "17") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "11"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0,1,0,1,1,0,0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "19") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "cut_direct" (formula "20") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "true_left" (formula "21"))
                                 (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "20"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "closeTrue" (formula "27"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "notLeft" (formula "20"))
                                 (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "20"))
                                 (rule "allRight" (formula "20") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "20") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "20"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "22"))
                                 (rule "orRight" (formula "22"))
                                 (rule "elementOfUnion" (formula "21"))
                                 (rule "orRight" (formula "21"))
                                 (rule "elementOfSingleton" (formula "22"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "9"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "21")))
                                 (rule "false_right" (formula "24"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                 (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "notRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfSingleton" (formula "23"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "23") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "17"))
                              (rule "true_left" (formula "17"))
                              (rule "inEqSimp_geqRight" (formula "17"))
                              (rule "mul_literals" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "limit_java_lang_Object__inv_" (formula "23"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")))
                              (rule "true_left" (formula "1"))
                              (rule "limit_Tree_footprint" (formula "6") (term "1"))
                              (rule "limit_Tree_footprint" (formula "10") (term "1,0"))
                              (rule "limit_java_lang_Object__inv_" (formula "19"))
                              (rule "replace_known_left" (formula "19") (term "1") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "11")))
                              (rule "true_left" (formula "19"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "19") (inst "k=k") (inst "k_0=k_0") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "21"))
                              (rule "notLeft" (formula "19"))
                              (rule "eqSymm" (formula "30"))
                              (rule "disjointDefinition" (formula "28"))
                              (rule "disjointDefinition" (formula "24"))
                              (rule "disjointDefinition" (formula "21"))
                              (rule "inEqSimp_ltToLeq" (formula "19"))
                              (rule "add_zero_right" (formula "19") (term "0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                              (rule "polySimp_elimOne" (formula "19") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "23"))
                              (rule "polySimp_mulComm0" (formula "23") (term "1"))
                              (rule "polySimp_rightDist" (formula "23") (term "1"))
                              (rule "mul_literals" (formula "23") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "23") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "23") (term "1,1"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1"))
                              (rule "polySimp_rightDist" (formula "20") (term "1"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                              (rule "mul_literals" (formula "20") (term "0,1"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "19"))
                              (rule "qeq_literals" (formula "3") (term "0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                        )
                     )
                  )
               )
               (branch "self.left = null FALSE"
                  (rule "replace_known_right" (formula "26") (term "0,1,1,0,1,0,1,1,1,0,1,1,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "25")) (ifInst ""  (formula "25")) (ifInst ""  (formula "25")) (ifInst ""  (formula "25")) (ifInst ""  (formula "25")) (ifInst ""  (formula "25")) (ifInst ""  (formula "25")) (ifInst ""  (formula "25")))
                  (rule "replace_known_right" (formula "1") (term "0,2,0,0,0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "25")))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "notLeft" (formula "4"))
                  (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "andLeft" (formula "7"))
                  (rule "disjointAllFields" (formula "1") (term "0,1,0,0") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "9") (term "1") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "replace_known_right" (formula "16") (term "0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "16"))
                  (rule "andLeft" (formula "16"))
                  (rule "andLeft" (formula "17"))
                  (rule "replace_known_left" (formula "5") (term "1") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_right" (formula "3") (term "0,2,0,0,0") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
                  (rule "disjointAllFields" (formula "3") (term "0,1,0") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_right" (formula "2") (term "0,2,0,1,0") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
                  (rule "disjointAllFields" (formula "2") (term "0,1,0") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "replace_known_right" (formula "26") (term "0,0,1,1,1,0,0,1") (ifseqformula "28"))
                   (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "28")) (ifInst ""  (formula "9")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")) (ifInst ""  (formula "28")))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "elementOfSingleton" (formula "3") (term "0,0"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "27") (term "0,0,1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "commuteUnion" (formula "26") (term "1,1,1,0,0,0"))
                  (rule "commuteUnion" (formula "26") (term "1,1,1,0,1,1,0"))
                  (rule "commuteUnion_2" (formula "26") (term "1,0,1,1,0,0,0"))
                  (rule "commuteUnion" (formula "23") (term "1,1,0,0,1"))
                  (rule "commuteUnion_2" (formula "26") (term "1,1,0,1,1,1,0,0,0"))
                  (rule "commuteUnion_2" (formula "26") (term "1,0,1,1,1,0,1,1,0"))
                  (rule "commuteUnion_2" (formula "23") (term "1,1,1,1,1,0,0,1"))
                  (rule "commuteUnion_2" (formula "23") (term "1,1,0,1,1,0,0,1"))
                  (rule "associativeLawUnion" (formula "23") (term "1,1,0,1"))
                  (rule "associativeLawUnion" (formula "23") (term "1,0,0,1"))
                  (rule "associativeLawUnion" (formula "26") (term "1,1,0,0,0"))
                  (rule "associativeLawUnion" (formula "23") (term "0,1,1,0,1"))
                  (rule "associativeLawUnion" (formula "26") (term "1,1,0,1,1,0"))
                  (rule "associativeLawUnion" (formula "23") (term "1,1,1,0,0,1"))
                  (rule "associativeLawUnion" (formula "23") (term "1,1,0,1,0,0,1"))
                  (rule "ifthenelse_split" (formula "15") (term "1,0"))
                  (branch "self.right.right = null TRUE"
                      (builtin "One Step Simplification" (formula "16"))
                     (rule "true_left" (formula "16"))
                     (rule "ifthenelse_split" (formula "14") (term "1,0"))
                     (branch "self.right.left = null TRUE"
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "associativeLawUnion" (formula "23") (term "0,1,1,1,0,0,1"))
                        (rule "associativeLawUnion" (formula "23") (term "0,1,0,0,1,0,0,1"))
                        (rule "associativeLawUnion" (formula "26") (term "1,1,0,1,1,0,0,0"))
                        (rule "associativeLawUnion" (formula "26") (term "0,1,1,1,1,0,0,0"))
                        (rule "associativeLawUnion" (formula "23") (term "0,1,1,0,1,0,0,1"))
                        (rule "ifthenelse_split" (formula "23") (term "1,1,1,0,1"))
                        (branch "self.left.right = null TRUE"
                            (builtin "One Step Simplification" (formula "24"))
                           (rule "associativeLawUnion" (formula "27") (term "0,1,1,1,1,0,1,1,0"))
                           (rule "associativeLawUnion" (formula "27") (term "0,1,1,0,1,1,0,0,0"))
                           (rule "ifthenelse_split" (formula "24") (term "1,1,1,0,1"))
                           (branch "self.left.left = null TRUE"
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "commuteIntersection" (formula "25") (term "0,1"))
                              (rule "associativeLawUnion" (formula "28") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,0") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "1,1") (ifseqformula "19"))
                              (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "equalityToElementOfRight" (formula "27") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "allRight" (formula "27") (inst "sk=ov_0"))
                              (rule "allRight" (formula "27") (inst "sk=fv_0"))
                              (rule "notRight" (formula "27"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "27"))
                              (rule "orRight" (formula "27"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "elementOfSingleton" (formula "26"))
                              (rule "elementOfSingleton" (formula "27"))
                              (rule "elementOfSetMinus" (formula "29"))
                              (rule "elementOfUnion" (formula "28"))
                              (rule "orRight" (formula "28"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "elementOfUnion" (formula "32") (term "0,1"))
                              (rule "elementOfSingleton" (formula "32") (term "1,0,1"))
                              (rule "replace_known_right" (formula "32") (term "0,1,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "elementOfSetMinus" (formula "30"))
                               (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "26")))
                              (rule "false_right" (formula "30"))
                              (rule "elementOfSetMinus" (formula "30"))
                              (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "notRight" (formula "30"))
                              (rule "elementOfUnion" (formula "31") (term "0,1"))
                              (rule "elementOfSingleton" (formula "31") (term "1,0,1"))
                              (rule "replace_known_right" (formula "31") (term "1,0,1") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "31") (term "0,1"))
                              (rule "elementOfSingleton" (formula "31") (term "1,0,1"))
                              (rule "replace_known_right" (formula "31") (term "0,1,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "elementOfSingleton" (formula "31") (term "0,1"))
                              (rule "replace_known_right" (formula "31") (term "0,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0"))
                              (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "28") (ifseqformula "1"))
                           )
                           (branch "self.left.left = null FALSE"
                              (rule "commuteIntersection" (formula "25") (term "0,1"))
                              (rule "associativeLawUnion" (formula "28") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,1,0") (ifseqformula "17"))
                              (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,0") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "equalityToElementOfRight" (formula "27") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "allRight" (formula "27") (inst "sk=ov_0"))
                              (rule "allRight" (formula "27") (inst "sk=fv_0"))
                              (rule "notRight" (formula "27"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "elementOfUnion" (formula "25"))
                              (rule "orRight" (formula "25"))
                              (rule "elementOfSingleton" (formula "26"))
                              (rule "elementOfUnion" (formula "27"))
                              (rule "orRight" (formula "27"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfSetMinus" (formula "31"))
                              (rule "elementOfUnion" (formula "27"))
                              (rule "orRight" (formula "27"))
                              (rule "elementOfSingleton" (formula "28"))
                              (rule "elementOfSingleton" (formula "27"))
                              (rule "elementOfSetMinus" (formula "30"))
                               (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "26")))
                              (rule "false_right" (formula "30"))
                              (rule "elementOfSetMinus" (formula "30"))
                              (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "notRight" (formula "30"))
                              (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "false_right" (formula "31"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "28") (ifseqformula "1"))
                           )
                        )
                        (branch "self.left.right = null FALSE"
                           (rule "commuteUnion_2" (formula "24") (term "1,1,0,1"))
                           (rule "associativeLawUnion" (formula "27") (term "0,1,1,1,1,0,1,1,0"))
                           (rule "associativeLawUnion" (formula "27") (term "0,1,1,0,1,1,0,0,0"))
                           (rule "ifthenelse_split" (formula "24") (term "1,1,1,0,1"))
                           (branch "self.left.left = null TRUE"
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "commuteIntersection" (formula "25") (term "0,1"))
                              (rule "associativeLawUnion" (formula "28") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "1,0") (ifseqformula "17"))
                              (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,1") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "equalityToElementOfRight" (formula "27") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "allRight" (formula "27") (inst "sk=ov_0"))
                              (rule "allRight" (formula "27") (inst "sk=fv_0"))
                              (rule "notRight" (formula "27"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "elementOfUnion" (formula "25"))
                              (rule "orRight" (formula "25"))
                              (rule "elementOfSingleton" (formula "26"))
                              (rule "elementOfUnion" (formula "27"))
                              (rule "orRight" (formula "27"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfSetMinus" (formula "31"))
                              (rule "elementOfUnion" (formula "27"))
                              (rule "orRight" (formula "27"))
                              (rule "elementOfSingleton" (formula "28"))
                              (rule "elementOfSingleton" (formula "27"))
                              (rule "elementOfSetMinus" (formula "30"))
                               (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "26")))
                              (rule "false_right" (formula "30"))
                              (rule "elementOfSetMinus" (formula "30"))
                              (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "notRight" (formula "30"))
                              (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "false_right" (formula "31"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "28") (ifseqformula "1"))
                           )
                           (branch "self.left.left = null FALSE"
                              (rule "commuteUnion_2" (formula "25") (term "1,1,0,1"))
                              (rule "commuteIntersection" (formula "25") (term "0,1"))
                              (rule "associativeLawUnion" (formula "28") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "cut_direct" (formula "25") (term "0"))
                              (branch "CUT: self.left.<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "equalityToElementOfRight" (formula "26") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "allRight" (formula "26") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "26") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "26"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfSingleton" (formula "28"))
                                 (rule "elementOfSetMinus" (formula "26"))
                                 (rule "elementOfUnion" (formula "25"))
                                 (rule "orRight" (formula "25"))
                                 (rule "elementOfUnion" (formula "28"))
                                 (rule "orRight" (formula "28"))
                                 (rule "elementOfSingleton" (formula "28"))
                                 (rule "elementOfSingleton" (formula "29"))
                                 (rule "elementOfUnion" (formula "27") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "27") (term "1,0,1"))
                                 (rule "replace_known_right" (formula "27") (term "0,1,0,1") (ifseqformula "23"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "elementOfSetMinus" (formula "26"))
                                 (rule "replace_known_left" (formula "26") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "notRight" (formula "26"))
                                 (rule "elementOfSetMinus" (formula "26"))
                                  (builtin "One Step Simplification" (formula "26") (ifInst ""  (formula "1")) (ifInst ""  (formula "25")))
                                 (rule "false_right" (formula "26"))
                                 (rule "elementOfUnion" (formula "26") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "26") (term "1,0,1"))
                                 (rule "replace_known_right" (formula "26") (term "1,0,1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "26") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "26") (term "1,0,1"))
                                 (rule "replace_known_right" (formula "26") (term "0,1,0,1") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "elementOfSingleton" (formula "26") (term "0,1"))
                                 (rule "replace_known_right" (formula "26") (term "0,0,1") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "26") (ifseqformula "1"))
                              )
                              (branch "CUT: self.left.<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "referencedObjectIsCreatedRight" (formula "25") (ifseqformula "28"))
                                 (rule "close" (formula "25") (ifseqformula "16"))
                              )
                           )
                        )
                     )
                     (branch "self.right.left = null FALSE"
                        (rule "associativeLawUnion" (formula "24") (term "0,1,1,1,0,0,1"))
                        (rule "associativeLawUnion" (formula "24") (term "0,1,0,0,1,0,0,1"))
                        (rule "associativeLawUnion" (formula "27") (term "1,1,0,1,1,0,0,0"))
                        (rule "associativeLawUnion" (formula "27") (term "0,1,1,1,1,0,0,0"))
                        (rule "associativeLawUnion" (formula "24") (term "0,1,1,0,1,0,0,1"))
                        (rule "ifthenelse_split" (formula "24") (term "1,1,1,0,1"))
                        (branch "self.left.right = null TRUE"
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "associativeLawUnion" (formula "28") (term "0,1,1,1,1,0,1,1,0"))
                           (rule "associativeLawUnion" (formula "28") (term "0,1,1,0,1,1,0,0,0"))
                           (rule "ifthenelse_split" (formula "25") (term "1,1,1,0,1"))
                           (branch "self.left.left = null TRUE"
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "commuteIntersection" (formula "26") (term "0,1"))
                              (rule "associativeLawUnion" (formula "29") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,0") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "1,0") (ifseqformula "19"))
                              (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "equalityToElementOfRight" (formula "28") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "allRight" (formula "28") (inst "sk=ov_0"))
                              (rule "allRight" (formula "28") (inst "sk=fv_0"))
                              (rule "notRight" (formula "28"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "27"))
                              (rule "orRight" (formula "27"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "elementOfSingleton" (formula "27"))
                              (rule "elementOfSingleton" (formula "26"))
                              (rule "elementOfSetMinus" (formula "29"))
                              (rule "elementOfUnion" (formula "28"))
                              (rule "orRight" (formula "28"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "19"))
                              (rule "elementOfUnion" (formula "33") (term "0,1"))
                              (rule "elementOfSingleton" (formula "33") (term "1,0,1"))
                              (rule "replace_known_right" (formula "33") (term "0,1,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "elementOfSetMinus" (formula "31"))
                               (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "28")))
                              (rule "false_right" (formula "31"))
                              (rule "elementOfSetMinus" (formula "31"))
                              (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "notRight" (formula "31"))
                              (rule "elementOfUnion" (formula "32") (term "0,1"))
                              (rule "elementOfSingleton" (formula "32") (term "1,0,1"))
                              (rule "replace_known_right" (formula "32") (term "1,0,1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "32") (term "0,1"))
                              (rule "elementOfSingleton" (formula "32") (term "1,0,1"))
                              (rule "replace_known_right" (formula "32") (term "0,1,0,1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "elementOfSingleton" (formula "32") (term "0,1"))
                              (rule "replace_known_right" (formula "32") (term "0,0,1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0"))
                              (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "30") (ifseqformula "1"))
                           )
                           (branch "self.left.left = null FALSE"
                              (rule "commuteIntersection" (formula "26") (term "0,1"))
                              (rule "associativeLawUnion" (formula "29") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "1,0") (ifseqformula "17"))
                              (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,1") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "equalityToElementOfRight" (formula "28") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "allRight" (formula "28") (inst "sk=ov_0"))
                              (rule "allRight" (formula "28") (inst "sk=fv_0"))
                              (rule "notRight" (formula "28"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "elementOfSingleton" (formula "27"))
                              (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "18"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfUnion" (formula "30"))
                              (rule "orRight" (formula "30"))
                              (rule "elementOfSingleton" (formula "30"))
                              (rule "elementOfSingleton" (formula "31"))
                              (rule "elementOfSetMinus" (formula "29"))
                              (rule "elementOfUnion" (formula "28"))
                              (rule "orRight" (formula "28"))
                              (rule "elementOfUnion" (formula "30") (term "0,1"))
                              (rule "elementOfSingleton" (formula "30") (term "1,0,1"))
                              (rule "replace_known_right" (formula "30") (term "0,1,0,1") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "elementOfSetMinus" (formula "28"))
                               (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "26")))
                              (rule "false_right" (formula "28"))
                              (rule "elementOfSetMinus" (formula "28"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "notRight" (formula "28"))
                              (rule "elementOfUnion" (formula "29") (term "0,1"))
                              (rule "elementOfSingleton" (formula "29") (term "1,0,1"))
                              (rule "replace_known_right" (formula "29") (term "1,0,1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "29") (term "0,1"))
                              (rule "elementOfSingleton" (formula "29") (term "0,0,1"))
                              (rule "replace_known_right" (formula "29") (term "0,0,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "elementOfSingleton" (formula "29") (term "0,1"))
                              (rule "replace_known_right" (formula "29") (term "0,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "28") (ifseqformula "1"))
                           )
                        )
                        (branch "self.left.right = null FALSE"
                           (rule "commuteUnion_2" (formula "25") (term "1,1,0,1"))
                           (rule "associativeLawUnion" (formula "28") (term "0,1,1,1,1,0,1,1,0"))
                           (rule "associativeLawUnion" (formula "28") (term "0,1,1,0,1,1,0,0,0"))
                           (rule "ifthenelse_split" (formula "25") (term "1,1,1,0,1"))
                           (branch "self.left.left = null TRUE"
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "commuteIntersection" (formula "26") (term "0,1"))
                              (rule "associativeLawUnion" (formula "29") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,1,0") (ifseqformula "17"))
                              (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,1") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "equalityToElementOfRight" (formula "28") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "allRight" (formula "28") (inst "sk=ov_0"))
                              (rule "allRight" (formula "28") (inst "sk=fv_0"))
                              (rule "notRight" (formula "28"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "elementOfSingleton" (formula "27"))
                              (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "18"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfUnion" (formula "30"))
                              (rule "orRight" (formula "30"))
                              (rule "elementOfSingleton" (formula "30"))
                              (rule "elementOfSingleton" (formula "31"))
                              (rule "elementOfSetMinus" (formula "29"))
                              (rule "elementOfUnion" (formula "28"))
                              (rule "orRight" (formula "28"))
                              (rule "elementOfUnion" (formula "30") (term "0,1"))
                              (rule "elementOfSingleton" (formula "30") (term "1,0,1"))
                              (rule "replace_known_right" (formula "30") (term "0,1,0,1") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "elementOfSetMinus" (formula "28"))
                               (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "26")))
                              (rule "false_right" (formula "28"))
                              (rule "elementOfSetMinus" (formula "28"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "notRight" (formula "28"))
                              (rule "elementOfUnion" (formula "29") (term "0,1"))
                              (rule "elementOfSingleton" (formula "29") (term "1,0,1"))
                              (rule "replace_known_right" (formula "29") (term "1,0,1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "29") (term "0,1"))
                              (rule "elementOfSingleton" (formula "29") (term "0,0,1"))
                              (rule "replace_known_right" (formula "29") (term "0,0,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "elementOfSingleton" (formula "29") (term "0,1"))
                              (rule "replace_known_right" (formula "29") (term "0,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "28") (ifseqformula "1"))
                           )
                           (branch "self.left.left = null FALSE"
                              (rule "commuteIntersection" (formula "26") (term "0,1"))
                              (rule "commuteUnion_2" (formula "26") (term "1,0,0,1"))
                              (rule "associativeLawUnion" (formula "29") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "cut_direct" (formula "26") (term "0"))
                              (branch "CUT: self.left.<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "equalityToElementOfRight" (formula "27") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "allRight" (formula "27") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "27") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "27"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "elementOfUnion" (formula "25"))
                                 (rule "orRight" (formula "25"))
                                 (rule "elementOfSetMinus" (formula "27"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "16"))
                                 (rule "elementOfUnion" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "elementOfSetMinus" (formula "29"))
                                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "24")))
                                 (rule "false_right" (formula "29"))
                                 (rule "elementOfSetMinus" (formula "29"))
                                 (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "notRight" (formula "29"))
                                 (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "false_right" (formula "30"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfSingleton" (formula "28"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "26") (ifseqformula "1"))
                              )
                              (branch "CUT: self.left.<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "referencedObjectIsCreatedRight" (formula "26") (ifseqformula "29"))
                                 (rule "close" (formula "26") (ifseqformula "16"))
                              )
                           )
                        )
                     )
                  )
                  (branch "self.right.right = null FALSE"
                     (rule "ifthenelse_split" (formula "14") (term "1,0"))
                     (branch "self.right.left = null TRUE"
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "associativeLawUnion" (formula "24") (term "0,1,1,1,0,0,1"))
                        (rule "associativeLawUnion" (formula "24") (term "0,1,0,0,1,0,0,1"))
                        (rule "associativeLawUnion" (formula "27") (term "1,1,0,1,1,0,0,0"))
                        (rule "associativeLawUnion" (formula "27") (term "0,1,1,1,1,0,0,0"))
                        (rule "associativeLawUnion" (formula "24") (term "0,1,1,0,1,0,0,1"))
                        (rule "ifthenelse_split" (formula "24") (term "1,1,1,0,1"))
                        (branch "self.left.right = null TRUE"
                            (builtin "One Step Simplification" (formula "25"))
                           (rule "associativeLawUnion" (formula "28") (term "0,1,1,1,1,0,1,1,0"))
                           (rule "associativeLawUnion" (formula "28") (term "0,1,1,0,1,1,0,0,0"))
                           (rule "ifthenelse_split" (formula "25") (term "1,1,1,0,1"))
                           (branch "self.left.left = null TRUE"
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "commuteIntersection" (formula "26") (term "0,1"))
                              (rule "associativeLawUnion" (formula "29") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "11") (term "1,1,0") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "11"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "1,1") (ifseqformula "19"))
                              (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "equalityToElementOfRight" (formula "28") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "allRight" (formula "28") (inst "sk=ov_0"))
                              (rule "allRight" (formula "28") (inst "sk=fv_0"))
                              (rule "notRight" (formula "28"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "27"))
                              (rule "orRight" (formula "27"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "elementOfSingleton" (formula "27"))
                              (rule "elementOfSingleton" (formula "26"))
                              (rule "elementOfSetMinus" (formula "29"))
                              (rule "elementOfUnion" (formula "28"))
                              (rule "orRight" (formula "28"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "20"))
                              (rule "elementOfUnion" (formula "33") (term "0,1"))
                              (rule "elementOfSingleton" (formula "33") (term "1,0,1"))
                              (rule "replace_known_right" (formula "33") (term "0,1,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "elementOfSetMinus" (formula "31"))
                               (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "28")))
                              (rule "false_right" (formula "31"))
                              (rule "elementOfSetMinus" (formula "31"))
                              (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "notRight" (formula "31"))
                              (rule "elementOfUnion" (formula "32") (term "0,1"))
                              (rule "elementOfSingleton" (formula "32") (term "1,0,1"))
                              (rule "replace_known_right" (formula "32") (term "1,0,1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "32") (term "0,1"))
                              (rule "elementOfSingleton" (formula "32") (term "1,0,1"))
                              (rule "replace_known_right" (formula "32") (term "0,1,0,1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "elementOfSingleton" (formula "32") (term "0,1"))
                              (rule "replace_known_right" (formula "32") (term "0,0,1") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0"))
                              (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "29"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "30") (ifseqformula "1"))
                           )
                           (branch "self.left.left = null FALSE"
                              (rule "commuteIntersection" (formula "26") (term "0,1"))
                              (rule "associativeLawUnion" (formula "29") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "1,0") (ifseqformula "17"))
                              (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,1") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "equalityToElementOfRight" (formula "28") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "allRight" (formula "28") (inst "sk=ov_0"))
                              (rule "allRight" (formula "28") (inst "sk=fv_0"))
                              (rule "notRight" (formula "28"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "elementOfSingleton" (formula "27"))
                              (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "19"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfUnion" (formula "30"))
                              (rule "orRight" (formula "30"))
                              (rule "elementOfSingleton" (formula "30"))
                              (rule "elementOfSingleton" (formula "31"))
                              (rule "elementOfSetMinus" (formula "29"))
                              (rule "elementOfUnion" (formula "28"))
                              (rule "orRight" (formula "28"))
                              (rule "elementOfUnion" (formula "30") (term "0,1"))
                              (rule "elementOfSingleton" (formula "30") (term "1,0,1"))
                              (rule "replace_known_right" (formula "30") (term "0,1,0,1") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "elementOfSetMinus" (formula "28"))
                               (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "26")))
                              (rule "false_right" (formula "28"))
                              (rule "elementOfSetMinus" (formula "28"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "notRight" (formula "28"))
                              (rule "elementOfUnion" (formula "29") (term "0,1"))
                              (rule "elementOfSingleton" (formula "29") (term "1,0,1"))
                              (rule "replace_known_right" (formula "29") (term "1,0,1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "29") (term "0,1"))
                              (rule "elementOfSingleton" (formula "29") (term "0,0,1"))
                              (rule "replace_known_right" (formula "29") (term "0,0,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "elementOfSingleton" (formula "29") (term "0,1"))
                              (rule "replace_known_right" (formula "29") (term "0,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "28") (ifseqformula "1"))
                           )
                        )
                        (branch "self.left.right = null FALSE"
                           (rule "commuteUnion_2" (formula "25") (term "1,1,0,1"))
                           (rule "associativeLawUnion" (formula "28") (term "0,1,1,1,1,0,1,1,0"))
                           (rule "associativeLawUnion" (formula "28") (term "0,1,1,0,1,1,0,0,0"))
                           (rule "ifthenelse_split" (formula "25") (term "1,1,1,0,1"))
                           (branch "self.left.left = null TRUE"
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "commuteIntersection" (formula "26") (term "0,1"))
                              (rule "associativeLawUnion" (formula "29") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,1,0") (ifseqformula "17"))
                              (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,0") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "30"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "equalityToElementOfRight" (formula "28") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "allRight" (formula "28") (inst "sk=ov_0"))
                              (rule "allRight" (formula "28") (inst "sk=fv_0"))
                              (rule "notRight" (formula "28"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "elementOfSingleton" (formula "27"))
                              (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "19"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfUnion" (formula "30"))
                              (rule "orRight" (formula "30"))
                              (rule "elementOfSingleton" (formula "30"))
                              (rule "elementOfSingleton" (formula "31"))
                              (rule "elementOfSetMinus" (formula "29"))
                              (rule "elementOfUnion" (formula "28"))
                              (rule "orRight" (formula "28"))
                              (rule "elementOfUnion" (formula "30") (term "0,1"))
                              (rule "elementOfSingleton" (formula "30") (term "1,0,1"))
                              (rule "replace_known_right" (formula "30") (term "0,1,0,1") (ifseqformula "25"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "elementOfSetMinus" (formula "28"))
                               (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "26")))
                              (rule "false_right" (formula "28"))
                              (rule "elementOfSetMinus" (formula "28"))
                              (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "notRight" (formula "28"))
                              (rule "elementOfUnion" (formula "29") (term "0,1"))
                              (rule "elementOfSingleton" (formula "29") (term "1,0,1"))
                              (rule "replace_known_right" (formula "29") (term "1,0,1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "29") (term "0,1"))
                              (rule "elementOfSingleton" (formula "29") (term "0,0,1"))
                              (rule "replace_known_right" (formula "29") (term "0,0,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "elementOfSingleton" (formula "29") (term "0,1"))
                              (rule "replace_known_right" (formula "29") (term "0,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "28") (ifseqformula "1"))
                           )
                           (branch "self.left.left = null FALSE"
                              (rule "commuteIntersection" (formula "26") (term "0,1"))
                              (rule "commuteUnion_2" (formula "26") (term "1,0,0,1"))
                              (rule "associativeLawUnion" (formula "29") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "cut_direct" (formula "26") (term "0"))
                              (branch "CUT: self.left.<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "equalityToElementOfRight" (formula "27") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "allRight" (formula "27") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "27") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "27"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "elementOfUnion" (formula "25"))
                                 (rule "orRight" (formula "25"))
                                 (rule "elementOfSetMinus" (formula "27"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "17"))
                                 (rule "elementOfUnion" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "elementOfSetMinus" (formula "29"))
                                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "24")))
                                 (rule "false_right" (formula "29"))
                                 (rule "elementOfSetMinus" (formula "29"))
                                 (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "notRight" (formula "29"))
                                 (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "false_right" (formula "30"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfSingleton" (formula "28"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "26") (ifseqformula "1"))
                              )
                              (branch "CUT: self.left.<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "referencedObjectIsCreatedRight" (formula "26") (ifseqformula "29"))
                                 (rule "close" (formula "26") (ifseqformula "16"))
                              )
                           )
                        )
                     )
                     (branch "self.right.left = null FALSE"
                        (rule "associativeLawUnion" (formula "25") (term "0,1,1,1,0,0,1"))
                        (rule "associativeLawUnion" (formula "25") (term "0,1,0,0,1,0,0,1"))
                        (rule "associativeLawUnion" (formula "28") (term "1,1,0,1,1,0,0,0"))
                        (rule "associativeLawUnion" (formula "28") (term "0,1,1,1,1,0,0,0"))
                        (rule "associativeLawUnion" (formula "25") (term "0,1,1,0,1,0,0,1"))
                        (rule "ifthenelse_split" (formula "25") (term "1,1,1,0,1"))
                        (branch "self.left.right = null TRUE"
                            (builtin "One Step Simplification" (formula "26"))
                           (rule "associativeLawUnion" (formula "29") (term "0,1,1,1,1,0,1,1,0"))
                           (rule "associativeLawUnion" (formula "29") (term "0,1,1,0,1,1,0,0,0"))
                           (rule "ifthenelse_split" (formula "26") (term "1,1,1,0,1"))
                           (branch "self.left.left = null TRUE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "commuteIntersection" (formula "27") (term "0,1"))
                              (rule "associativeLawUnion" (formula "30") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "9") (term "1,0") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "9"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "1,0") (ifseqformula "19"))
                              (rule "replace_known_right" (formula "5") (term "0") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "5"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "5"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "equalityToElementOfRight" (formula "29") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "allRight" (formula "29") (inst "sk=ov_0"))
                              (rule "allRight" (formula "29") (inst "sk=fv_0"))
                              (rule "notRight" (formula "29"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "27"))
                              (rule "orRight" (formula "27"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "elementOfSingleton" (formula "26"))
                              (rule "elementOfSingleton" (formula "27"))
                              (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "19"))
                              (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "20"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "elementOfSetMinus" (formula "32"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "18"))
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "elementOfUnion" (formula "32"))
                              (rule "orRight" (formula "32"))
                              (rule "elementOfUnion" (formula "34") (term "0,1"))
                              (rule "elementOfSingleton" (formula "34") (term "1,0,1"))
                              (rule "replace_known_right" (formula "34") (term "0,1,0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "34"))
                              (rule "elementOfSetMinus" (formula "32"))
                               (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "27")))
                              (rule "false_right" (formula "32"))
                              (rule "elementOfSetMinus" (formula "32"))
                              (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "32"))
                              (rule "notRight" (formula "32"))
                              (rule "elementOfUnion" (formula "33") (term "0,1"))
                              (rule "elementOfSingleton" (formula "33") (term "1,0,1"))
                              (rule "replace_known_right" (formula "33") (term "1,0,1") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "33") (term "0,1"))
                              (rule "elementOfSingleton" (formula "33") (term "0,0,1"))
                              (rule "replace_known_right" (formula "33") (term "0,0,0,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "elementOfSingleton" (formula "33") (term "0,1"))
                              (rule "replace_known_right" (formula "33") (term "0,0,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "33"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0"))
                              (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "29") (ifseqformula "1"))
                           )
                           (branch "self.left.left = null FALSE"
                              (rule "commuteIntersection" (formula "27") (term "0,1"))
                              (rule "associativeLawUnion" (formula "30") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1,1,0") (ifseqformula "17"))
                              (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "10"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,0") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "equalityToElementOfRight" (formula "29") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "allRight" (formula "29") (inst "sk=ov_0"))
                              (rule "allRight" (formula "29") (inst "sk=fv_0"))
                              (rule "notRight" (formula "29"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "elementOfSingleton" (formula "27"))
                              (rule "elementOfUnion" (formula "25"))
                              (rule "orRight" (formula "25"))
                              (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "18"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "19"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfUnion" (formula "31"))
                              (rule "orRight" (formula "31"))
                              (rule "elementOfSingleton" (formula "31"))
                              (rule "elementOfSingleton" (formula "32"))
                              (rule "elementOfUnion" (formula "29"))
                              (rule "orRight" (formula "29"))
                              (rule "elementOfSetMinus" (formula "31"))
                              (rule "elementOfSetMinus" (formula "29"))
                               (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "25")))
                              (rule "false_right" (formula "29"))
                              (rule "elementOfSetMinus" (formula "29"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "notRight" (formula "29"))
                              (rule "replace_known_left" (formula "30") (term "0,1") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "false_right" (formula "30"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "27") (ifseqformula "1"))
                           )
                        )
                        (branch "self.left.right = null FALSE"
                           (rule "commuteUnion_2" (formula "26") (term "1,1,0,1"))
                           (rule "associativeLawUnion" (formula "29") (term "0,1,1,1,1,0,1,1,0"))
                           (rule "associativeLawUnion" (formula "29") (term "0,1,1,0,1,1,0,0,0"))
                           (rule "ifthenelse_split" (formula "26") (term "1,1,1,0,1"))
                           (branch "self.left.left = null TRUE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "commuteIntersection" (formula "27") (term "0,1"))
                              (rule "associativeLawUnion" (formula "30") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "1,0") (ifseqformula "17"))
                              (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "8"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,0") (ifseqformula "18"))
                              (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "31"))
                               (builtin "One Step Simplification" (formula "4"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "4"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "equalityToElementOfRight" (formula "29") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "allRight" (formula "29") (inst "sk=ov_0"))
                              (rule "allRight" (formula "29") (inst "sk=fv_0"))
                              (rule "notRight" (formula "29"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfSetMinus" (formula "2"))
                               (builtin "One Step Simplification" (formula "2"))
                              (rule "notLeft" (formula "2"))
                              (rule "elementOfUnion" (formula "26"))
                              (rule "orRight" (formula "26"))
                              (rule "elementOfSingleton" (formula "27"))
                              (rule "elementOfUnion" (formula "25"))
                              (rule "orRight" (formula "25"))
                              (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "18"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "19"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "8"))
                               (builtin "One Step Simplification" (formula "25"))
                              (rule "elementOfUnion" (formula "31"))
                              (rule "orRight" (formula "31"))
                              (rule "elementOfSingleton" (formula "31"))
                              (rule "elementOfSingleton" (formula "32"))
                              (rule "elementOfSetMinus" (formula "30"))
                              (rule "elementOfUnion" (formula "29"))
                              (rule "orRight" (formula "29"))
                              (rule "elementOfUnion" (formula "31") (term "0,1"))
                              (rule "elementOfSingleton" (formula "31") (term "1,0,1"))
                              (rule "replace_known_right" (formula "31") (term "0,1,0,1") (ifseqformula "27"))
                               (builtin "One Step Simplification" (formula "31"))
                              (rule "elementOfSetMinus" (formula "29"))
                               (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "25")))
                              (rule "false_right" (formula "29"))
                              (rule "elementOfSetMinus" (formula "29"))
                              (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "29"))
                              (rule "notRight" (formula "29"))
                              (rule "elementOfUnion" (formula "30") (term "0,1"))
                              (rule "elementOfSingleton" (formula "30") (term "1,0,1"))
                              (rule "replace_known_right" (formula "30") (term "1,0,1") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "30") (term "0,1"))
                              (rule "elementOfSingleton" (formula "30") (term "0,0,1"))
                              (rule "replace_known_right" (formula "30") (term "0,0,0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "elementOfSingleton" (formula "30") (term "0,1"))
                              (rule "replace_known_right" (formula "30") (term "0,0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "30"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "32"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "27") (ifseqformula "1"))
                           )
                           (branch "self.left.left = null FALSE"
                              (rule "commuteUnion_2" (formula "27") (term "1,1,0,1"))
                              (rule "commuteIntersection" (formula "27") (term "0,1"))
                              (rule "associativeLawUnion" (formula "30") (term "0,1,0,0,1,1,0,1,1,0"))
                              (rule "cut_direct" (formula "27") (term "0"))
                              (branch "CUT: self.left.<created> = TRUE TRUE"
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "equalityToElementOfRight" (formula "28") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "allRight" (formula "28") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "28") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "28"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                  (builtin "One Step Simplification" (formula "2"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "16"))
                                 (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "17"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "7"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfUnion" (formula "29"))
                                 (rule "orRight" (formula "29"))
                                 (rule "elementOfSingleton" (formula "30"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfSetMinus" (formula "29"))
                                 (rule "elementOfUnion" (formula "30"))
                                 (rule "orRight" (formula "30"))
                                 (rule "elementOfSingleton" (formula "30"))
                                 (rule "elementOfSingleton" (formula "31"))
                                 (rule "elementOfSetMinus" (formula "28"))
                                 (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "notRight" (formula "28"))
                                 (rule "replace_known_left" (formula "29") (term "0,1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "false_right" (formula "29"))
                                 (rule "elementOfSetMinus" (formula "28"))
                                  (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "1")) (ifInst ""  (formula "25")))
                                 (rule "false_right" (formula "28"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "26") (ifseqformula "1"))
                              )
                              (branch "CUT: self.left.<created> = TRUE FALSE"
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "referencedObjectIsCreatedRight" (formula "27") (ifseqformula "30"))
                                 (rule "close" (formula "27") (ifseqformula "16"))
                              )
                           )
                        )
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "cut_direct" (formula "3") (term "0,0,1") (userinteraction))
               (branch "CUT: self.left = null TRUE"
                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")) (ifInst ""  (formula "10")) (ifInst ""  (formula "3")) (ifInst ""  (formula "10")))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "5"))
                  (rule "eqSymm" (formula "18"))
                  (rule "eqSymm" (formula "1"))
                  (rule "replace_known_left" (formula "2") (term "0,0,1,0,1,1,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "15")) (ifInst ""  (formula "3")) (ifInst ""  (formula "15")))
                  (rule "replace_known_left" (formula "18") (term "0,0,1") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "15")) (ifInst ""  (formula "3")) (ifInst ""  (formula "15")) (ifInst ""  (formula "3")) (ifInst ""  (formula "15")) (ifInst ""  (formula "3")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")) (ifInst ""  (formula "3")) (ifInst ""  (formula "15")) (ifInst ""  (formula "3")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
                  (rule "replace_known_left" (formula "1") (term "0,1,0,0,1,1,1,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "15")) (ifInst ""  (formula "15")))
                  (rule "disjointDefinition" (formula "6"))
                  (rule "measuredByCheck" (formula "16") (ifseqformula "14"))
                  (rule "precOfInt" (formula "16"))
                  (rule "inEqSimp_ltToLeq" (formula "4"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "16") (term "1"))
                  (rule "polySimp_mulComm0" (formula "16") (term "1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "16") (term "0"))
                  (rule "applyEq" (formula "16") (term "1,0,0") (ifseqformula "3"))
                  (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
                  (rule "applyEq" (formula "16") (term "1,1,0,1") (ifseqformula "3"))
                  (rule "polySimp_addComm1" (formula "16") (term "0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "mul_literals" (formula "5") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "16") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "16") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "16") (term "0,1"))
                  (rule "setMinusOfUnion" (formula "2") (term "1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "18") (term "1,1,0,1,1,0"))
                  (rule "setMinusOfUnion" (formula "18") (term "1,1,0,0,0,1,0"))
                  (rule "setMinusOfUnion" (formula "1") (term "1,1,0,0"))
                  (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_left_0"))
                  (rule "simplifySelectOfAnon" (formula "2"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "18")) (ifInst ""  (formula "13")))
                  (rule "applyEq" (formula "2") (term "2,0") (ifseqformula "4"))
                  (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "pullOutSelect" (formula "18") (term "0,0,1,0") (inst "selectSK=Tree_key_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "13")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSetMinus" (formula "1") (term "1,0,0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "19") (term "0,0,1,0") (ifseqformula "1"))
                  (rule "hideAuxiliaryEq" (formula "1"))
                  (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_right_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "13")))
                  (rule "eqSymm" (formula "2"))
                  (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "true_left" (formula "1"))
                  (rule "commuteUnion" (formula "17") (term "1,0,1,1,0,1,1,0"))
                  (rule "commuteUnion_2" (formula "17") (term "1,1,1,1,0,1,1,0"))
                  (rule "commuteUnion" (formula "17") (term "0,1,1,1,1,0,1,1,0"))
                  (rule "limit_Tree_footprint" (formula "5") (term "1,0"))
                  (rule "applyEq" (formula "18") (term "0,1,1,1,0,1,1,0") (ifseqformula "5"))
                  (rule "associativeLawUnion" (formula "18") (term "1,0,1,1,0,1,1,0"))
                  (rule "cut_direct" (formula "16") (term "0"))
                  (branch "CUT: Tree.heightVariant ≥ 0 TRUE"
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "inEqSimp_geqRight" (formula "17"))
                     (rule "polySimp_rightDist" (formula "1") (term "1,0,0"))
                     (rule "mul_literals" (formula "1") (term "0,1,0,0"))
                     (rule "polySimp_addAssoc" (formula "1") (term "0,0"))
                     (rule "add_literals" (formula "1") (term "0,0,0"))
                     (rule "add_zero_left" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "polySimp_mulLiterals" (formula "1") (term "1"))
                     (rule "polySimp_elimOne" (formula "1") (term "1"))
                     (rule "inEqSimp_exactShadow3" (formula "5") (ifseqformula "1"))
                     (rule "mul_literals" (formula "5") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial1" (formula "5"))
                     (rule "mul_literals" (formula "5") (term "1"))
                     (rule "inEqSimp_subsumption1" (formula "2") (ifseqformula "5"))
                     (rule "leq_literals" (formula "2") (term "0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "1,1,1,1") (ifseqformula "12"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "13"))
                     (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                      (builtin "Use Dependency Contract" (formula "20") (term "1,1,0") (ifInst ""  (formula "20") (term "1,1,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
                     (rule "wellFormedAnon" (formula "18") (term "1,1,0,0,0,0"))
                     (rule "replace_known_left" (formula "18") (term "0,1,0,0,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "19")) (ifInst ""  (formula "1")) (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
                     (rule "disjointDefinition" (formula "18") (term "1,0,0"))
                     (rule "measuredByCheck" (formula "18") (term "1,0") (ifseqformula "17"))
                     (rule "precOfInt" (formula "18") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "18") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "18") (term "0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "18") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "18") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "18") (term "1,1,1,0"))
                     (rule "mul_literals" (formula "18") (term "0,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "18") (term "1,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "18") (term "1,1,1,1,0"))
                     (rule "replace_known_left" (formula "18") (term "1,1,0") (ifseqformula "7"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "commuteUnion" (formula "18") (term "1,1,0,1,0,0"))
                     (rule "limit_java_lang_Object__inv_" (formula "18") (term "0,0,0"))
                     (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "replace_known_left" (formula "19") (term "0,0,0") (ifseqformula "18"))
                      (builtin "One Step Simplification" (formula "19"))
                     (rule "associativeLawUnion" (formula "19") (term "1,1,0,0,0"))
                     (rule "associativeLawUnion" (formula "19") (term "0,1,1,0,0,0"))
                     (rule "ifthenelse_split" (formula "19") (term "1,1,1,0,0,0"))
                     (branch "self.right.right = null TRUE"
                         (builtin "One Step Simplification" (formula "20"))
                        (rule "ifthenelse_split" (formula "20") (term "1,1,1,0,0,0"))
                        (branch "self.right.left = null TRUE"
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "cut_direct" (formula "21") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "22"))
                              (rule "inEqSimp_exactShadow3" (formula "21") (ifseqformula "7"))
                              (rule "times_zero_1" (formula "21") (term "0,0"))
                              (rule "add_zero_left" (formula "21") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "21"))
                              (rule "mul_literals" (formula "21") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "13"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "13"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "cut_direct" (formula "22") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "closeTrue" (formula "25"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "equalityToElementOfRight" (formula "22") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "allRight" (formula "22") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "22") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "22"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "10"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "23")))
                                 (rule "false_right" (formula "24"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                 (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "notRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "25") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "inEqSimp_geqRight" (formula "21"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "14"))
                              (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "14"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "limit_Tree_footprint" (formula "24") (term "0,1,1,1,0,1,1,0"))
                              (rule "limit_java_lang_Object__inv_" (formula "19"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "20")))
                              (rule "true_left" (formula "19"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "19") (inst "k=k") (inst "k_0=k_0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "inEqSimp_ltToLeq" (formula "19"))
                              (rule "add_zero_right" (formula "19") (term "0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                              (rule "polySimp_elimOne" (formula "19") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "19") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "19") (term "0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "closeFalse" (formula "19"))
                           )
                        )
                        (branch "self.right.left = null FALSE"
                           (rule "cut_direct" (formula "20") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "7"))
                              (rule "times_zero_1" (formula "20") (term "0,0"))
                              (rule "add_zero_left" (formula "20") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                              (rule "mul_literals" (formula "20") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "14"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "cut_direct" (formula "22") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "closeTrue" (formula "26"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "equalityToElementOfRight" (formula "22") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "allRight" (formula "22") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "22") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "22"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "11"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "elementOfSingleton" (formula "26"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "23")))
                                 (rule "false_right" (formula "24"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                 (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "notRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "25") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "inEqSimp_geqRight" (formula "20"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "15"))
                              (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "true_left" (formula "21"))
                              (rule "limit_Tree_footprint" (formula "11") (term "1,0"))
                              (rule "limit_java_lang_Object__inv_" (formula "20"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "21")))
                              (rule "true_left" (formula "20"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "20") (inst "k=k") (inst "k_0=k_0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "disjointDefinition" (formula "22"))
                              (rule "inEqSimp_ltToLeq" (formula "20"))
                              (rule "add_zero_right" (formula "20") (term "0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                              (rule "polySimp_elimOne" (formula "20") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1"))
                              (rule "polySimp_rightDist" (formula "21") (term "1"))
                              (rule "mul_literals" (formula "21") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                              (rule "inEqSimp_contradInEq0" (formula "20") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "20") (term "0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "closeFalse" (formula "20"))
                           )
                        )
                     )
                     (branch "self.right.right = null FALSE"
                        (rule "commuteUnion_2" (formula "19") (term "1,1,0,0,0"))
                        (rule "ifthenelse_split" (formula "19") (term "1,1,1,0,0,0"))
                        (branch "self.right.left = null TRUE"
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "cut_direct" (formula "20") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "7"))
                              (rule "times_zero_1" (formula "20") (term "0,0"))
                              (rule "add_zero_left" (formula "20") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                              (rule "mul_literals" (formula "20") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "13"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "cut_direct" (formula "22") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "closeTrue" (formula "26"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "equalityToElementOfRight" (formula "22") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "allRight" (formula "22") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "22") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "22"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "11"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "elementOfSingleton" (formula "26"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "23")))
                                 (rule "false_right" (formula "24"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                 (rule "replace_known_left" (formula "24") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "notRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "25") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "inEqSimp_geqRight" (formula "20"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "14"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "limit_Tree_footprint" (formula "11") (term "1,0"))
                              (rule "limit_java_lang_Object__inv_" (formula "20"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "12"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "21")))
                              (rule "true_left" (formula "20"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "20") (inst "k=k") (inst "k_0=k_0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "disjointDefinition" (formula "22"))
                              (rule "inEqSimp_ltToLeq" (formula "20"))
                              (rule "add_zero_right" (formula "20") (term "0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                              (rule "polySimp_elimOne" (formula "20") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1"))
                              (rule "polySimp_rightDist" (formula "21") (term "1"))
                              (rule "mul_literals" (formula "21") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                              (rule "inEqSimp_contradInEq0" (formula "20") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "20") (term "0"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "closeFalse" (formula "20"))
                           )
                        )
                        (branch "self.right.left = null FALSE"
                           (rule "commuteUnion_2" (formula "19") (term "1,1,0,0,0"))
                           (rule "cut_direct" (formula "19") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "7"))
                              (rule "times_zero_1" (formula "19") (term "0,0"))
                              (rule "add_zero_left" (formula "19") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                              (rule "mul_literals" (formula "19") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "cut_direct" (formula "22") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "true_left" (formula "23"))
                                 (rule "applyEq" (formula "27") (term "1,1,0") (ifseqformula "22"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "closeTrue" (formula "27"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "notLeft" (formula "22"))
                                 (rule "equalityToElementOfRight" (formula "22") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "allRight" (formula "22") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "22") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "22"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "12"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "elementOfSetMinus" (formula "27"))
                                 (rule "replace_known_left" (formula "27") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "notRight" (formula "27"))
                                 (rule "elementOfSetMinus" (formula "27"))
                                  (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "1")) (ifInst ""  (formula "24")))
                                 (rule "false_right" (formula "27"))
                                 (rule "elementOfUnion" (formula "25"))
                                 (rule "orRight" (formula "25"))
                                 (rule "elementOfSingleton" (formula "26"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "elementOfUnion" (formula "25"))
                                 (rule "orRight" (formula "25"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "elementOfSingleton" (formula "26"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "25") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "inEqSimp_geqRight" (formula "19"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "22") (term "0") (ifseqformula "15"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "limit_Tree_footprint" (formula "12") (term "1,0"))
                              (rule "limit_java_lang_Object__inv_" (formula "21"))
                              (rule "replace_known_left" (formula "21") (term "1") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "13")))
                              (rule "true_left" (formula "21"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "21") (inst "k=k") (inst "k_0=k_0") (ifseqformula "24"))
                               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")) (ifInst ""  (formula "23")) (ifInst ""  (formula "24")))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "22"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "23"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "23"))
                              (rule "notLeft" (formula "21"))
                              (rule "andLeft" (formula "22"))
                              (rule "eqSymm" (formula "32"))
                              (rule "disjointDefinition" (formula "30"))
                              (rule "disjointDefinition" (formula "26"))
                              (rule "disjointDefinition" (formula "23"))
                              (rule "inEqSimp_ltToLeq" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "21"))
                              (rule "add_zero_right" (formula "21") (term "0"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "25"))
                              (rule "polySimp_mulComm0" (formula "25") (term "1"))
                              (rule "polySimp_rightDist" (formula "25") (term "1"))
                              (rule "mul_literals" (formula "25") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "25") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "25") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "21"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "0"))
                              (rule "polySimp_elimOne" (formula "21") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "22"))
                              (rule "polySimp_mulComm0" (formula "22") (term "1"))
                              (rule "polySimp_rightDist" (formula "22") (term "1"))
                              (rule "mul_literals" (formula "22") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "22") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "22") (term "1,1"))
                              (rule "inEqSimp_contradInEq0" (formula "21") (ifseqformula "3"))
                              (rule "qeq_literals" (formula "21") (term "0"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "closeFalse" (formula "21"))
                           )
                        )
                     )
                  )
                  (branch "CUT: Tree.heightVariant ≥ 0 FALSE"
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "false_right" (formula "17"))
                     (rule "inEqSimp_geqRight" (formula "16"))
                     (rule "times_zero_1" (formula "1") (term "1,0,0"))
                     (rule "add_zero_right" (formula "1") (term "0,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                     (rule "mul_literals" (formula "1") (term "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "1,1,1,1") (ifseqformula "11"))
                     (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "12"))
                     (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                      (builtin "Use Dependency Contract" (formula "19") (term "1,1,0") (ifInst ""  (formula "19") (term "1,1,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
                     (rule "wellFormedAnon" (formula "17") (term "1,1,0,0,0,0"))
                     (rule "replace_known_left" (formula "17") (term "1,1,1,0,0,0,0") (ifseqformula "13"))
                      (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "18")) (ifInst ""  (formula "1")) (ifInst ""  (formula "12")) (ifInst ""  (formula "12")))
                     (rule "disjointDefinition" (formula "17") (term "1,0,0"))
                     (rule "measuredByCheck" (formula "17") (term "1,0") (ifseqformula "16"))
                     (rule "precOfInt" (formula "17") (term "1,0"))
                     (rule "inEqSimp_ltToLeq" (formula "17") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,0,0,1,1,0"))
                     (rule "inEqSimp_commuteLeq" (formula "17") (term "0,1,0"))
                     (rule "inEqSimp_sepPosMonomial0" (formula "17") (term "1,1,0"))
                     (rule "polySimp_mulComm0" (formula "17") (term "1,1,1,0"))
                     (rule "polySimp_rightDist" (formula "17") (term "1,1,1,0"))
                     (rule "mul_literals" (formula "17") (term "0,1,1,1,0"))
                     (rule "polySimp_mulLiterals" (formula "17") (term "1,1,1,1,0"))
                     (rule "polySimp_elimOne" (formula "17") (term "1,1,1,1,0"))
                     (rule "replace_known_left" (formula "17") (term "1,1,0") (ifseqformula "6"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "commuteUnion" (formula "17") (term "1,1,0,1,0,0"))
                     (rule "limit_java_lang_Object__inv_" (formula "17") (term "0,0,0"))
                     (rule "replace_known_left" (formula "17") (term "0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "replace_known_left" (formula "18") (term "0,0,0") (ifseqformula "17"))
                      (builtin "One Step Simplification" (formula "18"))
                     (rule "associativeLawUnion" (formula "18") (term "1,1,0,0,0"))
                     (rule "associativeLawUnion" (formula "18") (term "0,1,1,0,0,0"))
                     (rule "ifthenelse_split" (formula "18") (term "1,1,1,0,0,0"))
                     (branch "self.right.right = null TRUE"
                         (builtin "One Step Simplification" (formula "19"))
                        (rule "ifthenelse_split" (formula "19") (term "1,1,1,0,0,0"))
                        (branch "self.right.left = null TRUE"
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "cut_direct" (formula "20") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "inEqSimp_exactShadow3" (formula "20") (ifseqformula "6"))
                              (rule "times_zero_1" (formula "20") (term "0,0"))
                              (rule "add_zero_left" (formula "20") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "20"))
                              (rule "mul_literals" (formula "20") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "12"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "12"))
                              (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "cut_direct" (formula "21") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "applyEq" (formula "24") (term "1,1,0") (ifseqformula "21"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "closeTrue" (formula "24"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "equalityToElementOfRight" (formula "21") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "allRight" (formula "21") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "21") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "21"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "elementOfSingleton" (formula "23"))
                                 (rule "elementOfUnion" (formula "22"))
                                 (rule "orRight" (formula "22"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "9"))
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "elementOfSetMinus" (formula "23"))
                                  (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "22")))
                                 (rule "false_right" (formula "23"))
                                 (rule "elementOfSetMinus" (formula "23"))
                                 (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "notRight" (formula "23"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "23"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "24") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "inEqSimp_geqRight" (formula "20"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "13"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "13"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "limit_Tree_footprint" (formula "23") (term "0,1,1,1,0,1,1,0"))
                              (rule "limit_java_lang_Object__inv_" (formula "18"))
                              (rule "replace_known_left" (formula "18") (term "1") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "10")))
                              (rule "true_left" (formula "18"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "18") (inst "k=k") (inst "k_0=k_0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")) (ifInst ""  (formula "21")) (ifInst ""  (formula "20")))
                              (rule "andLeft" (formula "18"))
                              (rule "andLeft" (formula "18"))
                              (rule "inEqSimp_ltToLeq" (formula "18"))
                              (rule "add_zero_right" (formula "18") (term "0"))
                              (rule "polySimp_mulComm0" (formula "18") (term "1,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "18"))
                              (rule "polySimp_mulLiterals" (formula "18") (term "0"))
                              (rule "polySimp_elimOne" (formula "18") (term "0"))
                              (rule "inEqSimp_contradInEq0" (formula "18") (ifseqformula "1"))
                              (rule "qeq_literals" (formula "18") (term "0"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "closeFalse" (formula "18"))
                           )
                        )
                        (branch "self.right.left = null FALSE"
                           (rule "cut_direct" (formula "19") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "6"))
                              (rule "times_zero_1" (formula "19") (term "0,0"))
                              (rule "add_zero_left" (formula "19") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                              (rule "mul_literals" (formula "19") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "12"))
                              (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "cut_direct" (formula "21") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "21"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "closeTrue" (formula "25"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "equalityToElementOfRight" (formula "21") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "allRight" (formula "21") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "21") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "21"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfUnion" (formula "22"))
                                 (rule "orRight" (formula "22"))
                                 (rule "elementOfSingleton" (formula "23"))
                                 (rule "elementOfSetMinus" (formula "25"))
                                 (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "notRight" (formula "25"))
                                 (rule "elementOfSetMinus" (formula "25"))
                                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "1")))
                                 (rule "false_right" (formula "25"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "11"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "23"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "24") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "inEqSimp_geqRight" (formula "19"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "13"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "limit_Tree_footprint" (formula "9") (term "1"))
                              (rule "limit_java_lang_Object__inv_" (formula "19"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "20")))
                              (rule "true_left" (formula "19"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "19") (inst "k=k") (inst "k_0=k_0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "disjointDefinition" (formula "21"))
                              (rule "inEqSimp_ltToLeq" (formula "19"))
                              (rule "add_zero_right" (formula "19") (term "0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                              (rule "polySimp_elimOne" (formula "19") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1"))
                              (rule "polySimp_rightDist" (formula "20") (term "1"))
                              (rule "mul_literals" (formula "20") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                              (rule "inEqSimp_contradInEq0" (formula "19") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "19") (term "0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "closeFalse" (formula "19"))
                           )
                        )
                     )
                     (branch "self.right.right = null FALSE"
                        (rule "commuteUnion_2" (formula "18") (term "1,1,0,0,0"))
                        (rule "ifthenelse_split" (formula "18") (term "1,1,1,0,0,0"))
                        (branch "self.right.left = null TRUE"
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "cut_direct" (formula "19") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "inEqSimp_exactShadow3" (formula "19") (ifseqformula "6"))
                              (rule "times_zero_1" (formula "19") (term "0,0"))
                              (rule "add_zero_left" (formula "19") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "19"))
                              (rule "mul_literals" (formula "19") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "12"))
                              (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "cut_direct" (formula "21") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "applyEq" (formula "25") (term "1,1,0") (ifseqformula "21"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "closeTrue" (formula "25"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "equalityToElementOfRight" (formula "21") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "allRight" (formula "21") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "21") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "21"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfUnion" (formula "22"))
                                 (rule "orRight" (formula "22"))
                                 (rule "elementOfSingleton" (formula "23"))
                                 (rule "elementOfSetMinus" (formula "25"))
                                 (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "notRight" (formula "25"))
                                 (rule "elementOfSetMinus" (formula "25"))
                                  (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "1")))
                                 (rule "false_right" (formula "25"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "11"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "23"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "24") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "true_left" (formula "19"))
                              (rule "inEqSimp_geqRight" (formula "19"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_zero_right" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "14"))
                              (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "true_left" (formula "20"))
                              (rule "limit_Tree_footprint" (formula "9") (term "1"))
                              (rule "limit_java_lang_Object__inv_" (formula "19"))
                              (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "11"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "20")))
                              (rule "true_left" (formula "19"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "19") (inst "k=k") (inst "k_0=k_0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")) (ifInst ""  (formula "21")) (ifInst ""  (formula "22")))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "19"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "disjointDefinition" (formula "21"))
                              (rule "inEqSimp_ltToLeq" (formula "19"))
                              (rule "add_zero_right" (formula "19") (term "0"))
                              (rule "polySimp_mulComm0" (formula "19") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0,0"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "19"))
                              (rule "polySimp_mulLiterals" (formula "19") (term "0"))
                              (rule "polySimp_elimOne" (formula "19") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "20"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1"))
                              (rule "polySimp_rightDist" (formula "20") (term "1"))
                              (rule "mul_literals" (formula "20") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "20") (term "1,1"))
                              (rule "inEqSimp_contradInEq0" (formula "19") (ifseqformula "2"))
                              (rule "qeq_literals" (formula "19") (term "0"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "closeFalse" (formula "19"))
                           )
                        )
                        (branch "self.right.left = null FALSE"
                           (rule "commuteUnion_2" (formula "18") (term "1,1,0,0,0"))
                           (rule "cut_direct" (formula "18") (term "1,0"))
                           (branch "CUT: self.right.heightVariant ≥ 0 TRUE"
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "inEqSimp_exactShadow3" (formula "18") (ifseqformula "6"))
                              (rule "times_zero_1" (formula "18") (term "0,0"))
                              (rule "add_zero_left" (formula "18") (term "0"))
                              (rule "inEqSimp_sepPosMonomial1" (formula "18"))
                              (rule "mul_literals" (formula "18") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "12"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "cut_direct" (formula "21") (term "1"))
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd TRUE"
                                  (builtin "One Step Simplification" (formula "22"))
                                 (rule "true_left" (formula "22"))
                                 (rule "applyEq" (formula "26") (term "1,1,0") (ifseqformula "21"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "closeTrue" (formula "26"))
                              )
                              (branch "CUT: (self.right@heap).treeSet$lmtd @heap[anon( allLocs ∖ self.* ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)} ∪ self.right.footprint() ∖ {(self, Tree::$heightVariant)} ∪ {(self, Tree::$isRed)} ∪ {(self.right, Tree::$isRed)}, anon_heap«anonHeapFunction»)] = self.right.treeSet$lmtd FALSE"
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "notLeft" (formula "21"))
                                 (rule "equalityToElementOfRight" (formula "21") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "21"))
                                 (rule "allRight" (formula "21") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "21") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "21"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "23"))
                                 (rule "orRight" (formula "23"))
                                 (rule "elementOfUnion" (formula "22"))
                                 (rule "orRight" (formula "22"))
                                 (rule "elementOfSingleton" (formula "23"))
                                 (rule "elementOfSetMinus" (formula "24"))
                                  (builtin "One Step Simplification" (formula "24"))
                                 (rule "elementOfSetMinus" (formula "25"))
                                 (rule "replace_known_left" (formula "25") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "notRight" (formula "25"))
                                 (rule "replace_known_left" (formula "25") (term "0,1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "25"))
                                 (rule "false_right" (formula "25"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "12"))
                                  (builtin "One Step Simplification" (formula "23"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "elementOfUnion" (formula "24"))
                                 (rule "orRight" (formula "24"))
                                 (rule "elementOfSingleton" (formula "24"))
                                 (rule "elementOfSingleton" (formula "25"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "23"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "24") (ifseqformula "1"))
                              )
                           )
                           (branch "CUT: self.right.heightVariant ≥ 0 FALSE"
                               (builtin "One Step Simplification" (formula "18"))
                              (rule "true_left" (formula "18"))
                              (rule "inEqSimp_geqRight" (formula "18"))
                              (rule "times_zero_1" (formula "1") (term "1,0,0"))
                              (rule "add_literals" (formula "1") (term "0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "1"))
                              (rule "mul_literals" (formula "1") (term "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "13"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "onlyCreatedObjectsAreReferenced" (formula "21") (term "0") (ifseqformula "14"))
                              (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "limit_Tree_footprint" (formula "10") (term "1"))
                              (rule "limit_java_lang_Object__inv_" (formula "20"))
                              (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "12")))
                              (rule "true_left" (formula "20"))
                              (rule "Partial_inv_axiom_for_JML_class_invariant_in_Tree_no_1" (formula "20") (inst "k=k") (inst "k_0=k_0") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "21"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "22"))
                              (rule "andLeft" (formula "20"))
                              (rule "andLeft" (formula "22"))
                              (rule "notLeft" (formula "20"))
                              (rule "andLeft" (formula "21"))
                              (rule "eqSymm" (formula "31"))
                              (rule "disjointDefinition" (formula "29"))
                              (rule "disjointDefinition" (formula "25"))
                              (rule "disjointDefinition" (formula "22"))
                              (rule "inEqSimp_ltToLeq" (formula "24"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1,0,0"))
                              (rule "inEqSimp_ltToLeq" (formula "20"))
                              (rule "add_zero_right" (formula "20") (term "0"))
                              (rule "polySimp_mulComm0" (formula "20") (term "1,0"))
                              (rule "inEqSimp_ltToLeq" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1,0,0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "24"))
                              (rule "polySimp_mulComm0" (formula "24") (term "1"))
                              (rule "polySimp_rightDist" (formula "24") (term "1"))
                              (rule "mul_literals" (formula "24") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "24") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "24") (term "1,1"))
                              (rule "inEqSimp_sepNegMonomial0" (formula "20"))
                              (rule "polySimp_mulLiterals" (formula "20") (term "0"))
                              (rule "polySimp_elimOne" (formula "20") (term "0"))
                              (rule "inEqSimp_sepPosMonomial0" (formula "21"))
                              (rule "polySimp_mulComm0" (formula "21") (term "1"))
                              (rule "polySimp_rightDist" (formula "21") (term "1"))
                              (rule "mul_literals" (formula "21") (term "0,1"))
                              (rule "polySimp_mulLiterals" (formula "21") (term "1,1"))
                              (rule "polySimp_elimOne" (formula "21") (term "1,1"))
                              (rule "inEqSimp_contradInEq1" (formula "3") (ifseqformula "20"))
                              (rule "qeq_literals" (formula "3") (term "0"))
                               (builtin "One Step Simplification" (formula "3"))
                              (rule "closeFalse" (formula "3"))
                           )
                        )
                     )
                  )
               )
               (branch "CUT: self.left = null FALSE"
                  (rule "Class_invariant_axiom_for_Tree" (formula "3") (term "1,1,1,0,0,0,0") (inst "k_0=k_0") (inst "k=k") (ifseqformula "9") (userinteraction))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "9")) (ifInst ""  (formula "10")) (ifInst ""  (formula "9")) (ifInst ""  (formula "10")))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "5"))
                  (rule "notLeft" (formula "3"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "andLeft" (formula "6"))
                  (rule "eqSymm" (formula "1"))
                  (rule "eqSymm" (formula "29"))
                  (rule "eqSymm" (formula "24"))
                  (rule "eqSymm" (formula "6") (term "0,0,0"))
                  (rule "replace_known_right" (formula "2") (term "0,1,0,1,1,1,0,0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "25")))
                  (rule "replace_known_right" (formula "29") (term "0,0,1,0,1,1,0,2,0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "26")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")))
                  (rule "replace_known_right" (formula "1") (term "0,1,1,0,1,1,0,0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "25")) (ifInst ""  (formula "26")))
                  (rule "disjointDefinition" (formula "18"))
                  (rule "disjointDefinition" (formula "14"))
                  (rule "disjointDefinition" (formula "12") (term "1"))
                  (rule "disjointDefinition" (formula "5"))
                  (rule "disjointDefinition" (formula "9") (term "1,0,1"))
                  (rule "disjointDefinition" (formula "8") (term "1,0,1"))
                  (rule "measuredByCheck" (formula "27") (ifseqformula "23"))
                  (rule "inEqSimp_ltToLeq" (formula "3"))
                  (rule "add_zero_right" (formula "3") (term "0"))
                  (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "13"))
                  (rule "polySimp_mulComm0" (formula "13") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0,0"))
                  (rule "precOfInt" (formula "27"))
                  (rule "inEqSimp_ltToLeq" (formula "9") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "7"))
                  (rule "add_zero_right" (formula "7") (term "0"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "27") (term "1"))
                  (rule "polySimp_mulComm0" (formula "27") (term "1,0,0,1"))
                  (rule "replace_known_left" (formula "27") (term "1") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "inEqSimp_leqRight" (formula "27"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "14"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1"))
                  (rule "polySimp_rightDist" (formula "14") (term "1"))
                  (rule "mul_literals" (formula "14") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "14") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "mul_literals" (formula "5") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "10") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "10") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "10") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "10") (term "1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "9") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "9") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "9") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "9") (term "0,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "9") (term "1,1,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "8"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "0"))
                  (rule "polySimp_elimOne" (formula "8") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "8") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "8") (term "0"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "closeFalse" (formula "8"))
               )
            )
         )
      )
      (branch "Case 2"
         (rule "applyEq" (formula "11") (term "2,0,1") (ifseqformula "9") (userinteraction))
          (builtin "Use Dependency Contract" (formula "11") (term "2,1,1,1") (ifInst ""  (formula "11") (term "2,1,1,0")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
         (rule "impLeft" (formula "10") (userinteraction))
         (branch "Case 1"
            (rule "andRight" (formula "10") (userinteraction))
            (branch "Case 1"
               (rule "cut_direct" (formula "3") (term "0,0,1") (userinteraction))
               (branch "CUT: self.left = null TRUE"
                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                  (rule "wellFormedAnon" (formula "11") (term "1,1,0,0"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "eqSymm" (formula "1"))
                  (rule "eqSymm" (formula "16"))
                  (rule "replace_known_left" (formula "13") (term "0,0,1,0,1,1,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "3")))
                  (rule "replace_known_left" (formula "1") (term "0,1,0,0,1,1,1,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "replace_known_left" (formula "2") (term "0,1,0,0,1,1,1,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
                  (rule "replace_known_left" (formula "16") (term "0,0,1,0,1,1,0,0,0,1,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                  (rule "replace_known_left" (formula "14") (term "0,1,1,0,0") (ifseqformula "8"))
                   (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "8")) (ifInst ""  (formula "9")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                  (rule "disjointDefinition" (formula "5") (term "1,0,1"))
                  (rule "disjointDefinition" (formula "14") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "4"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1"))
                  (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "3"))
                  (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
                  (rule "applyEq" (formula "13") (term "1,0") (ifseqformula "3"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1"))
                  (rule "setMinusOfUnion" (formula "13") (term "1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "1") (term "1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "2") (term "1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "16") (term "1,1,0,0,0,1,0"))
                  (rule "setMinusOfUnion" (formula "16") (term "1,1,0,2,1,1,0"))
                  (rule "setMinusOfUnion" (formula "14") (term "1,0,0,1"))
                  (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_right_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "11")))
                  (rule "eqSymm" (formula "2"))
                  (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0"))
                  (rule "elementOfSetMinus" (formula "1") (term "1,0"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,1,1,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,1,1,0"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,1,1,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_left_0"))
                  (rule "simplifySelectOfAnon" (formula "2"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "16")) (ifInst ""  (formula "11")))
                  (rule "applyEq" (formula "2") (term "1") (ifseqformula "3"))
                  (rule "ifEqualsNull" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "1,1") (ifseqformula "4"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "elementOfUnion" (formula "2") (term "1"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSetMinus" (formula "2") (term "1,0,0,0"))
                  (rule "elementOfSetMinus" (formula "2") (term "1,1"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,1"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,1"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,1"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,0,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,1"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "pullOutSelect" (formula "17") (term "0,0,1,0") (inst "selectSK=Tree_key_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")) (ifInst ""  (formula "12")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0"))
                  (rule "elementOfSetMinus" (formula "1") (term "1,0,0"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,1,1,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,1,1,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,1,1,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "commuteUnion_2" (formula "16") (term "1,1,0,1"))
                  (rule "commuteUnion_2" (formula "15") (term "1,1,1,1,0,0"))
                  (rule "commuteUnion" (formula "15") (term "1,0,1,1,0,0"))
                  (rule "commuteUnion" (formula "18") (term "1,0,1,1,0,2,1,1,0"))
                  (rule "commuteUnion" (formula "18") (term "1,1,1,1,0,2,1,1,0"))
                  (rule "commuteUnion" (formula "16") (term "1,0,1,0,0,1"))
                  (rule "commuteUnion" (formula "16") (term "1,1,1,0,0,1"))
                  (rule "commuteUnion" (formula "16") (term "0,1,1,0,1"))
                  (rule "commuteUnion" (formula "15") (term "0,1,1,1,1,0,0"))
                  (rule "commute_or_2" (formula "2"))
                  (rule "limit_java_lang_Object__inv_" (formula "16") (term "1,0"))
                  (rule "limit_Tree_footprint" (formula "8") (term "1,0,1,0,1"))
                  (rule "applyEq" (formula "17") (term "2,0,1,1,1,0,0") (ifseqformula "8"))
                  (rule "applyEq" (formula "20") (term "2,0,1,1,1,0,2,1,1,0") (ifseqformula "8"))
                  (rule "applyEq" (formula "4") (term "2,2,0,1,1") (ifseqformula "8"))
                  (rule "applyEq" (formula "2") (term "2,2,0,1,0,0") (ifseqformula "8"))
                  (rule "applyEq" (formula "18") (term "2,0,1,1,0,0,1") (ifseqformula "8"))
                  (rule "applyEq" (formula "4") (term "2,2,0,1,0,0,0") (ifseqformula "8"))
                  (rule "applyEq" (formula "3") (term "2,2,0,1") (ifseqformula "8"))
                  (rule "cnf_rightDist" (formula "9"))
                  (rule "andLeft" (formula "9"))
                  (rule "ifthenelse_split" (formula "21") (term "1,1,1"))
                  (branch "self.right = null TRUE"
                     (rule "replace_known_left" (formula "22") (term "0,0,1,1,1,0,2,1,1,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                     (rule "eqSymm" (formula "22"))
                     (rule "replace_known_left" (formula "19") (term "0,1,1,1,1,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                     (rule "replace_known_left" (formula "3") (term "0,2,0,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                     (rule "applyEqReverse" (formula "22") (term "0,0,1,1") (ifseqformula "3"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "closeTrue" (formula "22"))
                  )
                  (branch "self.right = null FALSE"
                     (rule "replace_known_right" (formula "2") (term "0,2,0,0,0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                     (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                     (rule "replace_known_right" (formula "18") (term "0,1,1,1,0,1,1,0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                     (rule "replace_known_right" (formula "10") (term "1") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "disjointAllFields" (formula "2") (term "0,1,0,0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "11"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "replace_known_right" (formula "3") (term "0,2,0,1,1") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
                     (rule "disjointAllFields" (formula "3") (term "0,1") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "replace_known_right" (formula "4") (term "0,2,0,1,1") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
                     (rule "disjointAllFields" (formula "4") (term "0,1,1") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "disjointAllFields" (formula "4") (term "0,1,0,0,0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "replace_known_left" (formula "20") (term "1,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
                     (rule "ifthenelse_negated" (formula "2") (term "0"))
                     (rule "elementOfSingleton" (formula "3") (term "0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "true_left" (formula "3"))
                     (rule "elementOfSingleton" (formula "3") (term "0,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "notLeft" (formula "3"))
                     (rule "elementOfSingleton" (formula "2") (term "0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "applyEqReverse" (formula "22") (term "0,0,1,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "elementOfSingleton" (formula "17"))
                      (builtin "One Step Simplification" (formula "17"))
                     (rule "false_right" (formula "17"))
                     (rule "associativeLawUnion" (formula "16") (term "1,0,1,1,0,0"))
                     (rule "associativeLawUnion" (formula "17") (term "0,1,1,0,1"))
                     (rule "associativeLawUnion" (formula "17") (term "1,1,1,0,0,1"))
                     (rule "associativeLawUnion" (formula "17") (term "1,0,1,0,0,1"))
                     (rule "associativeLawUnion" (formula "20") (term "1,1,1,1,0,1,1,0"))
                     (rule "associativeLawUnion" (formula "20") (term "1,0,1,1,0,1,1,0"))
                     (rule "ifthenelse_split" (formula "17") (term "1,1,1,0,1"))
                     (branch "self.right.right = null TRUE"
                         (builtin "One Step Simplification" (formula "18"))
                        (rule "ifthenelse_split" (formula "18") (term "1,1,1,0,1"))
                        (branch "self.right.left = null TRUE"
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "5") (term "0") (ifseqformula "13"))
                           (rule "replace_known_left" (formula "5") (term "0") (ifseqformula "6"))
                            (builtin "One Step Simplification" (formula "5"))
                           (rule "true_left" (formula "5"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "10") (term "1") (ifseqformula "13"))
                           (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "10"))
                           (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "allRight" (formula "20") (inst "sk=ov_0"))
                           (rule "allRight" (formula "20") (inst "sk=fv_0"))
                           (rule "notRight" (formula "20"))
                           (rule "elementOfIntersect" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "elementOfSetMinus" (formula "2"))
                           (rule "andLeft" (formula "2"))
                           (rule "notLeft" (formula "3"))
                           (rule "elementOfSetMinus" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "elementOfUnion" (formula "22"))
                           (rule "orRight" (formula "22"))
                           (rule "elementOfSingleton" (formula "22"))
                           (rule "elementOfSingleton" (formula "23"))
                           (rule "elementOfUnion" (formula "21"))
                           (rule "orRight" (formula "21"))
                           (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "10"))
                            (builtin "One Step Simplification" (formula "21"))
                           (rule "elementOfSetMinus" (formula "22"))
                            (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "21")))
                           (rule "false_right" (formula "22"))
                           (rule "elementOfSetMinus" (formula "22"))
                           (rule "replace_known_left" (formula "22") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "22"))
                           (rule "notRight" (formula "22"))
                           (rule "elementOfUnion" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "1"))
                           (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "24"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfUnion" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "0"))
                           (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "close" (formula "23") (ifseqformula "1"))
                        )
                        (branch "self.right.left = null FALSE"
                           (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "cut_direct" (formula "19") (term "0"))
                           (branch "CUT: self.right.<created> = TRUE TRUE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "allRight" (formula "20") (inst "sk=ov_0"))
                              (rule "allRight" (formula "20") (inst "sk=fv_0"))
                              (rule "notRight" (formula "20"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "3"))
                              (rule "elementOfSetMinus" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "elementOfUnion" (formula "21"))
                              (rule "orRight" (formula "21"))
                              (rule "elementOfSingleton" (formula "22"))
                              (rule "elementOfUnion" (formula "20"))
                              (rule "orRight" (formula "20"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "10"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "elementOfUnion" (formula "23"))
                              (rule "orRight" (formula "23"))
                              (rule "elementOfSingleton" (formula "23"))
                              (rule "elementOfSingleton" (formula "24"))
                              (rule "elementOfSetMinus" (formula "21"))
                               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "20")))
                              (rule "false_right" (formula "21"))
                              (rule "elementOfSetMinus" (formula "21"))
                              (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "notRight" (formula "21"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "23"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "21"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "22") (ifseqformula "1"))
                           )
                           (branch "CUT: self.right.<created> = TRUE FALSE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "referencedObjectIsCreatedRight" (formula "19") (ifseqformula "22"))
                              (rule "close" (formula "19") (ifseqformula "12"))
                           )
                        )
                     )
                     (branch "self.right.right = null FALSE"
                        (rule "commuteUnion_2" (formula "18") (term "1,1,0,1"))
                        (rule "ifthenelse_split" (formula "18") (term "1,1,1,0,1"))
                        (branch "self.right.left = null TRUE"
                            (builtin "One Step Simplification" (formula "19"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "0") (ifseqformula "12"))
                           (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                            (builtin "One Step Simplification" (formula "4"))
                           (rule "true_left" (formula "4"))
                           (rule "onlyCreatedObjectsAreReferenced" (formula "17") (term "1,0,1,1,1,0,0") (ifseqformula "12"))
                           (rule "replace_known_right" (formula "17") (term "0") (ifseqformula "22"))
                            (builtin "One Step Simplification" (formula "17"))
                           (rule "replace_known_left" (formula "20") (term "0") (ifseqformula "17"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "allRight" (formula "20") (inst "sk=ov_0"))
                           (rule "allRight" (formula "20") (inst "sk=fv_0"))
                           (rule "notRight" (formula "20"))
                           (rule "elementOfIntersect" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "elementOfSetMinus" (formula "1"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "notLeft" (formula "1"))
                           (rule "elementOfSetMinus" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "notLeft" (formula "2"))
                           (rule "elementOfUnion" (formula "21"))
                           (rule "orRight" (formula "21"))
                           (rule "elementOfUnion" (formula "20"))
                           (rule "orRight" (formula "20"))
                           (rule "elementOfSingleton" (formula "21"))
                           (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "9"))
                            (builtin "One Step Simplification" (formula "20"))
                           (rule "elementOfSetMinus" (formula "23"))
                            (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "20")))
                           (rule "false_right" (formula "23"))
                           (rule "elementOfSetMinus" (formula "23"))
                           (rule "replace_known_left" (formula "23") (term "0") (ifseqformula "1"))
                            (builtin "One Step Simplification" (formula "23"))
                           (rule "notRight" (formula "23"))
                           (rule "elementOfUnion" (formula "22"))
                           (rule "orRight" (formula "22"))
                           (rule "elementOfSingleton" (formula "22"))
                           (rule "elementOfSingleton" (formula "23"))
                           (rule "elementOfUnion" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "1"))
                           (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "23"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfUnion" (formula "1"))
                           (rule "elementOfSingleton" (formula "1") (term "1"))
                           (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "21"))
                            (builtin "One Step Simplification" (formula "1"))
                           (rule "elementOfSingleton" (formula "1"))
                           (rule "andLeft" (formula "1"))
                           (rule "close" (formula "22") (ifseqformula "1"))
                        )
                        (branch "self.right.left = null FALSE"
                           (rule "commuteUnion_2" (formula "19") (term "1,1,0,1"))
                           (rule "cut_direct" (formula "19") (term "0"))
                           (branch "CUT: self.right.<created> = TRUE TRUE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "equalityToElementOfRight" (formula "20") (inst "fv=fv") (inst "ov=ov"))
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "allRight" (formula "20") (inst "sk=ov_0"))
                              (rule "allRight" (formula "20") (inst "sk=fv_0"))
                              (rule "notRight" (formula "20"))
                              (rule "elementOfIntersect" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "elementOfSetMinus" (formula "2"))
                              (rule "andLeft" (formula "2"))
                              (rule "notLeft" (formula "3"))
                              (rule "elementOfSetMinus" (formula "1"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "notLeft" (formula "1"))
                              (rule "elementOfUnion" (formula "20"))
                              (rule "orRight" (formula "20"))
                              (rule "elementOfSingleton" (formula "21"))
                              (rule "elementOfUnion" (formula "19"))
                              (rule "orRight" (formula "19"))
                              (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "9"))
                               (builtin "One Step Simplification" (formula "19"))
                              (rule "elementOfUnion" (formula "22"))
                              (rule "orRight" (formula "22"))
                              (rule "elementOfSingleton" (formula "23"))
                              (rule "elementOfSetMinus" (formula "21"))
                              (rule "replace_known_left" (formula "21") (term "0") (ifseqformula "1"))
                               (builtin "One Step Simplification" (formula "21"))
                              (rule "notRight" (formula "21"))
                              (rule "elementOfSetMinus" (formula "21"))
                               (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")) (ifInst ""  (formula "20")))
                              (rule "false_right" (formula "21"))
                              (rule "elementOfUnion" (formula "21"))
                              (rule "orRight" (formula "21"))
                              (rule "elementOfSingleton" (formula "21"))
                              (rule "elementOfSingleton" (formula "22"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "1"))
                              (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "22"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfUnion" (formula "1"))
                              (rule "elementOfSingleton" (formula "1") (term "0"))
                              (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "20"))
                               (builtin "One Step Simplification" (formula "1"))
                              (rule "elementOfSingleton" (formula "1"))
                              (rule "andLeft" (formula "1"))
                              (rule "close" (formula "21") (ifseqformula "1"))
                           )
                           (branch "CUT: self.right.<created> = TRUE FALSE"
                               (builtin "One Step Simplification" (formula "20"))
                              (rule "referencedObjectIsCreatedRight" (formula "19") (ifseqformula "22"))
                              (rule "close" (formula "19") (ifseqformula "11"))
                           )
                        )
                     )
                  )
               )
               (branch "CUT: self.left = null FALSE"
                  (rule "Definition_axiom_for_footprint_in_Tree" (formula "3") (term "0,1,1") (ifseqformula "10") (userinteraction))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
                  (rule "wellFormedAnon" (formula "11") (term "1,1,0,0"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "5"))
                  (rule "eqSymm" (formula "21"))
                  (rule "eqSymm" (formula "1"))
                  (rule "eqSymm" (formula "3") (term "0,0"))
                  (rule "replace_known_right" (formula "17") (term "0,0,1,0,1,1,0,0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "17") (ifInst ""  (formula "18")))
                  (rule "replace_known_right" (formula "2") (term "0,1,0,0,1,1,1,0,0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "18")))
                  (rule "replace_known_right" (formula "21") (term "0,0,0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")) (ifInst ""  (formula "18")) (ifInst ""  (formula "18")) (ifInst ""  (formula "18")))
                  (rule "replace_known_right" (formula "1") (term "0,1,0,0,1,1,1,0,0") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
                  (rule "replace_known_right" (formula "19") (term "0,1,0,0,1,1,0,1") (ifseqformula "18"))
                   (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "12")) (ifInst ""  (formula "12")) (ifInst ""  (formula "13")) (ifInst ""  (formula "18")))
                  (rule "disjointDefinition" (formula "11") (term "1"))
                  (rule "disjointDefinition" (formula "8") (term "1,0,1"))
                  (rule "disjointDefinition" (formula "6"))
                  (rule "disjointDefinition" (formula "19") (term "1"))
                  (rule "inEqSimp_ltToLeq" (formula "8") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "4"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "8") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "8") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "8") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "8") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "8") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "8") (term "1,1,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1"))
                  (rule "mul_literals" (formula "5") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1"))
                  (rule "setMinusOfUnion" (formula "17") (term "1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "2") (term "1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "21") (term "1,1,0,2,1,1,0"))
                  (rule "setMinusOfUnion" (formula "21") (term "1,1,0,0,0,1,0"))
                  (rule "setMinusOfUnion" (formula "1") (term "1,1,0,0"))
                  (rule "distributeIntersection_2" (formula "11") (term "0,1"))
                  (rule "setMinusOfUnion" (formula "19") (term "1,0,0,1"))
                  (rule "setMinusOfUnion" (formula "17") (term "1,1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "2") (term "1,1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "21") (term "1,1,1,0,2,1,1,0"))
                  (rule "setMinusOfUnion" (formula "21") (term "1,1,1,0,0,0,1,0"))
                  (rule "setMinusOfUnion" (formula "1") (term "1,1,1,0,0"))
                  (rule "unionEqualsEmpty" (formula "11") (term "1"))
                  (rule "setMinusOfUnion" (formula "19") (term "1,1,0,0,1"))
                  (rule "distributeIntersection_2" (formula "11") (term "0,1,1"))
                  (rule "unionEqualsEmpty" (formula "11") (term "1,1"))
                  (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_left_0"))
                  (rule "simplifySelectOfAnon" (formula "2"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")) (ifInst ""  (formula "15")))
                  (rule "eqSymm" (formula "3"))
                  (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "1,0"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,1,0"))
                  (rule "elementOfSetMinus" (formula "2") (term "1,1,0"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,1,1,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,1,1,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,1,0,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "pullOutSelect" (formula "21") (term "0,0,1,0") (inst "selectSK=Tree_key_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "15")))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "1,0,0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfSetMinus" (formula "1") (term "1,1,0,0"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,1,0,0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
                  (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,1,0,1,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,1,0,1,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,1,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,1,1,1,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,1,1,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,1,1,1,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_right_0"))
                  (rule "simplifySelectOfAnon" (formula "2"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "22")) (ifInst ""  (formula "16")))
                  (rule "eqSymm" (formula "3"))
                  (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "1,0"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,1,0"))
                  (rule "elementOfSetMinus" (formula "2") (term "1,1,0"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,1,0,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,1,0,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,1,1,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,1,1,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commuteUnion_2" (formula "20") (term "1,1,0,1"))
                  (rule "commuteUnion_2" (formula "18") (term "1,0,1,1,0,0"))
                  (rule "commuteUnion" (formula "22") (term "1,0,1,1,0,2,1,1,0"))
                  (rule "commuteUnion_2" (formula "20") (term "1,0,1,0,0,1"))
                  (rule "commuteUnion" (formula "18") (term "1,0,1,1,1,0,0"))
                  (rule "commuteUnion" (formula "18") (term "1,1,1,1,1,0,0"))
                  (rule "commuteUnion_2" (formula "22") (term "1,1,1,1,1,0,2,1,1,0"))
                  (rule "commuteUnion_2" (formula "22") (term "1,0,1,1,1,0,2,1,1,0"))
                  (rule "commuteUnion" (formula "20") (term "1,1,1,1,0,0,1"))
                  (rule "commuteUnion" (formula "20") (term "1,0,1,1,0,0,1"))
                  (rule "commuteIntersection" (formula "12") (term "0,0,1,1"))
                  (rule "commuteIntersection" (formula "12") (term "0,1,1,1"))
                  (rule "commuteUnion" (formula "20") (term "0,1,1,0,1"))
                  (rule "commuteUnion_2" (formula "18") (term "0,1,0,1,1,0,0"))
                  (rule "commuteUnion" (formula "20") (term "0,1,0,1,0,0,1"))
                  (rule "commuteUnion_2" (formula "22") (term "0,1,1,1,1,1,0,2,1,1,0"))
                  (rule "commuteUnion_2" (formula "22") (term "0,1,0,1,1,1,0,2,1,1,0"))
                  (rule "commuteUnion" (formula "18") (term "0,0,1,0,1,1,0,0"))
                  (rule "commuteUnion" (formula "22") (term "0,0,1,1,1,1,1,0,2,1,1,0"))
                  (rule "commuteUnion" (formula "22") (term "0,0,1,0,1,1,1,0,2,1,1,0"))
                  (rule "commute_or" (formula "4"))
                  (rule "ifthenelse_split" (formula "20") (term "0,1,1,1,0,0,1"))
                  (branch "self.right = null TRUE"
                      (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                     (rule "false_right" (formula "21"))
                     (rule "replace_known_left" (formula "22") (term "0,1,1,1,0,1,1,0,2,1,1,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                     (rule "eqSymm" (formula "22"))
                     (rule "replace_known_left" (formula "19") (term "0,1,1,1,0,1,1,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                     (rule "replace_known_left" (formula "2") (term "0,2,0,1,1,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                     (rule "applyEqReverse" (formula "22") (term "0,0,1,1") (ifseqformula "2"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "closeTrue" (formula "22"))
                  )
                  (branch "self.right = null FALSE"
                     (rule "replace_known_right" (formula "23") (term "0,1,1,1,1,1,1,0,2,1,1,0") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
                     (rule "replace_known_right" (formula "18") (term "0,1,1,1,0,1,1,1,0,0") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
                     (rule "replace_known_right" (formula "1") (term "0,2,0,1,0,1,0,0") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
                     (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "20"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "andLeft" (formula "9"))
                     (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "22"))
                      (builtin "One Step Simplification" (formula "14"))
                     (rule "andLeft" (formula "14"))
                     (rule "andLeft" (formula "15"))
                     (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "notLeft" (formula "4"))
                     (rule "replace_known_right" (formula "3") (term "0,2,0,0,0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
                     (rule "replace_known_right" (formula "25") (term "0,1,1,1,1,1,1,0,0,1") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
                     (rule "replace_known_right" (formula "2") (term "0,2,0,1,1,1,0") (ifseqformula "24"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
                     (rule "elementOfSingleton" (formula "1") (term "0,1,1,1,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "3") (term "0,1,0,1,0"))
                      (builtin "One Step Simplification" (formula "3"))
                     (rule "elementOfSingleton" (formula "2") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "26") (term "0,0,1,0") (ifseqformula "1"))
                     (rule "hideAuxiliaryEq" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,1,1,1,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "true_left" (formula "1"))
                     (rule "limit_Tree_footprint" (formula "3") (term "1,0"))
                     (rule "applyEq" (formula "23") (term "0,0,1,1,0,0,1") (ifseqformula "3"))
                     (rule "applyEq" (formula "19") (term "0,0,1,1,1,0,0") (ifseqformula "3"))
                     (rule "applyEq" (formula "25") (term "0,0,1,1,1,0,1,1,0") (ifseqformula "3"))
                     (rule "limit_Tree_footprint" (formula "7") (term "1,0"))
                     (rule "applyEq" (formula "26") (term "0,1,1,1,1,0,1,1,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "20") (term "0,1,1,1,1,0,0") (ifseqformula "7"))
                     (rule "applyEq" (formula "24") (term "0,1,1,1,0,0,1") (ifseqformula "7"))
                     (rule "limit_java_lang_Object__inv_" (formula "24") (term "1,0"))
                     (rule "replace_known_left" (formula "1") (term "0") (ifseqformula "10"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "replace_known_left" (formula "25") (term "1,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "25"))
                     (rule "associativeLawUnion" (formula "21") (term "1,1,0,0"))
                     (rule "associativeLawUnion" (formula "25") (term "1,0,0,1"))
                     (rule "associativeLawUnion" (formula "25") (term "0,1,1,0,1"))
                     (rule "associativeLawUnion" (formula "27") (term "1,0,1,1,0,1,1,0"))
                     (rule "associativeLawUnion" (formula "21") (term "1,1,1,1,0,0"))
                     (rule "associativeLawUnion" (formula "25") (term "1,1,1,0,0,1"))
                     (rule "associativeLawUnion" (formula "27") (term "1,1,0,1,1,0"))
                     (rule "ifthenelse_split" (formula "14") (term "1,0"))
                     (branch "self.left.left = null TRUE"
                         (builtin "One Step Simplification" (formula "15"))
                        (rule "true_left" (formula "15"))
                        (rule "ifthenelse_split" (formula "15") (term "1,0"))
                        (branch "self.left.right = null TRUE"
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "associativeLawUnion" (formula "21") (term "1,1,0,1,1,0,0"))
                           (rule "associativeLawUnion" (formula "25") (term "1,1,0,1,0,0,1"))
                           (rule "associativeLawUnion" (formula "21") (term "0,1,1,1,1,0,0"))
                           (rule "associativeLawUnion" (formula "25") (term "0,1,1,1,0,0,1"))
                           (rule "associativeLawUnion" (formula "25") (term "0,1,0,0,1,0,0,1"))
                           (rule "associativeLawUnion" (formula "21") (term "0,1,1,0,1,1,0,0"))
                           (rule "associativeLawUnion" (formula "25") (term "0,1,1,0,1,0,0,1"))
                           (rule "ifthenelse_split" (formula "25") (term "1,1,1,0,1"))
                           (branch "self.right.right = null TRUE"
                               (builtin "One Step Simplification" (formula "26"))
                              (rule "ifthenelse_split" (formula "26") (term "1,1,1,0,1"))
                              (branch "self.right.left = null TRUE"
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "associativeLawUnion" (formula "29") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "1,1,0") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "1,1,1,1") (ifseqformula "19"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "equalityToElementOfRight" (formula "29") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "allRight" (formula "29") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "29") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "29"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "28"))
                                 (rule "orRight" (formula "28"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "elementOfSingleton" (formula "28"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "elementOfSetMinus" (formula "31"))
                                 (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "notRight" (formula "31"))
                                 (rule "elementOfUnion" (formula "31"))
                                 (rule "orRight" (formula "31"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "32"))
                                  (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "28")))
                                 (rule "false_right" (formula "32"))
                                 (rule "elementOfSetMinus" (formula "32"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "32") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "32") (term "1,0,1"))
                                 (rule "replace_known_right" (formula "32") (term "1,0,1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "29") (ifseqformula "1"))
                              )
                              (branch "self.right.left = null FALSE"
                                 (rule "associativeLawUnion" (formula "29") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "1,1,0") (ifseqformula "17"))
                                 (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "1,1,1,1") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "27"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "equalityToElementOfRight" (formula "29") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "allRight" (formula "29") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "29") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "29"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfSingleton" (formula "28"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "13"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "elementOfUnion" (formula "28"))
                                 (rule "orRight" (formula "28"))
                                 (rule "elementOfUnion" (formula "30"))
                                 (rule "orRight" (formula "30"))
                                 (rule "elementOfSingleton" (formula "30"))
                                 (rule "elementOfSingleton" (formula "31"))
                                 (rule "elementOfUnion" (formula "28"))
                                 (rule "orRight" (formula "28"))
                                 (rule "elementOfSetMinus" (formula "30"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "notRight" (formula "30"))
                                 (rule "elementOfSetMinus" (formula "29"))
                                  (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "1")) (ifInst ""  (formula "27")))
                                 (rule "false_right" (formula "29"))
                                 (rule "elementOfSetMinus" (formula "29"))
                                 (rule "replace_known_left" (formula "29") (term "0,1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "false_right" (formula "29"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "30"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "27"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "28") (ifseqformula "1"))
                              )
                           )
                           (branch "self.right.right = null FALSE"
                              (rule "commuteUnion_2" (formula "26") (term "1,1,0,1"))
                              (rule "ifthenelse_split" (formula "26") (term "1,1,1,0,1"))
                              (branch "self.right.left = null TRUE"
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "associativeLawUnion" (formula "29") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,0") (ifseqformula "17"))
                                 (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "30") (term "1,1,1,1") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "27"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "equalityToElementOfRight" (formula "29") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "allRight" (formula "29") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "29") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "29"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfUnion" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "elementOfSetMinus" (formula "30"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "notRight" (formula "30"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "14"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "elementOfUnion" (formula "31"))
                                 (rule "orRight" (formula "31"))
                                 (rule "elementOfUnion" (formula "29"))
                                 (rule "orRight" (formula "29"))
                                 (rule "elementOfSingleton" (formula "30"))
                                 (rule "elementOfSingleton" (formula "29"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "30"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "33"))
                                 (rule "elementOfSetMinus" (formula "32"))
                                  (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "27")))
                                 (rule "false_right" (formula "32"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "32") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "32") (term "1,0,1"))
                                 (rule "replace_known_right" (formula "32") (term "1,0,1") (ifseqformula "30"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "27"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "28") (ifseqformula "1"))
                              )
                              (branch "self.right.left = null FALSE"
                                 (rule "commuteUnion_2" (formula "27") (term "1,1,0,1"))
                                 (rule "associativeLawUnion" (formula "29") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "23") (term "0") (ifseqformula "16"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "24"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "cut_direct" (formula "28") (term "0"))
                                 (branch "CUT: self.right.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "equalityToElementOfRight" (formula "29") (inst "fv=fv") (inst "ov=ov"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "allRight" (formula "29") (inst "sk=ov_0"))
                                    (rule "allRight" (formula "29") (inst "sk=fv_0"))
                                    (rule "notRight" (formula "29"))
                                    (rule "elementOfIntersect" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "elementOfSetMinus" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "elementOfSetMinus" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "elementOfUnion" (formula "26"))
                                    (rule "orRight" (formula "26"))
                                    (rule "elementOfSingleton" (formula "27"))
                                    (rule "elementOfUnion" (formula "25"))
                                    (rule "orRight" (formula "25"))
                                    (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "16"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "12"))
                                     (builtin "One Step Simplification" (formula "25"))
                                    (rule "elementOfUnion" (formula "29"))
                                    (rule "orRight" (formula "29"))
                                    (rule "elementOfSingleton" (formula "30"))
                                    (rule "elementOfSetMinus" (formula "28"))
                                    (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "notRight" (formula "28"))
                                    (rule "elementOfUnion" (formula "28"))
                                    (rule "orRight" (formula "28"))
                                    (rule "elementOfUnion" (formula "30"))
                                    (rule "orRight" (formula "30"))
                                    (rule "elementOfSingleton" (formula "30"))
                                    (rule "elementOfSingleton" (formula "31"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "1"))
                                    (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSetMinus" (formula "29"))
                                    (rule "elementOfSetMinus" (formula "28"))
                                     (builtin "One Step Simplification" (formula "28") (ifInst ""  (formula "26")))
                                    (rule "false_right" (formula "28"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "1"))
                                    (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfUnion" (formula "28") (term "0,1"))
                                    (rule "elementOfSingleton" (formula "28") (term "1,0,1"))
                                    (rule "replace_known_right" (formula "28") (term "1,0,1") (ifseqformula "30"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "0"))
                                    (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "26"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "close" (formula "27") (ifseqformula "1"))
                                 )
                                 (branch "CUT: self.right.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "referencedObjectIsCreatedRight" (formula "28") (ifseqformula "25"))
                                    (rule "close" (formula "28") (ifseqformula "17"))
                                 )
                              )
                           )
                        )
                        (branch "self.left.right = null FALSE"
                           (rule "associativeLawUnion" (formula "21") (term "1,1,0,1,1,0,0"))
                           (rule "associativeLawUnion" (formula "26") (term "1,1,0,1,0,0,1"))
                           (rule "associativeLawUnion" (formula "21") (term "0,1,1,1,1,0,0"))
                           (rule "associativeLawUnion" (formula "26") (term "0,1,1,1,0,0,1"))
                           (rule "associativeLawUnion" (formula "26") (term "0,1,0,0,1,0,0,1"))
                           (rule "associativeLawUnion" (formula "21") (term "0,1,1,0,1,1,0,0"))
                           (rule "associativeLawUnion" (formula "26") (term "0,1,1,0,1,0,0,1"))
                           (rule "ifthenelse_split" (formula "26") (term "1,1,1,0,1"))
                           (branch "self.right.right = null TRUE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "ifthenelse_split" (formula "27") (term "1,1,1,0,1"))
                              (branch "self.right.left = null TRUE"
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "associativeLawUnion" (formula "30") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "1") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "27"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "1,1,1,0") (ifseqformula "19"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "equalityToElementOfRight" (formula "30") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "allRight" (formula "30") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "30") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "30"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "28"))
                                 (rule "orRight" (formula "28"))
                                 (rule "elementOfSingleton" (formula "28"))
                                 (rule "elementOfSingleton" (formula "29"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "14"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "20"))
                                 (rule "elementOfUnion" (formula "30"))
                                 (rule "orRight" (formula "30"))
                                 (rule "elementOfSetMinus" (formula "31"))
                                 (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "notRight" (formula "31"))
                                 (rule "elementOfUnion" (formula "31"))
                                 (rule "orRight" (formula "31"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "32"))
                                 (rule "elementOfSetMinus" (formula "31"))
                                  (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "29")))
                                 (rule "false_right" (formula "31"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "30"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "31") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "31") (term "1,0,1"))
                                 (rule "replace_known_right" (formula "31") (term "1,0,1") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "30") (ifseqformula "1"))
                              )
                              (branch "self.right.left = null FALSE"
                                 (rule "associativeLawUnion" (formula "30") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "4") (term "1,0") (ifseqformula "17"))
                                 (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "4"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "1,1,1,1") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "equalityToElementOfRight" (formula "30") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "allRight" (formula "30") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "30") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "30"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfUnion" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "elementOfSetMinus" (formula "29"))
                                 (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "notRight" (formula "29"))
                                 (rule "elementOfUnion" (formula "29"))
                                 (rule "orRight" (formula "29"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "14"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "disjointNotInOtherLocset1" (formula "2") (ifseqformula "20"))
                                 (rule "elementOfUnion" (formula "30"))
                                 (rule "orRight" (formula "30"))
                                 (rule "elementOfSingleton" (formula "30"))
                                 (rule "elementOfSingleton" (formula "31"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "34"))
                                 (rule "elementOfSetMinus" (formula "33"))
                                  (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "28")))
                                 (rule "false_right" (formula "33"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "33") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "33") (term "1,0,1"))
                                 (rule "replace_known_right" (formula "33") (term "1,0,1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "29") (ifseqformula "1"))
                              )
                           )
                           (branch "self.right.right = null FALSE"
                              (rule "commuteUnion_2" (formula "27") (term "1,1,0,1"))
                              (rule "ifthenelse_split" (formula "27") (term "1,1,1,0,1"))
                              (branch "self.right.left = null TRUE"
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "associativeLawUnion" (formula "30") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "25") (term "0") (ifseqformula "17"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "1,1,1,1") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "equalityToElementOfRight" (formula "30") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "allRight" (formula "30") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "30") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "30"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfSingleton" (formula "28"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "13"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "19"))
                                 (rule "elementOfUnion" (formula "31"))
                                 (rule "orRight" (formula "31"))
                                 (rule "elementOfSingleton" (formula "31"))
                                 (rule "elementOfSingleton" (formula "32"))
                                 (rule "elementOfSetMinus" (formula "30"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "notRight" (formula "30"))
                                 (rule "elementOfUnion" (formula "30"))
                                 (rule "orRight" (formula "30"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "30"))
                                  (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "28")))
                                 (rule "false_right" (formula "30"))
                                 (rule "elementOfSetMinus" (formula "30"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "30") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "30") (term "1,0,1"))
                                 (rule "replace_known_right" (formula "30") (term "1,0,1") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "29") (ifseqformula "1"))
                              )
                              (branch "self.right.left = null FALSE"
                                 (rule "commuteUnion_2" (formula "28") (term "1,1,0,1"))
                                 (rule "associativeLawUnion" (formula "30") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "1") (ifseqformula "16"))
                                 (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "cut_direct" (formula "29") (term "0"))
                                 (branch "CUT: self.right.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "equalityToElementOfRight" (formula "30") (inst "fv=fv") (inst "ov=ov"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "allRight" (formula "30") (inst "sk=ov_0"))
                                    (rule "allRight" (formula "30") (inst "sk=fv_0"))
                                    (rule "notRight" (formula "30"))
                                    (rule "elementOfIntersect" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "elementOfSetMinus" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "elementOfSetMinus" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "elementOfUnion" (formula "26"))
                                    (rule "orRight" (formula "26"))
                                    (rule "elementOfUnion" (formula "25"))
                                    (rule "orRight" (formula "25"))
                                    (rule "elementOfSingleton" (formula "26"))
                                    (rule "elementOfSetMinus" (formula "28"))
                                    (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "notRight" (formula "28"))
                                    (rule "disjointNotInOtherLocset1" (formula "2") (ifseqformula "19"))
                                    (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "13"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "elementOfUnion" (formula "30"))
                                    (rule "orRight" (formula "30"))
                                    (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "17"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "elementOfUnion" (formula "29"))
                                    (rule "orRight" (formula "29"))
                                    (rule "elementOfSingleton" (formula "30"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "1"))
                                    (rule "elementOfSetMinus" (formula "33"))
                                    (rule "elementOfSetMinus" (formula "32"))
                                     (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "27")))
                                    (rule "false_right" (formula "32"))
                                    (rule "elementOfUnion" (formula "29"))
                                    (rule "orRight" (formula "29"))
                                    (rule "elementOfSingleton" (formula "29"))
                                    (rule "elementOfSingleton" (formula "30"))
                                    (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "30"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfUnion" (formula "33") (term "0,1"))
                                    (rule "replace_known_left" (formula "33") (term "0,0,1") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "false_right" (formula "33"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "1"))
                                    (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "0"))
                                    (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "close" (formula "28") (ifseqformula "1"))
                                 )
                                 (branch "CUT: self.right.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "26"))
                                    (rule "close" (formula "29") (ifseqformula "17"))
                                 )
                              )
                           )
                        )
                     )
                     (branch "self.left.left = null FALSE"
                        (rule "ifthenelse_split" (formula "15") (term "1,0"))
                        (branch "self.left.right = null TRUE"
                            (builtin "One Step Simplification" (formula "16"))
                           (rule "true_left" (formula "16"))
                           (rule "associativeLawUnion" (formula "21") (term "1,1,0,1,1,0,0"))
                           (rule "associativeLawUnion" (formula "26") (term "1,1,0,1,0,0,1"))
                           (rule "associativeLawUnion" (formula "21") (term "0,1,1,1,1,0,0"))
                           (rule "associativeLawUnion" (formula "26") (term "0,1,1,1,0,0,1"))
                           (rule "associativeLawUnion" (formula "26") (term "0,1,0,0,1,0,0,1"))
                           (rule "associativeLawUnion" (formula "21") (term "0,1,1,0,1,1,0,0"))
                           (rule "associativeLawUnion" (formula "26") (term "0,1,1,0,1,0,0,1"))
                           (rule "ifthenelse_split" (formula "26") (term "1,1,1,0,1"))
                           (branch "self.right.right = null TRUE"
                               (builtin "One Step Simplification" (formula "27"))
                              (rule "ifthenelse_split" (formula "27") (term "1,1,1,0,1"))
                              (branch "self.right.left = null TRUE"
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "associativeLawUnion" (formula "30") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "26") (term "0") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "27"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "31") (term "1,1,1,1") (ifseqformula "19"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "equalityToElementOfRight" (formula "30") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "allRight" (formula "30") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "30") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "30"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "28"))
                                 (rule "orRight" (formula "28"))
                                 (rule "elementOfSingleton" (formula "28"))
                                 (rule "elementOfSingleton" (formula "29"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "19"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "14"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "elementOfSetMinus" (formula "31"))
                                 (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "notRight" (formula "31"))
                                 (rule "elementOfUnion" (formula "31"))
                                 (rule "orRight" (formula "31"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "34"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "32"))
                                 (rule "elementOfSetMinus" (formula "31"))
                                  (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "29")))
                                 (rule "false_right" (formula "31"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "31") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "31") (term "1,0,1"))
                                 (rule "replace_known_right" (formula "31") (term "1,0,1") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "30") (ifseqformula "1"))
                              )
                              (branch "self.right.left = null FALSE"
                                 (rule "associativeLawUnion" (formula "30") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "1,1,0") (ifseqformula "17"))
                                 (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "equalityToElementOfRight" (formula "30") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "allRight" (formula "30") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "30") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "30"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfSingleton" (formula "28"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "13"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "18"))
                                 (rule "elementOfUnion" (formula "31"))
                                 (rule "orRight" (formula "31"))
                                 (rule "elementOfSingleton" (formula "31"))
                                 (rule "elementOfSingleton" (formula "32"))
                                 (rule "elementOfSetMinus" (formula "30"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "notRight" (formula "30"))
                                 (rule "elementOfUnion" (formula "30"))
                                 (rule "orRight" (formula "30"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "30"))
                                  (builtin "One Step Simplification" (formula "30") (ifInst ""  (formula "28")))
                                 (rule "false_right" (formula "30"))
                                 (rule "elementOfSetMinus" (formula "30"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "30") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "30") (term "1,0,1"))
                                 (rule "replace_known_right" (formula "30") (term "1,0,1") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "29") (ifseqformula "1"))
                              )
                           )
                           (branch "self.right.right = null FALSE"
                              (rule "commuteUnion_2" (formula "27") (term "1,1,0,1"))
                              (rule "ifthenelse_split" (formula "27") (term "1,1,1,0,1"))
                              (branch "self.right.left = null TRUE"
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "associativeLawUnion" (formula "30") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "1,1,0") (ifseqformula "17"))
                                 (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "26"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "27") (term "0") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "30") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "equalityToElementOfRight" (formula "30") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "30"))
                                 (rule "allRight" (formula "30") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "30") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "30"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfUnion" (formula "26"))
                                 (rule "orRight" (formula "26"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "elementOfSetMinus" (formula "29"))
                                 (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "notRight" (formula "29"))
                                 (rule "elementOfUnion" (formula "29"))
                                 (rule "orRight" (formula "29"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "18"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "14"))
                                  (builtin "One Step Simplification" (formula "27"))
                                 (rule "disjointNotInOtherLocset1" (formula "2") (ifseqformula "19"))
                                 (rule "elementOfUnion" (formula "30"))
                                 (rule "orRight" (formula "30"))
                                 (rule "elementOfSingleton" (formula "30"))
                                 (rule "elementOfSingleton" (formula "31"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "33"))
                                  (builtin "One Step Simplification" (formula "33") (ifInst ""  (formula "28")))
                                 (rule "false_right" (formula "33"))
                                 (rule "elementOfSetMinus" (formula "33"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "33") (term "0,1"))
                                 (rule "elementOfSingleton" (formula "33") (term "1,0,1"))
                                 (rule "replace_known_right" (formula "33") (term "1,0,1") (ifseqformula "31"))
                                  (builtin "One Step Simplification" (formula "33"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "0"))
                                 (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "29") (ifseqformula "1"))
                              )
                              (branch "self.right.left = null FALSE"
                                 (rule "commuteUnion_2" (formula "28") (term "1,1,0,1"))
                                 (rule "associativeLawUnion" (formula "30") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "24") (term "0") (ifseqformula "16"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "25"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "cut_direct" (formula "29") (term "0"))
                                 (branch "CUT: self.right.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "equalityToElementOfRight" (formula "30") (inst "fv=fv") (inst "ov=ov"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "allRight" (formula "30") (inst "sk=ov_0"))
                                    (rule "allRight" (formula "30") (inst "sk=fv_0"))
                                    (rule "notRight" (formula "30"))
                                    (rule "elementOfIntersect" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "elementOfSetMinus" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "elementOfSetMinus" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "elementOfUnion" (formula "26"))
                                    (rule "orRight" (formula "26"))
                                    (rule "elementOfUnion" (formula "25"))
                                    (rule "orRight" (formula "25"))
                                    (rule "elementOfSingleton" (formula "26"))
                                    (rule "elementOfSetMinus" (formula "28"))
                                    (rule "replace_known_left" (formula "28") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "28"))
                                    (rule "notRight" (formula "28"))
                                    (rule "disjointNotInOtherLocset1" (formula "2") (ifseqformula "18"))
                                    (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "13"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "elementOfUnion" (formula "30"))
                                    (rule "orRight" (formula "30"))
                                    (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "17"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "elementOfUnion" (formula "29"))
                                    (rule "orRight" (formula "29"))
                                    (rule "elementOfSingleton" (formula "30"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "1"))
                                    (rule "elementOfSetMinus" (formula "33"))
                                    (rule "elementOfSetMinus" (formula "32"))
                                     (builtin "One Step Simplification" (formula "32") (ifInst ""  (formula "27")))
                                    (rule "false_right" (formula "32"))
                                    (rule "elementOfUnion" (formula "29"))
                                    (rule "orRight" (formula "29"))
                                    (rule "elementOfSingleton" (formula "29"))
                                    (rule "elementOfSingleton" (formula "30"))
                                    (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "30"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfUnion" (formula "33") (term "0,1"))
                                    (rule "replace_known_left" (formula "33") (term "0,0,1") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "false_right" (formula "33"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "1"))
                                    (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "26"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "0"))
                                    (rule "replace_known_right" (formula "1") (term "0,0") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "close" (formula "28") (ifseqformula "1"))
                                 )
                                 (branch "CUT: self.right.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "26"))
                                    (rule "close" (formula "29") (ifseqformula "17"))
                                 )
                              )
                           )
                        )
                        (branch "self.left.right = null FALSE"
                           (rule "associativeLawUnion" (formula "21") (term "1,1,0,1,1,0,0"))
                           (rule "associativeLawUnion" (formula "27") (term "1,1,0,1,0,0,1"))
                           (rule "associativeLawUnion" (formula "21") (term "0,1,1,1,1,0,0"))
                           (rule "associativeLawUnion" (formula "27") (term "0,1,1,1,0,0,1"))
                           (rule "associativeLawUnion" (formula "27") (term "0,1,0,0,1,0,0,1"))
                           (rule "associativeLawUnion" (formula "21") (term "0,1,1,0,1,1,0,0"))
                           (rule "associativeLawUnion" (formula "27") (term "0,1,1,0,1,0,0,1"))
                           (rule "ifthenelse_split" (formula "27") (term "1,1,1,0,1"))
                           (branch "self.right.right = null TRUE"
                               (builtin "One Step Simplification" (formula "28"))
                              (rule "ifthenelse_split" (formula "28") (term "1,1,1,0,1"))
                              (branch "self.right.left = null TRUE"
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "associativeLawUnion" (formula "31") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "8") (term "1") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "8"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "29") (term "0") (ifseqformula "19"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "30"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "equalityToElementOfRight" (formula "31") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "allRight" (formula "31") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "31") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "31"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "notLeft" (formula "2"))
                                 (rule "elementOfUnion" (formula "28"))
                                 (rule "orRight" (formula "28"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfSingleton" (formula "28"))
                                 (rule "elementOfSingleton" (formula "27"))
                                 (rule "elementOfUnion" (formula "29"))
                                 (rule "orRight" (formula "29"))
                                 (rule "elementOfSetMinus" (formula "31"))
                                 (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "notRight" (formula "31"))
                                 (rule "disjointNotInOtherLocset1" (formula "2") (ifseqformula "20"))
                                 (rule "disjointNotInOtherLocset1" (formula "2") (ifseqformula "21"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "15"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "disjointNotInOtherLocset2" (formula "2") (ifseqformula "19"))
                                  (builtin "One Step Simplification" (formula "28"))
                                 (rule "elementOfSetMinus" (formula "34"))
                                  (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "1")) (ifInst ""  (formula "29")))
                                 (rule "false_right" (formula "34"))
                                 (rule "elementOfSetMinus" (formula "34"))
                                 (rule "replace_known_left" (formula "34") (term "0,1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "34"))
                                 (rule "false_right" (formula "34"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "33"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "30") (ifseqformula "1"))
                              )
                              (branch "self.right.left = null FALSE"
                                 (rule "associativeLawUnion" (formula "31") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "6") (term "1,1,0") (ifseqformula "17"))
                                 (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "27"))
                                  (builtin "One Step Simplification" (formula "6"))
                                 (rule "cut_direct" (formula "30") (term "0"))
                                 (branch "CUT: self.right.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "equalityToElementOfRight" (formula "31") (inst "fv=fv") (inst "ov=ov"))
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "allRight" (formula "31") (inst "sk=ov_0"))
                                    (rule "allRight" (formula "31") (inst "sk=fv_0"))
                                    (rule "notRight" (formula "31"))
                                    (rule "elementOfIntersect" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "elementOfSetMinus" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "elementOfSetMinus" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "notLeft" (formula "2"))
                                    (rule "elementOfUnion" (formula "27"))
                                    (rule "orRight" (formula "27"))
                                    (rule "elementOfUnion" (formula "26"))
                                    (rule "orRight" (formula "26"))
                                    (rule "elementOfSingleton" (formula "27"))
                                    (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "18"))
                                    (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "19"))
                                    (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "13"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                                     (builtin "One Step Simplification" (formula "26"))
                                    (rule "elementOfSetMinus" (formula "33"))
                                    (rule "replace_known_left" (formula "33") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "33"))
                                    (rule "notRight" (formula "33"))
                                    (rule "elementOfUnion" (formula "33"))
                                    (rule "orRight" (formula "33"))
                                    (rule "elementOfUnion" (formula "31"))
                                    (rule "orRight" (formula "31"))
                                    (rule "elementOfSingleton" (formula "32"))
                                    (rule "elementOfSingleton" (formula "31"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "1"))
                                    (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSetMinus" (formula "35"))
                                    (rule "elementOfSetMinus" (formula "34"))
                                     (builtin "One Step Simplification" (formula "34") (ifInst ""  (formula "28")))
                                    (rule "false_right" (formula "34"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "1"))
                                    (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfUnion" (formula "34") (term "0,1"))
                                    (rule "elementOfSingleton" (formula "34") (term "1,0,1"))
                                    (rule "replace_known_right" (formula "34") (term "1,0,1") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "34"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "1"))
                                    (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "close" (formula "29") (ifseqformula "1"))
                                 )
                                 (branch "CUT: self.right.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "31"))
                                    (rule "referencedObjectIsCreatedRight" (formula "30") (ifseqformula "28"))
                                    (rule "close" (formula "30") (ifseqformula "18"))
                                 )
                              )
                           )
                           (branch "self.right.right = null FALSE"
                              (rule "commuteUnion_2" (formula "28") (term "1,1,0,1"))
                              (rule "ifthenelse_split" (formula "28") (term "1,1,1,0,1"))
                              (branch "self.right.left = null TRUE"
                                  (builtin "One Step Simplification" (formula "29"))
                                 (rule "associativeLawUnion" (formula "31") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "7") (term "1") (ifseqformula "17"))
                                 (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "27"))
                                  (builtin "One Step Simplification" (formula "7"))
                                 (rule "onlyCreatedObjectsAreReferenced" (formula "28") (term "0") (ifseqformula "18"))
                                 (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "29"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "replace_known_left" (formula "31") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "equalityToElementOfRight" (formula "31") (inst "fv=fv") (inst "ov=ov"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "allRight" (formula "31") (inst "sk=ov_0"))
                                 (rule "allRight" (formula "31") (inst "sk=fv_0"))
                                 (rule "notRight" (formula "31"))
                                 (rule "elementOfIntersect" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "elementOfSetMinus" (formula "2"))
                                 (rule "andLeft" (formula "2"))
                                 (rule "notLeft" (formula "3"))
                                 (rule "elementOfSetMinus" (formula "1"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "notLeft" (formula "1"))
                                 (rule "elementOfUnion" (formula "27"))
                                 (rule "orRight" (formula "27"))
                                 (rule "elementOfSingleton" (formula "28"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "17"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "19"))
                                 (rule "elementOfUnion" (formula "28"))
                                 (rule "orRight" (formula "28"))
                                 (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "13"))
                                  (builtin "One Step Simplification" (formula "26"))
                                 (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "18"))
                                 (rule "elementOfUnion" (formula "32"))
                                 (rule "orRight" (formula "32"))
                                 (rule "elementOfSingleton" (formula "32"))
                                 (rule "elementOfSingleton" (formula "33"))
                                 (rule "elementOfUnion" (formula "30"))
                                 (rule "orRight" (formula "30"))
                                 (rule "elementOfSetMinus" (formula "32"))
                                 (rule "replace_known_left" (formula "32") (term "0") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "32"))
                                 (rule "notRight" (formula "32"))
                                 (rule "elementOfSetMinus" (formula "31"))
                                  (builtin "One Step Simplification" (formula "31") (ifInst ""  (formula "1")) (ifInst ""  (formula "28")))
                                 (rule "false_right" (formula "31"))
                                 (rule "elementOfSetMinus" (formula "31"))
                                 (rule "replace_known_left" (formula "31") (term "0,1") (ifseqformula "1"))
                                  (builtin "One Step Simplification" (formula "31"))
                                 (rule "false_right" (formula "31"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "32"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "30"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfUnion" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1") (term "1"))
                                 (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                                  (builtin "One Step Simplification" (formula "1"))
                                 (rule "elementOfSingleton" (formula "1"))
                                 (rule "andLeft" (formula "1"))
                                 (rule "close" (formula "29") (ifseqformula "1"))
                              )
                              (branch "self.right.left = null FALSE"
                                 (rule "commuteUnion_2" (formula "29") (term "1,1,0,1"))
                                 (rule "associativeLawUnion" (formula "31") (term "0,1,0,0,1,1,0,1,1,0"))
                                 (rule "cut_direct" (formula "29") (term "0"))
                                 (branch "CUT: self.right.<created> = TRUE TRUE"
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "equalityToElementOfRight" (formula "30") (inst "fv=fv") (inst "ov=ov"))
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "allRight" (formula "30") (inst "sk=ov_0"))
                                    (rule "allRight" (formula "30") (inst "sk=fv_0"))
                                    (rule "notRight" (formula "30"))
                                    (rule "elementOfIntersect" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "elementOfSetMinus" (formula "2"))
                                    (rule "andLeft" (formula "2"))
                                    (rule "notLeft" (formula "3"))
                                    (rule "elementOfSetMinus" (formula "1"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "notLeft" (formula "1"))
                                    (rule "elementOfUnion" (formula "25"))
                                    (rule "orRight" (formula "25"))
                                    (rule "elementOfSingleton" (formula "26"))
                                    (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "15"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "disjointNotInOtherLocset2" (formula "1") (ifseqformula "11"))
                                     (builtin "One Step Simplification" (formula "24"))
                                    (rule "elementOfUnion" (formula "26"))
                                    (rule "orRight" (formula "26"))
                                    (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "17"))
                                    (rule "disjointNotInOtherLocset1" (formula "1") (ifseqformula "16"))
                                    (rule "elementOfUnion" (formula "30"))
                                    (rule "orRight" (formula "30"))
                                    (rule "elementOfSingleton" (formula "31"))
                                    (rule "elementOfSetMinus" (formula "29"))
                                    (rule "replace_known_left" (formula "29") (term "0") (ifseqformula "1"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "notRight" (formula "29"))
                                    (rule "elementOfUnion" (formula "29"))
                                    (rule "orRight" (formula "29"))
                                    (rule "elementOfUnion" (formula "31"))
                                    (rule "orRight" (formula "31"))
                                    (rule "elementOfSingleton" (formula "31"))
                                    (rule "elementOfSingleton" (formula "32"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "1"))
                                    (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "32"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSetMinus" (formula "29"))
                                     (builtin "One Step Simplification" (formula "29") (ifInst ""  (formula "27")))
                                    (rule "false_right" (formula "29"))
                                    (rule "elementOfSetMinus" (formula "29"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "1"))
                                    (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "28"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfUnion" (formula "29") (term "0,1"))
                                    (rule "elementOfSingleton" (formula "29") (term "1,0,1"))
                                    (rule "replace_known_right" (formula "29") (term "1,0,1") (ifseqformula "31"))
                                     (builtin "One Step Simplification" (formula "29"))
                                    (rule "elementOfUnion" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1") (term "1"))
                                    (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "27"))
                                     (builtin "One Step Simplification" (formula "1"))
                                    (rule "elementOfSingleton" (formula "1"))
                                    (rule "andLeft" (formula "1"))
                                    (rule "close" (formula "28") (ifseqformula "1"))
                                 )
                                 (branch "CUT: self.right.<created> = TRUE FALSE"
                                     (builtin "One Step Simplification" (formula "30"))
                                    (rule "referencedObjectIsCreatedRight" (formula "29") (ifseqformula "26"))
                                    (rule "close" (formula "29") (ifseqformula "16"))
                                 )
                              )
                           )
                        )
                     )
                  )
               )
            )
            (branch "Case 2"
               (rule "unlimit_java_lang_Object__inv_" (formula "3") (term "1,1,1,0,0,0") (userinteraction))
               (rule "cut_direct" (formula "3") (term "1,0,1") (userinteraction))
               (branch "CUT: self.right = null TRUE"
                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "eqSymm" (formula "16"))
                  (rule "eqSymm" (formula "1"))
                  (rule "replace_known_left" (formula "2") (term "0,1,0,1,1,1,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")))
                  (rule "replace_known_left" (formula "16") (term "0,1,1,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "16") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
                  (rule "replace_known_left" (formula "13") (term "0,1,0,1,1,1,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "3")))
                  (rule "replace_known_left" (formula "1") (term "0,1,1,0,1,1,0,0") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")))
                  (rule "disjointDefinition" (formula "5") (term "1,0,1"))
                  (rule "measuredByCheck" (formula "14") (ifseqformula "12"))
                  (rule "precOfInt" (formula "14"))
                  (rule "inEqSimp_ltToLeq" (formula "4"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "14") (term "1"))
                  (rule "polySimp_mulComm0" (formula "14") (term "1,0,0,1"))
                  (rule "inEqSimp_commuteLeq" (formula "14") (term "0"))
                  (rule "applyEq" (formula "1") (term "1") (ifseqformula "3"))
                  (rule "applyEq" (formula "14") (term "1,1,0,1") (ifseqformula "3"))
                  (rule "polySimp_addComm1" (formula "14") (term "0,1"))
                  (rule "applyEq" (formula "14") (term "1,0,0") (ifseqformula "3"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "4"))
                  (rule "polySimp_mulLiterals" (formula "4") (term "0"))
                  (rule "polySimp_elimOne" (formula "4") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "14") (term "1"))
                  (rule "polySimp_mulLiterals" (formula "14") (term "0,1"))
                  (rule "polySimp_elimOne" (formula "14") (term "0,1"))
                  (rule "setMinusOfUnion" (formula "2") (term "1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "16") (term "1,1,0,0,0,1,0"))
                  (rule "setMinusOfUnion" (formula "13") (term "1,1,0,0"))
                  (rule "setMinusOfUnion" (formula "1") (term "1,1,0,0"))
                  (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_left_0"))
                  (rule "simplifySelectOfAnon" (formula "2"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "16")) (ifInst ""  (formula "11")))
                  (rule "eqSymm" (formula "3"))
                  (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "hideAuxiliaryEq" (formula "3"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0"))
                  (rule "elementOfSetMinus" (formula "2") (term "1,0"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "pullOutSelect" (formula "16") (term "0,0,1,0") (inst "selectSK=Tree_key_0"))
                  (rule "simplifySelectOfAnon" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "11")))
                  (rule "eqSymm" (formula "17"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "elementOfUnion" (formula "1") (term "0,0"))
                  (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfSetMinus" (formula "1") (term "1,0,0"))
                  (rule "elementOfUnion" (formula "1") (term "0,1,1,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "elementOfUnion" (formula "1") (term "0,1,1,0,0"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,1,1,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_right_0"))
                  (rule "simplifySelectOfAnon" (formula "2"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "17")) (ifInst ""  (formula "12")))
                  (rule "applyEqRigid" (formula "2") (term "1") (ifseqformula "3"))
                  (rule "ifEqualsNull" (formula "2"))
                  (rule "replace_known_left" (formula "2") (term "1,1") (ifseqformula "5"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0"))
                  (rule "elementOfUnion" (formula "2") (term "1"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSetMinus" (formula "2") (term "1,0,0,0"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSetMinus" (formula "2") (term "0,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,1"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,0,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,1"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSetMinus" (formula "2") (term "1,1"))
                  (rule "elementOfUnion" (formula "2") (term "0,0,0,0,0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,0,0,0,0"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,1"))
                  (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfUnion" (formula "2") (term "0,1,1,1"))
                  (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "commuteUnion_2" (formula "15") (term "1,1,1,1,0,0"))
                  (rule "commuteUnion_2" (formula "15") (term "1,0,1,1,0,0"))
                  (rule "commuteUnion" (formula "15") (term "0,1,1,1,1,0,0"))
                  (rule "commuteUnion" (formula "15") (term "0,1,0,1,1,0,0"))
                  (rule "limit_Tree_footprint" (formula "7") (term "1,0,1,0,1"))
                  (rule "applyEq" (formula "1") (term "2,2,0,1,0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "2") (term "2,2,0,1,0,0,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "2") (term "2,2,0,1,1") (ifseqformula "7"))
                  (rule "applyEq" (formula "4") (term "2,2,0,1,0") (ifseqformula "7"))
                  (rule "applyEq" (formula "16") (term "2,0,1,1,1,0,0") (ifseqformula "7"))
                  (rule "cnf_rightDist" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "commute_or_2" (formula "4"))
                  (rule "commute_or" (formula "9"))
                  (rule "commute_or" (formula "4") (term "0"))
                  (rule "cnf_rightDist" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "commute_or" (formula "9"))
                  (rule "cnf_rightDist" (formula "4"))
                  (rule "andLeft" (formula "4"))
                  (rule "shift_paren_or" (formula "5"))
                  (rule "commute_or" (formula "5") (term "0"))
                   (builtin "One Step Simplification" (formula "5"))
                  (rule "replace_known_left" (formula "4") (term "0") (ifseqformula "5"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "true_left" (formula "4"))
                  (rule "ifthenelse_split" (formula "21") (term "0,0"))
                  (branch "self.left = null TRUE"
                     (rule "eqSymm" (formula "22"))
                     (rule "replace_known_left" (formula "19") (term "0,1,1,1,1,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                     (rule "replace_known_left" (formula "2") (term "0,2,0,1,1,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                     (rule "applyEqReverse" (formula "22") (term "0,0,1,0") (ifseqformula "2"))
                     (rule "hideAuxiliaryEq" (formula "2"))
                     (rule "replace_known_left" (formula "21") (term "0,0,0") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "21"))
                     (rule "closeTrue" (formula "21"))
                  )
                  (branch "self.left = null FALSE"
                     (rule "eqSymm" (formula "22"))
                     (rule "replace_known_right" (formula "1") (term "0,2,0,1,0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                     (rule "replace_known_right" (formula "18") (term "0,1,1,1,1,1,0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                     (rule "replace_known_right" (formula "22") (term "0,0,0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "22"))
                     (rule "eqSymm" (formula "22"))
                     (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "8"))
                     (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "9"))
                     (rule "disjointAllFields" (formula "1") (term "0,1,0,0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "10"))
                     (rule "replace_known_right" (formula "4") (term "0,2,0,1") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "replace_known_right" (formula "2") (term "0,2,0,0,1") (ifseqformula "21"))
                      (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                     (rule "disjointAllFields" (formula "2") (term "0,1,1") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "disjointAllFields" (formula "2") (term "0,1,0,0,0") (ifseqformula "9"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "ifthenelse_negated" (formula "1") (term "0"))
                     (rule "elementOfSingleton" (formula "4") (term "0,1"))
                      (builtin "One Step Simplification" (formula "4"))
                     (rule "true_left" (formula "4"))
                     (rule "elementOfSingleton" (formula "2") (term "0,1"))
                      (builtin "One Step Simplification" (formula "2"))
                     (rule "true_left" (formula "2"))
                     (rule "elementOfSingleton" (formula "1") (term "0,0"))
                      (builtin "One Step Simplification" (formula "1"))
                     (rule "applyEqReverse" (formula "20") (term "0,0,1,1") (ifseqformula "1"))
                      (builtin "One Step Simplification" (formula "20"))
                     (rule "closeTrue" (formula "20"))
                  )
               )
               (branch "CUT: self.right = null FALSE"
                  (rule "Class_invariant_axiom_for_Tree" (formula "3") (term "1,1,1,0,0,0") (inst "k_0=k_0") (inst "k=k") (ifseqformula "10") (userinteraction))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "10")) (ifInst ""  (formula "10")))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "4"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "5"))
                  (rule "andLeft" (formula "7"))
                  (rule "andLeft" (formula "3"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "eqSymm" (formula "1"))
                  (rule "eqSymm" (formula "27"))
                  (rule "eqSymm" (formula "3") (term "0,0"))
                  (rule "eqSymm" (formula "8") (term "0,0,0"))
                  (rule "replace_known_right" (formula "23") (term "0,1,1,0,1,1,0,0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "24")))
                  (rule "replace_known_right" (formula "2") (term "0,1,0,1,1,1,0,0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "24")))
                  (rule "replace_known_right" (formula "27") (term "0,1,1,1") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "27") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
                  (rule "replace_known_right" (formula "1") (term "0,1,0,1,1,1,0,0") (ifseqformula "24"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")))
                  (rule "disjointDefinition" (formula "17") (term "1"))
                  (rule "disjointDefinition" (formula "5") (term "1,0,1"))
                  (rule "disjointDefinition" (formula "7"))
                  (rule "disjointDefinition" (formula "14") (term "1"))
                  (rule "disjointDefinition" (formula "11") (term "1,0,1"))
                  (rule "disjointDefinition" (formula "10") (term "1,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1"))
                  (rule "measuredByCheck" (formula "25") (ifseqformula "22"))
                  (rule "inEqSimp_ltToLeq" (formula "6"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
                  (rule "inEqSimp_ltToLeq" (formula "4"))
                  (rule "add_zero_right" (formula "4") (term "0"))
                  (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
                  (rule "inEqSimp_ltToLeq" (formula "11") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "10") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "10") (term "1,0,0,0,0,1"))
                  (rule "inEqSimp_ltToLeq" (formula "9"))
                  (rule "add_zero_right" (formula "9") (term "0"))
                  (rule "polySimp_mulComm0" (formula "9") (term "1,0"))
                  (rule "precOfInt" (formula "25"))
                  (rule "inEqSimp_ltToLeq" (formula "25") (term "1"))
                  (rule "polySimp_mulComm0" (formula "25") (term "1,0,0,1"))
                  (rule "replace_known_left" (formula "25") (term "1") (ifseqformula "6"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "inEqSimp_leqRight" (formula "25"))
                  (rule "add_zero_right" (formula "1") (term "0"))
                  (rule "polySimp_mulComm0" (formula "1") (term "1,0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "7"))
                  (rule "polySimp_mulComm0" (formula "7") (term "1"))
                  (rule "polySimp_rightDist" (formula "7") (term "1"))
                  (rule "mul_literals" (formula "7") (term "0,1"))
                  (rule "polySimp_mulLiterals" (formula "7") (term "1,1"))
                  (rule "polySimp_elimOne" (formula "7") (term "1,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "5"))
                  (rule "polySimp_mulLiterals" (formula "5") (term "0"))
                  (rule "polySimp_elimOne" (formula "5") (term "0"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "12") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "12") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "12") (term "1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "12") (term "1,1,0,0,1"))
                  (rule "mul_literals" (formula "12") (term "0,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "12") (term "1,1,0,0,1"))
                  (rule "inEqSimp_sepPosMonomial0" (formula "11") (term "0,0,1"))
                  (rule "polySimp_mulComm0" (formula "11") (term "1,0,0,1"))
                  (rule "polySimp_rightDist" (formula "11") (term "1,0,0,1"))
                  (rule "mul_literals" (formula "11") (term "0,1,0,0,1"))
                  (rule "polySimp_mulLiterals" (formula "11") (term "1,1,0,0,1"))
                  (rule "polySimp_elimOne" (formula "11") (term "1,1,0,0,1"))
                  (rule "inEqSimp_sepNegMonomial0" (formula "10"))
                  (rule "polySimp_mulLiterals" (formula "10") (term "0"))
                  (rule "polySimp_elimOne" (formula "10") (term "0"))
                  (rule "inEqSimp_sepNegMonomial1" (formula "1"))
                  (rule "polySimp_mulLiterals" (formula "1") (term "0"))
                  (rule "polySimp_elimOne" (formula "1") (term "0"))
                  (rule "inEqSimp_contradInEq0" (formula "10") (ifseqformula "1"))
                  (rule "qeq_literals" (formula "10") (term "0"))
                   (builtin "One Step Simplification" (formula "10"))
                  (rule "closeFalse" (formula "10"))
               )
            )
         )
         (branch "Case 2"
             (builtin "One Step Simplification" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "andLeft" (formula "3"))
            (rule "eqSymm" (formula "18"))
            (rule "eqSymm" (formula "1"))
            (rule "eqSymm" (formula "3") (term "0,0,0"))
            (rule "disjointDefinition" (formula "9") (term "1"))
            (rule "disjointDefinition" (formula "6") (term "1,0,1"))
            (rule "disjointDefinition" (formula "5") (term "1,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "6") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1"))
            (rule "inEqSimp_ltToLeq" (formula "4"))
            (rule "add_zero_right" (formula "4") (term "0"))
            (rule "polySimp_mulComm0" (formula "4") (term "1,0"))
            (rule "applyEq" (formula "18") (term "2,1,1,0") (ifseqformula "16"))
            (rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "6") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "6") (term "1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0,1"))
            (rule "mul_literals" (formula "6") (term "0,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "6") (term "1,1,0,0,1"))
            (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,1"))
            (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
            (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
            (rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
            (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1"))
            (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1"))
            (rule "inEqSimp_sepNegMonomial0" (formula "4"))
            (rule "polySimp_mulLiterals" (formula "4") (term "0"))
            (rule "polySimp_elimOne" (formula "4") (term "0"))
            (rule "setMinusOfUnion" (formula "16") (term "1,1,0,0"))
            (rule "setMinusOfUnion" (formula "2") (term "1,1,0,0"))
            (rule "setMinusOfUnion" (formula "15") (term "1,1,0,0"))
            (rule "setMinusOfUnion" (formula "18") (term "1,1,0,0,0,1,0"))
            (rule "setMinusOfUnion" (formula "1") (term "1,1,0,0"))
            (rule "setMinusOfUnion" (formula "16") (term "1,1,1,0,0"))
            (rule "setMinusOfUnion" (formula "2") (term "1,1,1,0,0"))
            (rule "setMinusOfUnion" (formula "15") (term "1,1,1,0,0"))
            (rule "setMinusOfUnion" (formula "18") (term "1,1,1,0,0,0,1,0"))
            (rule "setMinusOfUnion" (formula "1") (term "1,1,1,0,0"))
            (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_left_0"))
            (rule "simplifySelectOfAnon" (formula "2"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "18")) (ifInst ""  (formula "13")))
            (rule "eqSymm" (formula "3"))
            (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "elementOfSetMinus" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0"))
            (rule "elementOfSetMinus" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,0,0"))
            (rule "elementOfUnion" (formula "2") (term "1,0"))
            (rule "elementOfUnion" (formula "2") (term "0,0,0,0"))
            (rule "elementOfSingleton" (formula "2") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfSetMinus" (formula "2") (term "1,1,0"))
            (rule "elementOfSetMinus" (formula "2") (term "0,1,0"))
            (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
            (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
            (rule "elementOfSingleton" (formula "2") (term "1,0,1,0,1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
            (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
            (rule "elementOfUnion" (formula "2") (term "0,0,1,0,1,0"))
            (rule "elementOfSingleton" (formula "2") (term "0,0,0,1,0,1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,0,1,1,1,0"))
            (rule "elementOfSingleton" (formula "2") (term "0,0,0,1,1,1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "pullOutSelect" (formula "18") (term "0,0,1,0") (inst "selectSK=Tree_key_0"))
            (rule "simplifySelectOfAnon" (formula "1"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "13")))
            (rule "eqSymm" (formula "19"))
            (rule "elementOfSetMinus" (formula "1") (term "0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "ifthenelse_negated" (formula "1") (term "0"))
            (rule "elementOfUnion" (formula "1") (term "0,0"))
            (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "1,0,0"))
            (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSetMinus" (formula "1") (term "0,1,0,0"))
            (rule "elementOfSetMinus" (formula "1") (term "1,1,0,0"))
            (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
            (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
            (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "0,0,1,0,1,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,0,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
            (rule "elementOfUnion" (formula "1") (term "0,0,1,1,1,0,0"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,1,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "pullOutSelect" (formula "2") (term "0") (inst "selectSK=Tree_right_0"))
            (rule "simplifySelectOfAnon" (formula "2"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "19")) (ifInst ""  (formula "14")))
            (rule "eqSymm" (formula "3"))
            (rule "applyEqReverse" (formula "2") (term "1") (ifseqformula "3"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "hideAuxiliaryEq" (formula "3"))
            (rule "elementOfSetMinus" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0"))
            (rule "elementOfUnion" (formula "2") (term "1,0"))
            (rule "elementOfSetMinus" (formula "2") (term "0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfSetMinus" (formula "2") (term "0,1,0"))
            (rule "elementOfSetMinus" (formula "2") (term "1,1,0"))
            (rule "elementOfUnion" (formula "2") (term "0,0,0"))
            (rule "elementOfSingleton" (formula "2") (term "1,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
            (rule "elementOfSingleton" (formula "2") (term "1,0,1,0,1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,1,0,1,0"))
            (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
            (rule "elementOfSingleton" (formula "2") (term "1,0,1,1,1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,1,1,1,0"))
            (rule "elementOfUnion" (formula "2") (term "0,0,1,0,1,0"))
            (rule "elementOfSingleton" (formula "2") (term "0,0,0,1,0,1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,0,1,1,1,0"))
            (rule "elementOfSingleton" (formula "2") (term "0,0,0,1,1,1,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfUnion" (formula "2") (term "0,0,0"))
            (rule "elementOfUnion" (formula "2") (term "0,0,0,0"))
            (rule "elementOfSingleton" (formula "2") (term "0,0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "commuteUnion_2" (formula "17") (term "1,0,1,1,0,0"))
            (rule "commuteUnion_2" (formula "16") (term "1,0,1,1,0,0"))
            (rule "commuteUnion_2" (formula "17") (term "1,0,1,1,1,0,0"))
            (rule "commuteUnion" (formula "17") (term "1,1,1,1,1,0,0"))
            (rule "commuteUnion" (formula "16") (term "1,1,1,1,1,0,0"))
            (rule "commuteUnion_2" (formula "16") (term "1,0,1,1,1,0,0"))
            (rule "commuteUnion" (formula "17") (term "0,1,0,1,1,0,0"))
            (rule "commuteUnion" (formula "16") (term "0,1,0,1,1,0,0"))
            (rule "commuteUnion_2" (formula "17") (term "0,1,0,1,1,1,0,0"))
            (rule "commuteUnion_2" (formula "16") (term "0,1,0,1,1,1,0,0"))
            (rule "commuteUnion" (formula "17") (term "0,0,1,0,1,1,1,0,0"))
            (rule "commuteUnion" (formula "16") (term "0,0,1,0,1,1,1,0,0"))
            (rule "commute_or" (formula "4") (term "0"))
            (rule "limit_Tree_footprint" (formula "10") (term "0,0,1"))
            (rule "applyEq" (formula "1") (term "2,2,0,0,1,0,0") (ifseqformula "10"))
            (rule "applyEq" (formula "17") (term "2,0,0,1,1,1,0,0") (ifseqformula "10"))
            (rule "applyEq" (formula "3") (term "2,2,0,0,1,0") (ifseqformula "10"))
            (rule "applyEq" (formula "18") (term "2,0,0,1,1,1,0,0") (ifseqformula "10"))
            (rule "applyEq" (formula "2") (term "2,2,0,0,1,0") (ifseqformula "10"))
            (rule "limit_Tree_footprint" (formula "11") (term "1,0,1"))
            (rule "applyEq" (formula "1") (term "2,2,0,1,1,0,0") (ifseqformula "11"))
            (rule "applyEq" (formula "18") (term "2,0,1,1,1,1,0,0") (ifseqformula "11"))
            (rule "applyEq" (formula "19") (term "2,0,1,1,1,1,0,0") (ifseqformula "11"))
            (rule "applyEq" (formula "2") (term "2,2,0,1,1,0") (ifseqformula "11"))
            (rule "applyEq" (formula "3") (term "2,2,0,1,1,0") (ifseqformula "11"))
            (rule "cnf_rightDist" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "cnf_rightDist" (formula "6"))
            (rule "andLeft" (formula "6"))
            (rule "ifthenelse_split" (formula "3") (term "2,0,0,0,0"))
            (branch "self.left = null TRUE"
                (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
               (rule "replace_known_left" (formula "21") (term "0,1,1,0,1,0,1,1,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
               (rule "replace_known_left" (formula "24") (term "0,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "3")))
               (rule "replace_known_left" (formula "22") (term "0,0,0,1,1,1,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
               (rule "replace_known_left" (formula "1") (term "0,2,0,0,1,0,1,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
               (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "true_left" (formula "8"))
               (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "7"))
               (rule "true_left" (formula "7"))
               (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "5"))
               (rule "true_left" (formula "5"))
               (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "12"))
               (rule "true_left" (formula "12"))
               (rule "replace_known_left" (formula "2") (term "0,2,0,0,1,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
               (rule "applyEq" (formula "17") (term "1,1") (ifseqformula "3"))
               (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "3"))
               (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "3"))
               (rule "applyEq" (formula "17") (term "1,0") (ifseqformula "3"))
               (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "3"))
               (rule "commute_or" (formula "7"))
               (rule "commute_or_2" (formula "2"))
               (rule "commute_or_2" (formula "4"))
               (rule "cnf_rightDist" (formula "6"))
               (rule "andLeft" (formula "6"))
               (rule "commute_or" (formula "7"))
               (rule "commute_or" (formula "2") (term "0"))
               (rule "commute_or" (formula "4") (term "0"))
               (rule "ifthenelse_split" (formula "21") (term "1,1,0"))
               (branch "self.right = null TRUE"
                  (rule "eqSymm" (formula "22"))
                  (rule "replace_known_left" (formula "20") (term "0,0,1,1,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "replace_known_left" (formula "2") (term "0,2,0,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "applyEqReverse" (formula "22") (term "0,0,1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "21") (term "0,1,1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "closeTrue" (formula "21"))
               )
               (branch "self.right = null FALSE"
                  (rule "eqSymm" (formula "22"))
                  (rule "replace_known_right" (formula "1") (term "0,2,0,1,1,0,0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                  (rule "replace_known_right" (formula "19") (term "0,0,1,1,1,0,0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                  (rule "replace_known_right" (formula "18") (term "0,0,1,1,1,0,0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                  (rule "replace_known_right" (formula "22") (term "0,1,1,0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "22"))
                  (rule "eqSymm" (formula "22"))
                  (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "6"))
                  (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "7"))
                  (rule "disjointAllFields" (formula "1") (term "0,1,0,0") (ifseqformula "7"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "2") (term "0,2,0,1") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                  (rule "disjointAllFields" (formula "2") (term "0,1") (ifseqformula "7"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "replace_known_right" (formula "4") (term "0,2,0,1") (ifseqformula "21"))
                   (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "21")) (ifInst ""  (formula "21")))
                  (rule "disjointAllFields" (formula "4") (term "0,1") (ifseqformula "7"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "ifthenelse_negated" (formula "1") (term "0"))
                  (rule "elementOfSingleton" (formula "2") (term "0,1"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "true_left" (formula "2"))
                  (rule "elementOfSingleton" (formula "3") (term "0,1"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "true_left" (formula "3"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "20") (term "0,0,1,1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "closeTrue" (formula "20"))
               )
            )
            (branch "self.left = null FALSE"
               (rule "replace_known_right" (formula "20") (term "0,0,0,1,1,1,0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "20") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
               (rule "replace_known_right" (formula "1") (term "0,2,0,0,1,0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
               (rule "replace_known_right" (formula "24") (term "0,0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "22")))
               (rule "replace_known_right" (formula "21") (term "0,1,1,0,1,0,1,1,0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "22")) (ifInst ""  (formula "22")) (ifInst ""  (formula "22")))
               (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "6"))
               (rule "andLeft" (formula "6"))
               (rule "disjointAllFields" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "8"))
               (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "4"))
               (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "15"))
               (rule "replace_known_right" (formula "3") (term "0,2,0,0,1,1,1,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "23")) (ifInst ""  (formula "23")))
               (rule "disjointAllFields" (formula "3") (term "0,0,1,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "replace_known_right" (formula "2") (term "0,2,0,0,1,1,1,0") (ifseqformula "23"))
                (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "23")) (ifInst ""  (formula "23")) (ifInst ""  (formula "23")))
               (rule "disjointAllFields" (formula "2") (term "0,0,1,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,1,1,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSingleton" (formula "3") (term "0,0,1,1,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "elementOfSingleton" (formula "3") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "3"))
               (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
                (builtin "One Step Simplification" (formula "2"))
               (rule "commute_or" (formula "10"))
               (rule "commute_or" (formula "4"))
               (rule "ifthenelse_split" (formula "25") (term "1,1,0"))
               (branch "self.right = null TRUE"
                  (rule "eqSymm" (formula "26"))
                  (rule "replace_known_left" (formula "22") (term "0,0,1,1,1,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "replace_known_left" (formula "2") (term "0,2,0,1,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "applyEqReverse" (formula "26") (term "0,0,1,0") (ifseqformula "2"))
                  (rule "hideAuxiliaryEq" (formula "2"))
                  (rule "replace_known_left" (formula "22") (term "0,1,1,1,1,1,1,1,0,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
                  (rule "replace_known_left" (formula "25") (term "0,1,1,0") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "25"))
                  (rule "closeTrue" (formula "25"))
               )
               (branch "self.right = null FALSE"
                  (rule "eqSymm" (formula "26"))
                  (rule "replace_known_right" (formula "21") (term "0,0,1,1,1,1,0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "25")) (ifInst ""  (formula "25")) (ifInst ""  (formula "25")))
                  (rule "replace_known_right" (formula "1") (term "0,2,0,0,0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "25")) (ifInst ""  (formula "25")))
                  (rule "replace_known_right" (formula "22") (term "0,0,1,1,1,1,0,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "22") (ifInst ""  (formula "25")) (ifInst ""  (formula "25")) (ifInst ""  (formula "25")))
                  (rule "replace_known_right" (formula "26") (term "0,1,1,0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "26"))
                  (rule "eqSymm" (formula "26"))
                  (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "4"))
                  (rule "notLeft" (formula "4"))
                  (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "9"))
                  (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "25"))
                   (builtin "One Step Simplification" (formula "8"))
                  (rule "andLeft" (formula "8"))
                  (rule "disjointAllFields" (formula "1") (term "0,1,0,0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "15"))
                  (rule "replace_known_right" (formula "3") (term "0,2,0,1,0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "26")) (ifInst ""  (formula "26")))
                  (rule "disjointAllFields" (formula "3") (term "0,1,0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "3"))
                  (rule "replace_known_right" (formula "2") (term "0,2,0,1,0") (ifseqformula "26"))
                   (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "26")) (ifInst ""  (formula "26")))
                  (rule "disjointAllFields" (formula "2") (term "0,1,0") (ifseqformula "9"))
                   (builtin "One Step Simplification" (formula "2"))
                  (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "applyEqReverse" (formula "27") (term "0,0,1,1") (ifseqformula "1"))
                   (builtin "One Step Simplification" (formula "27"))
                  (rule "closeTrue" (formula "27"))
               )
            )
         )
      )
   )
   (branch "Assume self.right != self.right@heap[anon( allLocs ∖ self.* ∪ if (self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if (self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ if (self.left = null) then (∅) else ({(self.left, Tree::$isRed)}) ∪ if (self.right = null) then (∅) else ({(self.right, Tree::$isRed)}) ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)]"
       (builtin "One Step Simplification" (formula "3"))
      (rule "notLeft" (formula "1"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "eqSymm" (formula "16"))
      (rule "eqSymm" (formula "14"))
      (rule "eqSymm" (formula "2") (term "0,0,0"))
      (rule "disjointDefinition" (formula "8") (term "1"))
      (rule "disjointDefinition" (formula "5") (term "1,0,1"))
      (rule "disjointDefinition" (formula "4") (term "1,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "5") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1"))
      (rule "inEqSimp_ltToLeq" (formula "3"))
      (rule "add_zero_right" (formula "3") (term "0"))
      (rule "polySimp_mulComm0" (formula "3") (term "1,0"))
      (rule "inEqSimp_sepPosMonomial0" (formula "5") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "5") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "5") (term "1,0,0,1"))
      (rule "mul_literals" (formula "5") (term "0,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "5") (term "1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "5") (term "1,1,0,0,1"))
      (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,1"))
      (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
      (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1"))
      (rule "mul_literals" (formula "4") (term "0,1,0,0,1"))
      (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,1"))
      (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,1"))
      (rule "inEqSimp_sepNegMonomial0" (formula "3"))
      (rule "polySimp_mulLiterals" (formula "3") (term "0"))
      (rule "polySimp_elimOne" (formula "3") (term "0"))
      (rule "setMinusOfUnion" (formula "1") (term "1,1,0,0"))
      (rule "setMinusOfUnion" (formula "16") (term "1,1,0,2,1,1,0"))
      (rule "setMinusOfUnion" (formula "16") (term "1,1,0,0,0,1,0"))
      (rule "setMinusOfUnion" (formula "16") (term "1,1,0,1,2,1,1,0"))
      (rule "setMinusOfUnion" (formula "16") (term "1,1,0,0,0,1,1,0"))
      (rule "setMinusOfUnion" (formula "16") (term "1,1,0,2,0,0"))
      (rule "setMinusOfUnion" (formula "14") (term "1,1,0,0"))
      (rule "setMinusOfUnion" (formula "1") (term "1,1,1,0,0"))
      (rule "setMinusOfUnion" (formula "16") (term "1,1,1,0,2,1,1,0"))
      (rule "setMinusOfUnion" (formula "16") (term "1,1,1,0,0,0,1,0"))
      (rule "setMinusOfUnion" (formula "16") (term "1,1,1,0,1,2,1,1,0"))
      (rule "setMinusOfUnion" (formula "16") (term "1,1,1,0,0,0,1,1,0"))
      (rule "setMinusOfUnion" (formula "16") (term "1,1,1,0,2,0,0"))
      (rule "setMinusOfUnion" (formula "14") (term "1,1,1,0,0"))
      (rule "pullOutSelect" (formula "1") (term "0") (inst "selectSK=Tree_left_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "12")))
      (rule "eqSymm" (formula "2"))
      (rule "applyEqReverse" (formula "1") (term "1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "hideAuxiliaryEq" (formula "2"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "1,0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "0,1,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "1,1,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,1,0,1,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,0,1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,1,1,1,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,1,1,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "16") (term "0,0,1,0") (inst "selectSK=Tree_key_0"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "12")))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "1,1,0,0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,1,1,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,1,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,1,0,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "pullOutSelect" (formula "17") (term "1,2,1,1,0") (inst "selectSK=Tree_right_0"))
      (rule "applyEq" (formula "18") (term "0,0,1,1,0") (ifseqformula "1"))
      (rule "applyEq" (formula "16") (term "0") (ifseqformula "1"))
      (rule "simplifySelectOfAnon" (formula "1"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")) (ifInst ""  (formula "13")))
      (rule "eqSymm" (formula "18"))
      (rule "eqSymm" (formula "16"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "ifthenelse_negated" (formula "1") (term "0"))
      (rule "elementOfUnion" (formula "1") (term "0,0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
      (rule "elementOfUnion" (formula "1") (term "1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSetMinus" (formula "1") (term "1,1,0,0"))
      (rule "elementOfSetMinus" (formula "1") (term "0,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
      (rule "elementOfUnion" (formula "1") (term "0,0,1,1,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,1,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfUnion" (formula "1") (term "0,0,1,0,1,0,0"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,0,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "commuteUnion_2" (formula "18") (term "1,1,1,1,1,0,2,1,1,1"))
      (rule "commuteUnion" (formula "18") (term "1,0,1,1,1,0,2,0,1"))
      (rule "commuteUnion_2" (formula "18") (term "1,0,1,1,0,2,1,1,1"))
      (rule "commuteUnion_2" (formula "18") (term "1,1,1,1,1,0,2,0,1"))
      (rule "commuteUnion_2" (formula "18") (term "1,0,1,1,1,0,2,1,1,1"))
      (rule "commuteUnion_2" (formula "18") (term "1,0,1,1,0,2,0,1"))
      (rule "commuteUnion_2" (formula "18") (term "0,1,1,1,1,1,0,2,1,1,1"))
      (rule "commuteUnion" (formula "18") (term "0,1,0,1,1,0,2,1,1,1"))
      (rule "commuteUnion" (formula "18") (term "0,1,1,1,1,1,0,2,0,1"))
      (rule "commuteUnion" (formula "18") (term "0,1,0,1,1,1,0,2,1,1,1"))
      (rule "commuteUnion" (formula "18") (term "0,1,0,1,1,0,2,0,1"))
      (rule "commuteUnion" (formula "18") (term "0,0,1,1,1,1,1,0,2,1,1,1"))
      (rule "commute_or" (formula "4") (term "0"))
      (rule "ifthenelse_split" (formula "3") (term "2,0,0,0,0"))
      (branch "self.left = null TRUE"
          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
         (rule "replace_known_left" (formula "1") (term "0,2,0,0,1,1,1,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
         (rule "replace_known_left" (formula "19") (term "0,1,1,0,1,1,1,1,1,0,2,0,1") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
         (rule "replace_known_left" (formula "2") (term "0,2,0,0,1,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
         (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "true_left" (formula "7"))
         (rule "replace_known_left" (formula "10") (term "0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "10"))
         (rule "true_left" (formula "10"))
         (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "5"))
         (rule "true_left" (formula "5"))
         (rule "applyEq" (formula "4") (term "1,1") (ifseqformula "3"))
         (rule "limit_Tree_footprint" (formula "6") (term "1,0,1,0,1"))
         (rule "applyEq" (formula "1") (term "2,2,0,1,0,0") (ifseqformula "6"))
         (rule "applyEq" (formula "2") (term "2,2,0,1,0,0") (ifseqformula "6"))
         (rule "applyEq" (formula "17") (term "2,0,1,1,1,0,2,1,1,1") (ifseqformula "6"))
         (rule "applyEq" (formula "4") (term "2,2,0,1,0") (ifseqformula "6"))
         (rule "cnf_rightDist" (formula "7"))
         (rule "andLeft" (formula "7"))
         (rule "commute_or_2" (formula "4"))
         (rule "commute_or" (formula "8"))
         (rule "commute_or" (formula "4") (term "0"))
         (rule "ifthenelse_split" (formula "1") (term "2,0,0,0,0"))
         (branch "self.right = null TRUE"
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "17")))
            (rule "closeFalse" (formula "2"))
         )
         (branch "self.right = null FALSE"
            (rule "replace_known_right" (formula "2") (term "0,2,0,0,0,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")))
            (rule "replace_known_right" (formula "1") (term "0,2,0,1,1,0,0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")))
            (rule "replace_known_right" (formula "19") (term "0,1,1,0,1,1,0,2,1,1,1") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")) (ifInst ""  (formula "16")))
            (rule "eqSymm" (formula "19"))
            (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "16"))
             (builtin "One Step Simplification" (formula "7"))
            (rule "andLeft" (formula "7"))
            (rule "disjointAllFields" (formula "1") (term "0,1,0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "disjointAllFields" (formula "2") (term "0,1,0,0") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "9"))
            (rule "replace_known_right" (formula "4") (term "0,2,0,1,1") (ifseqformula "17"))
             (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "17")) (ifInst ""  (formula "17")))
            (rule "disjointAllFields" (formula "4") (term "0,1") (ifseqformula "8"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")))
            (rule "closeFalse" (formula "1"))
         )
      )
      (branch "self.left = null FALSE"
         (rule "replace_known_right" (formula "19") (term "0,0,0,1,1,1,0,2,0,1") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "19") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")) (ifInst ""  (formula "16")) (ifInst ""  (formula "16")) (ifInst ""  (formula "16")) (ifInst ""  (formula "16")) (ifInst ""  (formula "16")) (ifInst ""  (formula "16")) (ifInst ""  (formula "16")))
         (rule "replace_known_right" (formula "2") (term "0,2,0,0,0,0,0") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")) (ifInst ""  (formula "16")))
         (rule "replace_known_right" (formula "1") (term "0,2,0,0,1,1,1,0,0") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "16")) (ifInst ""  (formula "16")))
         (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "16"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "andLeft" (formula "6"))
         (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "replace_known_right" (formula "12") (term "0,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "replace_known_right" (formula "3") (term "0,2,0,0,1,1,1,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")))
         (rule "elementOfSingleton" (formula "2") (term "0,0,1,0,1,0,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,1,1,1,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "3") (term "0,0,1,1,1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,1,0,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "3") (term "0,0,0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "elementOfSingleton" (formula "2") (term "0,0,0,0,0"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,1,0,1,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "elementOfSingleton" (formula "3") (term "0,0,1,0,1,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "limit_Tree_footprint" (formula "9") (term "1,0,1,0,1"))
         (rule "applyEq" (formula "2") (term "2,2,0,1,1,0,0") (ifseqformula "9"))
         (rule "applyEq" (formula "3") (term "2,2,0,1,1,0") (ifseqformula "9"))
         (rule "applyEq" (formula "22") (term "2,0,1,1,1,1,0,2,1,1,1") (ifseqformula "9"))
         (rule "applyEq" (formula "22") (term "2,0,1,1,1,1,0,0,1") (ifseqformula "9"))
         (rule "applyEq" (formula "1") (term "2,2,0,1,1,0,0") (ifseqformula "9"))
         (rule "cnf_rightDist" (formula "10"))
         (rule "andLeft" (formula "10"))
         (rule "commute_or" (formula "4"))
         (rule "commute_or" (formula "11"))
         (rule "ifthenelse_split" (formula "23") (term "1,1,0"))
         (branch "self.right = null TRUE"
            (rule "eqSymm" (formula "24"))
            (rule "replace_known_left" (formula "2") (term "0,2,0,1,0,1,0,0") (ifseqformula "1"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "22")))
            (rule "closeFalse" (formula "2"))
         )
         (branch "self.right = null FALSE"
            (rule "eqSymm" (formula "24"))
            (rule "replace_known_right" (formula "1") (term "0,2,0,1,1,0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "23")) (ifInst ""  (formula "23")) (ifInst ""  (formula "23")))
            (rule "replace_known_right" (formula "2") (term "0,2,0,1,1,0,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "23")) (ifInst ""  (formula "23")) (ifInst ""  (formula "23")))
            (rule "replace_known_right" (formula "24") (term "0,1,1,0,1,1,0,2,1,1,0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "24") (ifInst ""  (formula "23")) (ifInst ""  (formula "23")) (ifInst ""  (formula "23")) (ifInst ""  (formula "23")) (ifInst ""  (formula "23")) (ifInst ""  (formula "23")) (ifInst ""  (formula "23")))
            (rule "replace_known_right" (formula "11") (term "0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "11"))
            (rule "replace_known_right" (formula "10") (term "0") (ifseqformula "23"))
             (builtin "One Step Simplification" (formula "10"))
            (rule "andLeft" (formula "10"))
            (rule "disjointAllFields" (formula "2") (term "0,1,1,0,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "disjointAllFields" (formula "1") (term "0,1,1,0,0") (ifseqformula "11"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "replace_known_right" (formula "15") (term "0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "15"))
            (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "4"))
            (rule "notLeft" (formula "4"))
            (rule "replace_known_right" (formula "3") (term "0,2,0,1,1,0") (ifseqformula "24"))
             (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
            (rule "disjointAllFields" (formula "3") (term "0,1,1,0") (ifseqformula "10"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "elementOfSingleton" (formula "2") (term "0,1,1,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "elementOfSingleton" (formula "1") (term "0,1,1,0,0"))
             (builtin "One Step Simplification" (formula "1"))
            (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
             (builtin "One Step Simplification" (formula "3"))
            (rule "true_left" (formula "3"))
            (rule "elementOfSingleton" (formula "2") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "2"))
            (rule "applyEqReverse" (formula "24") (term "0,0,1,0") (ifseqformula "2"))
            (rule "hideAuxiliaryEq" (formula "2"))
            (rule "elementOfSingleton" (formula "1") (term "0,0,0,0"))
             (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")))
            (rule "closeFalse" (formula "1"))
         )
      )
   )
)
(branch "Assume self.left@heap[anon( allLocs ∖ self.* ∪ if (self.left = null) then (∅) else (self.left.footprint$lmtd) ∪ if (self.right = null) then (∅) else (self.right.footprint$lmtd) ∖ {(self, Tree::$isRed)} ∪ if (self.left = null) then (∅) else ({(self.left, Tree::$isRed)}) ∪ if (self.right = null) then (∅) else ({(self.right, Tree::$isRed)}) ∪ {(self, Tree::$heightVariant)}, anon_heap«anonHeapFunction»)] != self.left"
    (builtin "One Step Simplification" (formula "2"))
   (rule "notLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "andLeft" (formula "1"))
   (rule "eqSymm" (formula "15"))
   (rule "eqSymm" (formula "1") (term "0,0,0"))
   (rule "disjointDefinition" (formula "7") (term "1"))
   (rule "disjointDefinition" (formula "4") (term "1,0,1"))
   (rule "disjointDefinition" (formula "3") (term "1,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "4") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "3") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,0,0,1"))
   (rule "inEqSimp_ltToLeq" (formula "2"))
   (rule "add_zero_right" (formula "2") (term "0"))
   (rule "polySimp_mulComm0" (formula "2") (term "1,0"))
   (rule "inEqSimp_sepPosMonomial0" (formula "4") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "4") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "4") (term "1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "4") (term "1,1,0,0,1"))
   (rule "mul_literals" (formula "4") (term "0,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "4") (term "1,1,0,0,1"))
   (rule "inEqSimp_sepPosMonomial0" (formula "3") (term "0,0,1"))
   (rule "polySimp_mulComm0" (formula "3") (term "1,0,0,1"))
   (rule "polySimp_rightDist" (formula "3") (term "1,0,0,1"))
   (rule "mul_literals" (formula "3") (term "0,1,0,0,1"))
   (rule "polySimp_mulLiterals" (formula "3") (term "1,1,0,0,1"))
   (rule "polySimp_elimOne" (formula "3") (term "1,1,0,0,1"))
   (rule "inEqSimp_sepNegMonomial0" (formula "2"))
   (rule "polySimp_mulLiterals" (formula "2") (term "0"))
   (rule "polySimp_elimOne" (formula "2") (term "0"))
   (rule "setMinusOfUnion" (formula "13") (term "1,1,0,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,0,2,0,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,0,2,1,1,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,0,0,0,1,1,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,0,0,0,0,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,0,0,0,1,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,0,1,2,1,1,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,0,1,2,0,0"))
   (rule "setMinusOfUnion" (formula "13") (term "1,1,1,0,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,1,0,2,0,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,1,0,2,1,1,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,1,0,0,0,1,1,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,1,0,0,0,0,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,1,0,0,0,1,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,1,0,1,2,1,1,0"))
   (rule "setMinusOfUnion" (formula "15") (term "1,1,1,0,1,2,0,0"))
   (rule "pullOutSelect" (formula "13") (term "0") (inst "selectSK=Tree_left_0"))
   (rule "applyEq" (formula "16") (term "0,0,0,0") (ifseqformula "1"))
   (rule "applyEq" (formula "16") (term "1,2,0,0") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "15")) (ifInst ""  (formula "11")))
   (rule "eqSymm" (formula "14"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfUnion" (formula "1") (term "1,0,0"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
   (rule "elementOfSetMinus" (formula "1") (term "1,1,0,0"))
   (rule "elementOfSetMinus" (formula "1") (term "0,1,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,0,1,1,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,1,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "16") (term "0,0,1,1,0") (inst "selectSK=Tree_right_0"))
   (rule "applyEq" (formula "17") (term "1,2,1,1,0") (ifseqformula "1"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "16")) (ifInst ""  (formula "12")))
   (rule "eqSymm" (formula "17"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "1,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
   (rule "elementOfSetMinus" (formula "1") (term "0,1,0,0"))
   (rule "elementOfSetMinus" (formula "1") (term "1,1,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,0,1,1,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,1,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "pullOutSelect" (formula "17") (term "0,0,1,1") (inst "selectSK=Tree_key_0"))
   (rule "simplifySelectOfAnon" (formula "1"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "17")) (ifInst ""  (formula "13")))
   (rule "elementOfSetMinus" (formula "1") (term "0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "ifthenelse_negated" (formula "1") (term "0"))
   (rule "elementOfUnion" (formula "1") (term "0,0"))
   (rule "elementOfSetMinus" (formula "1") (term "0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "1,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0,0"))
   (rule "elementOfSetMinus" (formula "1") (term "1,1,0,0"))
   (rule "elementOfSetMinus" (formula "1") (term "0,1,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,0,0,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "1,0,1,1,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,1,0,1,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,1,1,1,0,0"))
   (rule "elementOfUnion" (formula "1") (term "0,0,1,0,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,0,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "elementOfUnion" (formula "1") (term "0,0,1,1,1,0,0"))
   (rule "elementOfSingleton" (formula "1") (term "0,0,0,1,1,1,0,0"))
    (builtin "One Step Simplification" (formula "1"))
   (rule "commuteUnion_2" (formula "18") (term "1,0,1,1,1,0,2,0,1"))
   (rule "commuteUnion" (formula "18") (term "1,0,1,1,1,0,2,1,1,1"))
   (rule "commuteUnion" (formula "18") (term "1,0,1,1,0,2,1,1,1"))
   (rule "commuteUnion" (formula "18") (term "1,0,1,1,0,2,0,1"))
   (rule "commuteUnion" (formula "18") (term "1,1,1,1,1,0,2,0,1"))
   (rule "commuteUnion_2" (formula "18") (term "1,1,1,1,1,0,2,1,1,1"))
   (rule "commuteUnion" (formula "18") (term "0,1,0,1,1,1,0,2,0,1"))
   (rule "commuteUnion" (formula "18") (term "0,1,1,1,1,1,0,2,1,1,1"))
   (rule "commute_or" (formula "4") (term "0"))
   (rule "limit_Tree_footprint" (formula "10") (term "0,0,1"))
   (rule "applyEq" (formula "19") (term "2,0,0,1,1,1,0,2,0,1") (ifseqformula "10"))
   (rule "applyEq" (formula "1") (term "2,2,0,0,1,0,0") (ifseqformula "10"))
   (rule "applyEq" (formula "2") (term "2,2,0,0,1,0,0") (ifseqformula "10"))
   (rule "applyEq" (formula "3") (term "2,2,0,0,1,0,0") (ifseqformula "10"))
   (rule "applyEq" (formula "19") (term "2,0,0,1,1,1,0,2,1,1,1") (ifseqformula "10"))
   (rule "limit_Tree_footprint" (formula "11") (term "1,0,1"))
   (rule "applyEq" (formula "3") (term "2,2,0,1,1,0,0") (ifseqformula "11"))
   (rule "applyEq" (formula "20") (term "2,0,1,1,1,1,0,2,0,1") (ifseqformula "11"))
   (rule "applyEq" (formula "20") (term "2,0,1,1,1,1,0,2,1,1,1") (ifseqformula "11"))
   (rule "applyEq" (formula "2") (term "2,2,0,1,1,0,0") (ifseqformula "11"))
   (rule "applyEq" (formula "1") (term "2,2,0,1,1,0,0") (ifseqformula "11"))
   (rule "cnf_rightDist" (formula "7"))
   (rule "andLeft" (formula "7"))
   (rule "cnf_rightDist" (formula "6"))
   (rule "andLeft" (formula "6"))
   (rule "ifthenelse_split" (formula "3") (term "2,0,0,0,0,0"))
   (branch "self.left = null TRUE"
       (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
      (rule "replace_known_left" (formula "2") (term "0,2,0,0,1,0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
      (rule "replace_known_left" (formula "23") (term "0,1,0,1,1,0,1,1,1,0,2,1,1,1") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
      (rule "replace_known_left" (formula "1") (term "0,2,0,0,1,1,1,0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")))
      (rule "replace_known_left" (formula "8") (term "1") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "true_left" (formula "8"))
      (rule "replace_known_left" (formula "7") (term "0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "7"))
      (rule "true_left" (formula "7"))
      (rule "replace_known_left" (formula "5") (term "0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "true_left" (formula "5"))
      (rule "replace_known_left" (formula "12") (term "0,0") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "true_left" (formula "12"))
      (rule "applyEq" (formula "17") (term "0") (ifseqformula "3"))
      (rule "eqSymm" (formula "17"))
      (rule "replace_known_right" (formula "19") (term "0,0,1") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "19"))
      (rule "applyEq" (formula "4") (term "1,0") (ifseqformula "3"))
      (rule "applyEq" (formula "10") (term "1,0") (ifseqformula "3"))
      (rule "applyEq" (formula "10") (term "1,1") (ifseqformula "3"))
      (rule "commute_or" (formula "7"))
      (rule "cnf_rightDist" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "commute_or" (formula "7"))
      (rule "ifthenelse_split" (formula "4") (term "2,0,0,0,0"))
      (branch "self.right = null TRUE"
          (builtin "One Step Simplification" (formula "5") (ifInst ""  (formula "4")) (ifInst ""  (formula "4")))
         (rule "applyEqReverse" (formula "19") (term "0") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "19"))
         (rule "closeTrue" (formula "19"))
      )
      (branch "self.right = null FALSE"
         (rule "replace_known_right" (formula "1") (term "0,2,0,0,0,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")))
         (rule "replace_known_right" (formula "21") (term "0,1,1,1,0,1,1,0,2,1,1,1") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")) (ifInst ""  (formula "18")) (ifInst ""  (formula "18")) (ifInst ""  (formula "18")) (ifInst ""  (formula "18")))
         (rule "eqSymm" (formula "21"))
         (rule "replace_known_right" (formula "2") (term "0,2,0,0,0,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "18")) (ifInst ""  (formula "18")))
         (rule "replace_known_right" (formula "4") (term "0,2,0,1,1,0,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "4") (ifInst ""  (formula "18")))
         (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "6"))
         (rule "replace_known_right" (formula "7") (term "0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "7"))
         (rule "disjointAllFields" (formula "1") (term "0,1,0,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "disjointAllFields" (formula "4") (term "0,1,0,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "disjointAllFields" (formula "2") (term "0,1,0,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "elementOfSingleton" (formula "1") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "21") (term "0,0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "elementOfSingleton" (formula "3") (term "0,0,0"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "applyEqReverse" (formula "20") (term "1,0,0") (ifseqformula "3"))
         (rule "applyEqReverse" (formula "18") (term "0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "closeTrue" (formula "18"))
      )
   )
   (branch "self.left = null FALSE"
      (rule "replace_known_right" (formula "1") (term "0,2,0,0,1,1,1,0,0") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
      (rule "replace_known_right" (formula "23") (term "0,1,0,1,1,0,1,1,0,2,0,1") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "23") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
      (rule "replace_known_right" (formula "2") (term "0,2,0,0,0,0,0") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
      (rule "replace_known_right" (formula "3") (term "0,2,0,0,1,1,1,0,0") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "20")) (ifInst ""  (formula "20")))
      (rule "replace_known_right" (formula "6") (term "0") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "andLeft" (formula "6"))
      (rule "disjointAllFields" (formula "1") (term "0,0,1,0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "disjointAllFields" (formula "2") (term "0,0,1,0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "disjointAllFields" (formula "3") (term "0,0,1,0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "replace_known_right" (formula "8") (term "1") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "replace_known_right" (formula "15") (term "0,0") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "replace_known_right" (formula "4") (term "0,0") (ifseqformula "21"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,1,1,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "2") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "elementOfSingleton" (formula "3") (term "0,0,1,1,0,0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "elementOfSingleton" (formula "1") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "elementOfSingleton" (formula "2") (term "0,0,1,1,0,0"))
       (builtin "One Step Simplification" (formula "2"))
      (rule "elementOfSingleton" (formula "3") (term "0,0,0,0,0"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "commute_or" (formula "10"))
      (rule "commute_or" (formula "4"))
      (rule "ifthenelse_split" (formula "24") (term "1,1,0"))
      (branch "self.right = null TRUE"
         (rule "eqSymm" (formula "25"))
         (rule "replace_known_left" (formula "2") (term "0,2,0,1,1,0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")))
         (rule "applyEqReverse" (formula "25") (term "0,0,1,0") (ifseqformula "2"))
         (rule "hideAuxiliaryEq" (formula "2"))
         (rule "replace_known_left" (formula "3") (term "0,2,0,0,0,0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "1")) (ifInst ""  (formula "1")) (ifInst ""  (formula "22")))
         (rule "closeFalse" (formula "3"))
      )
      (branch "self.right = null FALSE"
         (rule "eqSymm" (formula "25"))
         (rule "replace_known_right" (formula "2") (term "0,2,0,1,0,0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
         (rule "replace_known_right" (formula "3") (term "0,2,0,1,0,0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
         (rule "replace_known_right" (formula "1") (term "0,2,0,1,0,0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
         (rule "replace_known_right" (formula "25") (term "0,0,1,1,1,1,0,2,0,0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "25") (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")) (ifInst ""  (formula "24")))
         (rule "replace_known_right" (formula "4") (term "0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "notLeft" (formula "4"))
         (rule "replace_known_right" (formula "14") (term "0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "replace_known_right" (formula "9") (term "0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "9"))
         (rule "replace_known_right" (formula "8") (term "0") (ifseqformula "24"))
          (builtin "One Step Simplification" (formula "8"))
         (rule "andLeft" (formula "8"))
         (rule "disjointAllFields" (formula "1") (term "0,1,0,0") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "disjointAllFields" (formula "3") (term "0,1,0,0") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "disjointAllFields" (formula "2") (term "0,1,0,0") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "ifthenelse_negated" (formula "1") (term "0"))
         (rule "ifthenelse_negated" (formula "3") (term "0"))
         (rule "ifthenelse_negated" (formula "2") (term "0"))
         (rule "elementOfSingleton" (formula "1") (term "0,0"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "applyEqReverse" (formula "26") (term "0,0,1,0") (ifseqformula "1"))
         (rule "hideAuxiliaryEq" (formula "1"))
         (rule "elementOfSingleton" (formula "2") (term "0,0"))
          (builtin "One Step Simplification" (formula "2") (ifInst ""  (formula "22")))
         (rule "closeFalse" (formula "2"))
      )
   )
)
)
}
