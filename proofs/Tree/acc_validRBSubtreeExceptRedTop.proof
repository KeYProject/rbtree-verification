\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 08 01:37:41 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\include "../../iSet.key";

\proofObligation "#Proof Obligation Settings
#Fri Sep 08 01:37:41 CEST 2023
contract=Tree[Tree\\:\\:validRBSubtreeExceptRedTop()].JML accessible clause.0
name=Tree[Tree\\:\\:validRBSubtreeExceptRedTop()].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "johanna" ) (keyVersion "4d5d8c5cb0b36bcbdc74ead5888a2f6bbedfe5ef"))

(autoModeTime "50059")

(branch "dummy ID"
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
 (builtin "One Step Simplification" (formula "8") (userinteraction))
(rule "Definition_axiom_for_validRBSubtreeExceptRedTop_in_Tree" (formula "8") (term "0") (ifseqformula "7") (userinteraction))
(rule "Definition_axiom_for_validRBSubtreeExceptRedTop_in_Tree" (formula "8") (term "1") (ifseqformula "7") (userinteraction))
 (builtin "One Step Simplification" (formula "8"))
(rule "commute_or" (formula "8") (term "1,1"))
(rule "commute_or" (formula "8") (term "1,0"))
(rule "limit_java_lang_Object__inv_" (formula "6"))
(rule "replace_known_left" (formula "6") (term "1") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "6"))
(rule "limit_Tree_footprint" (formula "9") (term "0,1,1,0,0,0,1"))
(rule "limit_Tree_blackBalanced" (formula "10") (term "0,0,0"))
(rule "limit_Tree_noDoubleRed" (formula "11") (term "0,1,1,1"))
(rule "limit_Tree_noDoubleRed" (formula "12") (term "0,1,1,0"))
(rule "limit_Tree_blackBalanced" (formula "13") (term "0,0,1"))
(rule "equiv_right" (formula "14"))
(branch "Case '->'"
   (rule "andLeft" (formula "1"))
   (rule "applyEq" (formula "6") (term "1") (ifseqformula "1"))
   (rule "cut_direct" (formula "2") (term "1"))
   (branch "CUT: self.noDoubleRed() = TRUE TRUE"
       (builtin "One Step Simplification" (formula "3"))
      (rule "true_left" (formula "3"))
      (rule "applyEq" (formula "4") (term "1") (ifseqformula "2"))
       (builtin "Use Dependency Contract" (formula "5") (term "0") (ifInst ""  (formula "4") (term "0")) (contract "Tree[Tree::noDoubleRed()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "15") (term "1,1,0,0,0,0"))
      (rule "replace_known_left" (formula "15") (term "0,1,0,0,0,0") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "16")) (ifInst ""  (formula "10")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")) (ifInst ""  (formula "14")))
      (rule "disjointDefinition" (formula "15") (term "0,0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "measuredByCheckEmpty" (formula "15") (term "0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "applyEq" (formula "5") (term "0") (ifseqformula "15"))
      (rule "eqSymm" (formula "5"))
      (rule "applyEq" (formula "15") (term "1") (ifseqformula "4"))
      (rule "applyEq" (formula "17") (term "0,1,1") (ifseqformula "5"))
      (rule "replace_known_left" (formula "17") (term "1,1") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "applyEq" (formula "5") (term "1") (ifseqformula "4"))
      (rule "apply_eq_boolean" (formula "3") (term "1") (ifseqformula "17"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "notLeft" (formula "3"))
       (builtin "Use Dependency Contract" (formula "17") (term "0") (ifInst ""  (formula "1") (term "0")) (contract "Tree[Tree::blackBalanced()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "15") (term "1,1,0,0,0,0"))
      (rule "replace_known_left" (formula "15") (term "0,1,0,0,0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "17")) (ifInst ""  (formula "9")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "13")))
      (rule "disjointDefinition" (formula "15") (term "0,0"))
      (rule "measuredByCheckEmpty" (formula "15") (term "1,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "applyEq" (formula "15") (term "1,1") (ifseqformula "1"))
      (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "notLeft" (formula "15"))
      (rule "commuteUnion" (formula "15") (term "1,1,0"))
      (rule "equalityToElementOfRight" (formula "15") (inst "ov=ov") (inst "fv=fv"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "allRight" (formula "15") (inst "sk=ov_0"))
      (rule "allRight" (formula "15") (inst "sk=fv_0"))
      (rule "notRight" (formula "15"))
      (rule "elementOfIntersect" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "elementOfSetMinus" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "notLeft" (formula "3"))
      (rule "elementOfSetMinus" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "elementOfUnion" (formula "17"))
      (rule "orRight" (formula "17"))
      (rule "elementOfSingleton" (formula "18"))
      (rule "elementOfSingleton" (formula "17"))
      (rule "elementOfSetMinus" (formula "16"))
      (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "16"))
      (rule "notRight" (formula "16"))
      (rule "elementOfSingleton" (formula "1"))
      (rule "close" (formula "17") (ifseqformula "1"))
   )
   (branch "CUT: self.noDoubleRed() = TRUE FALSE"
       (builtin "One Step Simplification" (formula "2"))
      (rule "apply_eq_boolean" (formula "4") (term "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "notLeft" (formula "4"))
       (builtin "Use Dependency Contract" (formula "4") (term "0") (ifInst ""  (formula "14") (term "0")) (contract "Tree[Tree::noDoubleRed()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0,0"))
      (rule "replace_known_left" (formula "14") (term "1,0,0,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "17")) (ifInst ""  (formula "9")) (ifInst ""  (formula "7")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")))
      (rule "disjointDefinition" (formula "14") (term "0,0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "measuredByCheckEmpty" (formula "14") (term "0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "apply_eq_boolean" (formula "14") (term "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "notLeft" (formula "14"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "4"))
      (rule "replace_known_right" (formula "18") (term "1,1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "apply_eq_boolean" (formula "4") (term "1") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "4"))
      (rule "notLeft" (formula "4"))
       (builtin "Use Dependency Contract" (formula "3") (term "1") (ifInst ""  (formula "1") (term "0")) (contract "Tree[Tree::blackBalanced()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "13") (term "1,1,0,0,0,0"))
      (rule "replace_known_left" (formula "13") (term "0,1,0,0,0,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "13") (ifInst ""  (formula "18")) (ifInst ""  (formula "8")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "12")))
      (rule "disjointDefinition" (formula "13") (term "0,0"))
      (rule "measuredByCheckEmpty" (formula "13") (term "1,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "applyEq" (formula "13") (term "1,1") (ifseqformula "1"))
      (rule "commuteUnion" (formula "13") (term "1,1,0,0"))
       (builtin "Use Dependency Contract" (formula "3") (term "0") (ifInst ""  (formula "4") (term "0")) (contract "Tree[Tree::blackBalanced()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0,0"))
      (rule "replace_known_left" (formula "14") (term "1,0,0,0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "19")) (ifInst ""  (formula "8")) (ifInst ""  (formula "6")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")))
      (rule "disjointDefinition" (formula "14") (term "0,0"))
      (rule "measuredByCheckEmpty" (formula "14") (term "1,0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "4"))
      (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "3"))
      (rule "commuteUnion" (formula "14") (term "1,1,0,0"))
       (builtin "Use Dependency Contract" (formula "15") (term "0") (ifInst ""  (formula "17") (term "0")) (contract "Tree[Tree::noDoubleRed()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0,0"))
      (rule "replace_known_left" (formula "14") (term "0,1,0,0,0,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "19")) (ifInst ""  (formula "8")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "12")))
      (rule "disjointDefinition" (formula "14") (term "0,0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "measuredByCheckEmpty" (formula "14") (term "0") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "apply_eq_boolean" (formula "14") (term "0") (ifseqformula "16"))
      (rule "eqSymm" (formula "14"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "18")))
      (rule "true_left" (formula "14"))
       (builtin "Use Dependency Contract" (formula "19") (term "0,1") (ifInst ""  (formula "2") (term "0")) (contract "Tree[Tree::doubleRedTop()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0"))
      (rule "replace_known_left" (formula "14") (term "0,1,0,0,0") (ifseqformula "6"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "19")) (ifInst ""  (formula "8")) (ifInst ""  (formula "6")) (ifInst ""  (formula "7")) (ifInst ""  (formula "12")))
      (rule "disjointDefinition" (formula "14") (term "0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "applyEq" (formula "20") (term "0,1") (ifseqformula "14"))
      (rule "replace_known_left" (formula "20") (term "1") (ifseqformula "2"))
       (builtin "One Step Simplification" (formula "20"))
      (rule "replace_known_right" (formula "13") (term "1") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "notLeft" (formula "13"))
      (rule "applyEq" (formula "13") (term "1") (ifseqformula "2"))
      (rule "apply_eq_boolean" (formula "3") (term "1") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "notLeft" (formula "3"))
      (rule "equalityToElementOfRight" (formula "14") (inst "ov=ov") (inst "fv=fv"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "allRight" (formula "14") (inst "sk=ov_0"))
      (rule "allRight" (formula "14") (inst "sk=fv_0"))
      (rule "notRight" (formula "14"))
      (rule "elementOfIntersect" (formula "1"))
      (rule "andLeft" (formula "1"))
      (rule "elementOfSetMinus" (formula "2"))
      (rule "andLeft" (formula "2"))
      (rule "notLeft" (formula "3"))
      (rule "elementOfSetMinus" (formula "1"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "elementOfUnion" (formula "15"))
      (rule "orRight" (formula "15"))
      (rule "elementOfSingleton" (formula "15"))
      (rule "elementOfSingleton" (formula "16"))
      (rule "elementOfSetMinus" (formula "14"))
      (rule "replace_known_left" (formula "14") (term "0") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "notRight" (formula "14"))
      (rule "elementOfSingleton" (formula "1"))
      (rule "close" (formula "15") (ifseqformula "1"))
   )
)
(branch "Case '<-'"
   (rule "andLeft" (formula "1"))
   (rule "applyEq" (formula "3") (term "1") (ifseqformula "1"))
   (rule "cut_direct" (formula "16") (term "0"))
   (branch "CUT: self.blackBalanced() = TRUE TRUE"
       (builtin "One Step Simplification" (formula "17"))
      (rule "orRight" (formula "17"))
      (rule "applyEq" (formula "7") (term "1") (ifseqformula "1"))
      (rule "apply_eq_boolean" (formula "5") (term "1") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "notLeft" (formula "5"))
       (builtin "Use Dependency Contract" (formula "5") (term "0") (ifInst ""  (formula "15") (term "0")) (contract "Tree[Tree::noDoubleRed()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "15") (term "1,1,0,0,0,0"))
      (rule "replace_known_left" (formula "15") (term "1,0,0,0") (ifseqformula "14"))
       (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "17")) (ifInst ""  (formula "10")) (ifInst ""  (formula "8")) (ifInst ""  (formula "8")) (ifInst ""  (formula "9")))
      (rule "disjointDefinition" (formula "15") (term "0,0"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "measuredByCheckEmpty" (formula "15") (term "0") (ifseqformula "12"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "applyEq" (formula "15") (term "0") (ifseqformula "5"))
      (rule "apply_eq_boolean" (formula "15") (term "1") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "notLeft" (formula "15"))
      (rule "replace_known_right" (formula "3") (term "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "3"))
      (rule "apply_eq_boolean" (formula "5") (term "1") (ifseqformula "15"))
       (builtin "One Step Simplification" (formula "5"))
      (rule "notLeft" (formula "5"))
       (builtin "Use Dependency Contract" (formula "2") (term "0") (ifInst ""  (formula "1") (term "0")) (contract "Tree[Tree::blackBalanced()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0,0"))
      (rule "replace_known_left" (formula "14") (term "0,1,0,0,0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "18")) (ifInst ""  (formula "9")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "13")))
      (rule "disjointDefinition" (formula "14") (term "0,0"))
      (rule "measuredByCheckEmpty" (formula "14") (term "1,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "applyEq" (formula "14") (term "0,1") (ifseqformula "2"))
      (rule "eqSymm" (formula "14") (term "1"))
      (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
       (builtin "Use Dependency Contract" (formula "4") (term "0") (ifInst ""  (formula "5") (term "0")) (contract "Tree[Tree::blackBalanced()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0,0"))
      (rule "replace_known_left" (formula "14") (term "0,1,0,0,0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "18")) (ifInst ""  (formula "9")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "13")))
      (rule "disjointDefinition" (formula "14") (term "0,0"))
      (rule "measuredByCheckEmpty" (formula "14") (term "1,0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "applyEq" (formula "14") (term "1,1") (ifseqformula "5"))
      (rule "replace_known_left" (formula "14") (term "1") (ifseqformula "4"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "true_left" (formula "14"))
       (builtin "Use Dependency Contract" (formula "15") (term "0") (ifInst ""  (formula "19") (term "0")) (contract "Tree[Tree::noDoubleRed()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0,0"))
      (rule "replace_known_left" (formula "14") (term "1,0,0,0") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "18")) (ifInst ""  (formula "9")) (ifInst ""  (formula "7")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")))
      (rule "disjointDefinition" (formula "14") (term "0,0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "measuredByCheckEmpty" (formula "14") (term "0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "apply_eq_boolean" (formula "14") (term "1") (ifseqformula "20"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")))
      (rule "true_left" (formula "14"))
       (builtin "Use Dependency Contract" (formula "3") (term "0") (ifInst ""  (formula "18") (term "0")) (contract "Tree[Tree::doubleRedTop()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0"))
      (rule "replace_known_right" (formula "14") (term "0,0,0,0,0,0") (ifseqformula "18"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "9")) (ifInst ""  (formula "7")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "13")))
      (rule "disjointDefinition" (formula "14") (term "0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "applyEq" (formula "3") (term "0") (ifseqformula "14"))
      (rule "close" (formula "19") (ifseqformula "3"))
   )
   (branch "CUT: self.blackBalanced() = TRUE FALSE"
       (builtin "One Step Simplification" (formula "17"))
      (rule "false_right" (formula "17"))
      (rule "apply_eq_boolean" (formula "6") (term "1") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "notLeft" (formula "6"))
       (builtin "Use Dependency Contract" (formula "5") (term "0") (ifInst ""  (formula "4") (term "0")) (contract "Tree[Tree::noDoubleRed()].JML accessible clause.0"))
      (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0,0"))
      (rule "replace_known_left" (formula "14") (term "0,1,0,0,0,0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "16")) (ifInst ""  (formula "9")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "13")))
      (rule "disjointDefinition" (formula "14") (term "0,0"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "measuredByCheckEmpty" (formula "14") (term "0") (ifseqformula "11"))
       (builtin "One Step Simplification" (formula "14"))
      (rule "applyEq" (formula "14") (term "0") (ifseqformula "5"))
      (rule "applyEq" (formula "14") (term "1") (ifseqformula "4"))
      (rule "applyEq" (formula "5") (term "1") (ifseqformula "14"))
      (rule "applyEq" (formula "2") (term "0,1") (ifseqformula "14"))
      (rule "commute_or" (formula "2"))
      (rule "cut_direct" (formula "2") (term "0"))
      (branch "CUT: self.noDoubleRed() = TRUE TRUE"
          (builtin "One Step Simplification" (formula "3"))
         (rule "true_left" (formula "3"))
         (rule "applyEq" (formula "5") (term "1") (ifseqformula "2"))
         (rule "applyEq" (formula "14") (term "1") (ifseqformula "2"))
         (rule "applyEq" (formula "4") (term "1") (ifseqformula "2"))
          (builtin "Use Dependency Contract" (formula "1") (term "0") (ifInst ""  (formula "17") (term "0")) (contract "Tree[Tree::blackBalanced()].JML accessible clause.0"))
         (rule "wellFormedAnon" (formula "15") (term "1,1,0,0,0,0"))
         (rule "replace_known_left" (formula "15") (term "0,1,0,0,0,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "15") (ifInst ""  (formula "17")) (ifInst ""  (formula "9")) (ifInst ""  (formula "7")) (ifInst ""  (formula "8")) (ifInst ""  (formula "13")))
         (rule "disjointDefinition" (formula "15") (term "0,0"))
         (rule "measuredByCheckEmpty" (formula "15") (term "1,0") (ifseqformula "11"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "1"))
         (rule "eqSymm" (formula "15") (term "1"))
         (rule "replace_known_right" (formula "15") (term "1") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "notLeft" (formula "15"))
         (rule "commuteUnion" (formula "15") (term "1,1,0"))
         (rule "equalityToElementOfRight" (formula "15") (inst "ov=ov") (inst "fv=fv"))
          (builtin "One Step Simplification" (formula "15"))
         (rule "allRight" (formula "15") (inst "sk=ov_0"))
         (rule "allRight" (formula "15") (inst "sk=fv_0"))
         (rule "notRight" (formula "15"))
         (rule "elementOfIntersect" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "elementOfSetMinus" (formula "2"))
         (rule "andLeft" (formula "2"))
         (rule "notLeft" (formula "3"))
         (rule "elementOfSetMinus" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "elementOfUnion" (formula "17"))
         (rule "orRight" (formula "17"))
         (rule "elementOfSingleton" (formula "18"))
         (rule "elementOfSingleton" (formula "17"))
         (rule "elementOfSetMinus" (formula "16"))
         (rule "replace_known_left" (formula "16") (term "0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "16"))
         (rule "notRight" (formula "16"))
         (rule "elementOfSingleton" (formula "1"))
         (rule "close" (formula "17") (ifseqformula "1"))
      )
      (branch "CUT: self.noDoubleRed() = TRUE FALSE"
          (builtin "One Step Simplification" (formula "2"))
         (rule "apply_eq_boolean" (formula "14") (term "1") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "notLeft" (formula "14"))
         (rule "apply_eq_boolean" (formula "4") (term "1") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "notLeft" (formula "4"))
         (rule "apply_eq_boolean" (formula "4") (term "1") (ifseqformula "15"))
          (builtin "One Step Simplification" (formula "4"))
         (rule "notLeft" (formula "4"))
          (builtin "Use Dependency Contract" (formula "1") (term "0") (ifInst ""  (formula "18") (term "0")) (contract "Tree[Tree::blackBalanced()].JML accessible clause.0"))
         (rule "wellFormedAnon" (formula "12") (term "1,1,0,0,0,0"))
         (rule "replace_known_right" (formula "12") (term "0,0,0,0,0,0,0") (ifseqformula "18"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "7")) (ifInst ""  (formula "5")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "11")))
         (rule "disjointDefinition" (formula "12") (term "0,0"))
         (rule "measuredByCheckEmpty" (formula "12") (term "1,0") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "apply_eq_boolean" (formula "12") (term "1,1") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "1")))
         (rule "notLeft" (formula "12"))
         (rule "commuteUnion" (formula "12") (term "1,1,0"))
         (rule "equalityToElementOfRight" (formula "12") (inst "ov=ov") (inst "fv=fv"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "allRight" (formula "12") (inst "sk=ov_0"))
         (rule "allRight" (formula "12") (inst "sk=fv_0"))
         (rule "notRight" (formula "12"))
         (rule "elementOfIntersect" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "elementOfSetMinus" (formula "2"))
         (rule "andLeft" (formula "2"))
         (rule "notLeft" (formula "3"))
         (rule "elementOfSetMinus" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "elementOfUnion" (formula "14"))
         (rule "orRight" (formula "14"))
         (rule "elementOfSingleton" (formula "14"))
         (rule "elementOfSingleton" (formula "15"))
         (rule "elementOfSetMinus" (formula "13"))
         (rule "replace_known_left" (formula "13") (term "0") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "notRight" (formula "13"))
         (rule "elementOfSingleton" (formula "1"))
         (rule "close" (formula "14") (ifseqformula "1"))
      )
   )
)
)
}
