\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Fri Sep 08 00:47:09 CEST 2023
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=7000
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_OFF
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[Strategy]Timeout=-1
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_OFF
[SMTSettings]useUninterpretedMultiplication=true
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\include "../../iSet.key";

\proofObligation "#Proof Obligation Settings
#Fri Sep 08 00:47:09 CEST 2023
contract=Tree[Tree\\:\\:contains(int)].JML accessible clause.0
name=Tree[Tree\\:\\:contains(int)].JML accessible clause.0
class=de.uka.ilkd.key.proof.init.DependencyContractPO
";

\proof {
(keyLog "0" (keyUser "johanna" ) (keyVersion "4d5d8c5cb0b36bcbdc74ead5888a2f6bbedfe5ef"))

(autoModeTime "128207")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "3"))
(rule "eqSymm" (formula "8"))
 (builtin "Evaluate Query" (formula "8") (term "0") (newnames "key_0,callee,queryResult,res_contains") (userinteraction))
 (builtin "Evaluate Query" (formula "9") (term "1") (newnames "key_1,callee,queryResult,res_contains_0") (userinteraction))
(rule "notLeft" (formula "2") (userinteraction))
(rule "notLeft" (formula "1") (userinteraction))
(rule "variableDeclaration" (formula "8") (term "1") (newnames "queryResult") (userinteraction))
(rule "variableDeclaration" (formula "7") (term "1") (newnames "queryResult_1") (userinteraction))
 (builtin "Use Operation Contract" (formula "7") (newnames "heapBefore_contains,result_contains,exc") (contract "Tree[Tree::contains(int)].JML normal_behavior operation contract.0") (modality "diamond") (userinteraction))
(branch "Post (contains)"
    (builtin "Use Operation Contract" (formula "9") (newnames "heapBefore_contains_0,result_contains_0,exc_0") (contract "Tree[Tree::contains(int)].JML normal_behavior operation contract.0") (modality "diamond") (userinteraction))
   (branch "Post (contains)"
       (builtin "One Step Simplification" (formula "8"))
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
       (builtin "One Step Simplification" (formula "10"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "replaceKnownQuery_0" (formula "12") (term "0"))
      (rule "replaceKnownQuery_1" (formula "12") (term "1"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "10"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "10"))
      (rule "eqSymm" (formula "13") (term "0,0,1"))
      (rule "eqSymm" (formula "12") (term "0,0,1"))
      (rule "eqSymm" (formula "15"))
      (rule "assignment" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "assignment" (formula "12") (term "1"))
       (builtin "One Step Simplification" (formula "12"))
      (rule "limit_java_lang_Object__inv_" (formula "6"))
      (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "limit_Tree_treeSet" (formula "9") (term "1,0"))
      (rule "limit_Tree_footprint" (formula "12") (term "1,1,0,1,0"))
      (rule "limit_Tree_treeSet" (formula "13") (term "1,0"))
      (rule "limit_java_lang_Object__inv_" (formula "15"))
      (rule "replace_known_left" (formula "15") (term "1") (ifseqformula "16"))
       (builtin "One Step Simplification" (formula "15"))
      (rule "limit_java_lang_Object__inv_" (formula "7"))
      (rule "replace_known_left" (formula "7") (term "1") (ifseqformula "8"))
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
      (rule "true_left" (formula "7"))
      (rule "methodCallEmpty" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "methodCallEmpty" (formula "17") (term "1"))
       (builtin "One Step Simplification" (formula "17"))
      (rule "emptyModality" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "notRight" (formula "18"))
      (rule "eqSymm" (formula "1"))
      (rule "applyEq" (formula "15") (term "0,1") (ifseqformula "1"))
      (rule "emptyModality" (formula "18") (term "1"))
       (builtin "One Step Simplification" (formula "18"))
      (rule "notRight" (formula "18"))
      (rule "eqSymm" (formula "1"))
      (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "1"))
      (rule "equiv_left" (formula "16"))
      (branch "Case 1"
         (rule "applyEqRigid" (formula "21") (term "1") (ifseqformula "17"))
         (rule "replace_known_right" (formula "12") (term "1") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "notLeft" (formula "12"))
         (rule "applyEq" (formula "2") (term "1") (ifseqformula "16"))
         (rule "apply_eq_boolean" (formula "1") (term "1") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
          (builtin "Use Dependency Contract" (formula "13") (term "0") (ifInst ""  (formula "10") (term "0")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
         (rule "wellFormedAnon" (formula "18") (term "1,1,0,0,0,0"))
         (rule "replace_known_right" (formula "18") (term "0,0,0,0,0,0,0") (ifseqformula "21"))
          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "4")) (ifInst ""  (formula "2")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "8")))
         (rule "disjointDefinition" (formula "18") (term "0,0"))
         (rule "measuredByCheckEmpty" (formula "18") (term "1,0") (ifseqformula "6"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "13"))
         (rule "applyEq" (formula "18") (term "1,1") (ifseqformula "10"))
         (rule "commuteUnion" (formula "18") (term "1,1,0,0"))
         (rule "associativeLawUnion" (formula "18") (term "1,1,0,0"))
         (rule "associativeLawUnion" (formula "18") (term "0,1,1,0,0"))
         (rule "ifthenelse_split" (formula "18") (term "1,1,1,0,0"))
         (branch "self.right = null TRUE"
             (builtin "One Step Simplification" (formula "19"))
            (rule "ifthenelse_split" (formula "19") (term "1,1,1,0,0"))
            (branch "self.left = null TRUE"
                (builtin "One Step Simplification" (formula "20"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "2"))
               (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "2"))
               (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "true_left" (formula "18"))
                (builtin "Use Dependency Contract" (formula "13") (term "1") (ifInst ""  (formula "22") (term "1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
               (rule "wellFormedAnon" (formula "21") (term "1,1,0,0,0,0"))
               (rule "replace_known_left" (formula "21") (term "0,1,0,0,0,0") (ifseqformula "2"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "24")) (ifInst ""  (formula "4")) (ifInst ""  (formula "2")) (ifInst ""  (formula "3")) (ifInst ""  (formula "8")) (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
               (rule "disjointDefinition" (formula "21") (term "0,0"))
               (rule "measuredByCheckEmpty" (formula "21") (term "1,0") (ifseqformula "6"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "commuteUnion" (formula "21") (term "1,1,0,0"))
               (rule "cut_direct" (formula "20") (term "1"))
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() TRUE"
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "13") (term "1") (ifseqformula "20"))
                  (rule "applyEq" (formula "14") (term "1") (ifseqformula "20"))
                  (rule "close" (formula "22") (ifseqformula "14"))
               )
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() FALSE"
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "equalityToElementOfRight" (formula "20") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "allRight" (formula "20") (inst "sk=ov_0"))
                  (rule "allRight" (formula "20") (inst "sk=fv_0"))
                  (rule "notRight" (formula "20"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "close" (formula "22") (ifseqformula "1"))
               )
            )
            (branch "self.left = null FALSE"
               (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "2"))
               (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1"))
                (builtin "Use Dependency Contract" (formula "14") (term "1") (ifInst ""  (formula "23") (term "1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
               (rule "wellFormedAnon" (formula "21") (term "1,1,0,0,0,0"))
               (rule "replace_known_right" (formula "21") (term "0,1,0,0,1,1,1,0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "25")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "9")) (ifInst ""  (formula "19")))
               (rule "disjointDefinition" (formula "21") (term "0,0"))
               (rule "measuredByCheckEmpty" (formula "21") (term "1,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "commuteUnion" (formula "21") (term "1,1,0,0"))
               (rule "associativeLawUnion" (formula "21") (term "1,1,0,0"))
               (rule "cut_direct" (formula "20") (term "1"))
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() TRUE"
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "14") (term "1") (ifseqformula "20"))
                  (rule "applyEq" (formula "15") (term "1") (ifseqformula "20"))
                  (rule "close" (formula "23") (ifseqformula "15"))
               )
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() FALSE"
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "equalityToElementOfRight" (formula "20") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "allRight" (formula "20") (inst "sk=ov_0"))
                  (rule "allRight" (formula "20") (inst "sk=fv_0"))
                  (rule "notRight" (formula "20"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "notLeft" (formula "3"))
                  (rule "elementOfSetMinus" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "self.right = null FALSE"
            (rule "commuteUnion_2" (formula "18") (term "1,1,0,0"))
            (rule "ifthenelse_split" (formula "18") (term "1,1,1,0,0"))
            (branch "self.left = null TRUE"
                (builtin "One Step Simplification" (formula "19"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "3"))
               (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
                (builtin "Use Dependency Contract" (formula "14") (term "1") (ifInst ""  (formula "23") (term "1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
               (rule "wellFormedAnon" (formula "21") (term "1,1,0,0,0,0"))
               (rule "replace_known_left" (formula "21") (term "0,1,0,0,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "25")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "9")) (ifInst ""  (formula "19")) (ifInst ""  (formula "22")))
               (rule "disjointDefinition" (formula "21") (term "0,0"))
               (rule "measuredByCheckEmpty" (formula "21") (term "1,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "commuteUnion_2" (formula "21") (term "1,1,0,0"))
               (rule "commuteUnion" (formula "21") (term "0,1,1,0,0"))
               (rule "cut_direct" (formula "20") (term "1"))
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() TRUE"
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "15") (term "1") (ifseqformula "20"))
                  (rule "close" (formula "23") (ifseqformula "15"))
               )
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() FALSE"
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "equalityToElementOfRight" (formula "20") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "allRight" (formula "20") (inst "sk=ov_0"))
                  (rule "allRight" (formula "20") (inst "sk=fv_0"))
                  (rule "notRight" (formula "20"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "notLeft" (formula "3"))
                  (rule "elementOfSetMinus" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "self.left = null FALSE"
               (rule "commuteUnion_2" (formula "18") (term "1,1,0,0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "2"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "3"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1"))
                (builtin "Use Dependency Contract" (formula "15") (term "1") (ifInst ""  (formula "24") (term "1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
               (rule "wellFormedAnon" (formula "21") (term "1,1,0,0,0,0"))
               (rule "replace_known_left" (formula "21") (term "1,0,0,0") (ifseqformula "10"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "26")) (ifInst ""  (formula "6")) (ifInst ""  (formula "4")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "22")) (ifInst ""  (formula "23")))
               (rule "disjointDefinition" (formula "21") (term "0,0"))
               (rule "measuredByCheckEmpty" (formula "21") (term "1,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "commuteUnion_2" (formula "21") (term "1,1,0,0"))
               (rule "commuteUnion" (formula "21") (term "0,1,1,0,0"))
               (rule "associativeLawUnion" (formula "21") (term "0,1,1,0,0"))
               (rule "cut_direct" (formula "20") (term "1"))
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() TRUE"
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "15") (term "1") (ifseqformula "20"))
                  (rule "applyEq" (formula "16") (term "1") (ifseqformula "20"))
                  (rule "close" (formula "24") (ifseqformula "16"))
               )
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() FALSE"
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "equalityToElementOfRight" (formula "20") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "allRight" (formula "20") (inst "sk=ov_0"))
                  (rule "allRight" (formula "20") (inst "sk=fv_0"))
                  (rule "notRight" (formula "20"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "notLeft" (formula "3"))
                  (rule "elementOfSetMinus" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
      )
      (branch "Case 2"
         (rule "apply_eq_boolean" (formula "21") (term "1") (ifseqformula "19"))
          (builtin "One Step Simplification" (formula "21"))
         (rule "notRight" (formula "21"))
         (rule "replace_known_left" (formula "13") (term "1") (ifseqformula "1"))
          (builtin "One Step Simplification" (formula "13"))
         (rule "apply_eq_boolean_rigid" (formula "3") (term "1") (ifseqformula "20"))
          (builtin "One Step Simplification" (formula "3"))
         (rule "notLeft" (formula "3"))
         (rule "applyEq" (formula "2") (term "1") (ifseqformula "1"))
          (builtin "Use Dependency Contract" (formula "15") (term "0") (ifInst ""  (formula "11") (term "0")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
         (rule "wellFormedAnon" (formula "18") (term "1,1,0,0,0,0"))
         (rule "replace_known_left" (formula "18") (term "1,0,0,0,0,0") (ifseqformula "5"))
          (builtin "One Step Simplification" (formula "18") (ifInst ""  (formula "22")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "9")))
         (rule "disjointDefinition" (formula "18") (term "0,0"))
         (rule "measuredByCheckEmpty" (formula "18") (term "1,0") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "18"))
         (rule "applyEq" (formula "18") (term "1,1") (ifseqformula "11"))
         (rule "applyEq" (formula "18") (term "0,1") (ifseqformula "15"))
         (rule "commuteUnion" (formula "18") (term "1,1,0,0"))
         (rule "associativeLawUnion" (formula "18") (term "1,1,0,0"))
         (rule "associativeLawUnion" (formula "18") (term "0,1,1,0,0"))
         (rule "ifthenelse_split" (formula "18") (term "1,1,1,0,0"))
         (branch "self.right = null TRUE"
             (builtin "One Step Simplification" (formula "19"))
            (rule "ifthenelse_split" (formula "19") (term "1,1,1,0,0"))
            (branch "self.left = null TRUE"
                (builtin "One Step Simplification" (formula "20"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "3"))
               (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "3"))
               (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "true_left" (formula "18"))
                (builtin "Use Dependency Contract" (formula "15") (term "1") (ifInst ""  (formula "20") (term "1,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
               (rule "wellFormedAnon" (formula "21") (term "1,1,0,0,0,0"))
               (rule "replace_known_left" (formula "21") (term "0,1,0,0,0,0") (ifseqformula "3"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "25")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "9")) (ifInst ""  (formula "19")) (ifInst ""  (formula "18")))
               (rule "disjointDefinition" (formula "21") (term "0,0"))
               (rule "measuredByCheckEmpty" (formula "21") (term "1,0") (ifseqformula "7"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "commuteUnion" (formula "21") (term "1,1,0,0"))
               (rule "cut_direct" (formula "20") (term "1"))
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() TRUE"
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "22") (term "1") (ifseqformula "20"))
                  (rule "close" (formula "22") (ifseqformula "12"))
               )
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() FALSE"
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "equalityToElementOfRight" (formula "20") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "allRight" (formula "20") (inst "sk=ov_0"))
                  (rule "allRight" (formula "20") (inst "sk=fv_0"))
                  (rule "notRight" (formula "20"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "1"))
                   (builtin "One Step Simplification" (formula "1"))
                  (rule "notLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "close" (formula "22") (ifseqformula "1"))
               )
            )
            (branch "self.left = null FALSE"
               (rule "onlyCreatedObjectsAreReferenced" (formula "18") (term "0") (ifseqformula "3"))
               (rule "replace_known_left" (formula "18") (term "0") (ifseqformula "19"))
                (builtin "One Step Simplification" (formula "18"))
               (rule "true_left" (formula "18"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "3"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1"))
                (builtin "Use Dependency Contract" (formula "16") (term "1") (ifInst ""  (formula "20") (term "1,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
               (rule "wellFormedAnon" (formula "21") (term "1,1,0,0,0,0"))
               (rule "replace_known_right" (formula "21") (term "0,1,0,0,1,1,1,0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "26")) (ifInst ""  (formula "6")) (ifInst ""  (formula "4")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "10")) (ifInst ""  (formula "19")))
               (rule "disjointDefinition" (formula "21") (term "0,0"))
               (rule "measuredByCheckEmpty" (formula "21") (term "1,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "commuteUnion" (formula "21") (term "1,1,0,0"))
               (rule "associativeLawUnion" (formula "21") (term "1,1,0,0"))
               (rule "cut_direct" (formula "20") (term "1"))
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() TRUE"
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "16") (term "1") (ifseqformula "20"))
                  (rule "applyEq" (formula "23") (term "1") (ifseqformula "20"))
                  (rule "close" (formula "23") (ifseqformula "13"))
               )
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() FALSE"
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "equalityToElementOfRight" (formula "20") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "allRight" (formula "20") (inst "sk=ov_0"))
                  (rule "allRight" (formula "20") (inst "sk=fv_0"))
                  (rule "notRight" (formula "20"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "notLeft" (formula "3"))
                  (rule "elementOfSetMinus" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
         (branch "self.right = null FALSE"
            (rule "commuteUnion_2" (formula "18") (term "1,1,0,0"))
            (rule "ifthenelse_split" (formula "18") (term "1,1,1,0,0"))
            (branch "self.left = null TRUE"
                (builtin "One Step Simplification" (formula "19"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "3"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "19") (term "0") (ifseqformula "4"))
               (rule "replace_known_left" (formula "19") (term "0") (ifseqformula "20"))
                (builtin "One Step Simplification" (formula "19"))
               (rule "true_left" (formula "19"))
                (builtin "Use Dependency Contract" (formula "16") (term "1") (ifInst ""  (formula "20") (term "1,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
               (rule "wellFormedAnon" (formula "21") (term "1,1,0,0,0,0"))
               (rule "replace_known_left" (formula "21") (term "0,1,0,0,0,0") (ifseqformula "4"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "26")) (ifInst ""  (formula "6")) (ifInst ""  (formula "4")) (ifInst ""  (formula "5")) (ifInst ""  (formula "10")) (ifInst ""  (formula "19")) (ifInst ""  (formula "22")))
               (rule "disjointDefinition" (formula "21") (term "0,0"))
               (rule "measuredByCheckEmpty" (formula "21") (term "1,0") (ifseqformula "8"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "commuteUnion" (formula "21") (term "1,1,0,0"))
               (rule "associativeLawUnion" (formula "21") (term "1,1,0,0"))
               (rule "cut_direct" (formula "20") (term "1"))
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() TRUE"
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "23") (term "1") (ifseqformula "20"))
                  (rule "close" (formula "23") (ifseqformula "13"))
               )
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() FALSE"
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "equalityToElementOfRight" (formula "20") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "allRight" (formula "20") (inst "sk=ov_0"))
                  (rule "allRight" (formula "20") (inst "sk=fv_0"))
                  (rule "notRight" (formula "20"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "notLeft" (formula "3"))
                  (rule "elementOfSetMinus" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                  (rule "closeFalse" (formula "1"))
               )
            )
            (branch "self.left = null FALSE"
               (rule "commuteUnion_2" (formula "18") (term "1,1,0,0"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "3"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1"))
               (rule "onlyCreatedObjectsAreReferenced" (formula "20") (term "0") (ifseqformula "4"))
               (rule "replace_known_right" (formula "1") (term "0") (ifseqformula "21"))
                (builtin "One Step Simplification" (formula "1"))
                (builtin "Use Dependency Contract" (formula "17") (term "1") (ifInst ""  (formula "20") (term "1,1")) (contract "Tree[Tree::treeSet()].JML accessible clause.0"))
               (rule "wellFormedAnon" (formula "21") (term "1,1,0,0,0,0"))
               (rule "replace_known_right" (formula "21") (term "0,1,0,0,1,1,1,0,0") (ifseqformula "22"))
                (builtin "One Step Simplification" (formula "21") (ifInst ""  (formula "27")) (ifInst ""  (formula "7")) (ifInst ""  (formula "5")) (ifInst ""  (formula "5")) (ifInst ""  (formula "6")) (ifInst ""  (formula "11")) (ifInst ""  (formula "23")))
               (rule "disjointDefinition" (formula "21") (term "0,0"))
               (rule "measuredByCheckEmpty" (formula "21") (term "1,0") (ifseqformula "9"))
                (builtin "One Step Simplification" (formula "21"))
               (rule "commuteUnion_2" (formula "21") (term "1,1,0,0"))
               (rule "commuteUnion_2" (formula "21") (term "0,1,1,0,0"))
               (rule "commuteUnion" (formula "21") (term "0,0,1,1,0,0"))
               (rule "cut_direct" (formula "20") (term "1"))
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() TRUE"
                   (builtin "One Step Simplification" (formula "21"))
                  (rule "true_left" (formula "21"))
                  (rule "applyEq" (formula "17") (term "1") (ifseqformula "20"))
                  (rule "applyEq" (formula "24") (term "1") (ifseqformula "20"))
                  (rule "close" (formula "24") (ifseqformula "14"))
               )
               (branch "CUT: self.treeSet() @heap[anon(allLocs ∖ self.footprint(), anon_heap«anonHeapFunction»)] = self.treeSet() FALSE"
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "notLeft" (formula "20"))
                  (rule "equalityToElementOfRight" (formula "20") (inst "ov=ov") (inst "fv=fv"))
                   (builtin "One Step Simplification" (formula "20"))
                  (rule "allRight" (formula "20") (inst "sk=ov_0"))
                  (rule "allRight" (formula "20") (inst "sk=fv_0"))
                  (rule "notRight" (formula "20"))
                  (rule "elementOfIntersect" (formula "1"))
                  (rule "andLeft" (formula "1"))
                  (rule "elementOfSetMinus" (formula "2"))
                  (rule "andLeft" (formula "2"))
                  (rule "notLeft" (formula "3"))
                  (rule "elementOfSetMinus" (formula "1"))
                   (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "2")))
                  (rule "closeFalse" (formula "1"))
               )
            )
         )
      )
   )
   (branch "Exceptional Post (contains)"
       (builtin "One Step Simplification" (formula "8"))
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
       (builtin "One Step Simplification" (formula "10"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "replaceKnownQuery_0" (formula "12") (term "0"))
      (rule "replaceKnownQuery_1" (formula "12") (term "1"))
      (rule "andLeft" (formula "8"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "9"))
      (rule "andLeft" (formula "11"))
      (rule "andLeft" (formula "8"))
      (rule "notLeft" (formula "9"))
      (rule "close" (formula "12") (ifseqformula "11"))
   )
   (branch "Pre (contains)"
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
       (builtin "One Step Simplification" (formula "9"))
       (builtin "One Step Simplification" (formula "8"))
      (rule "replaceKnownQuery_0" (formula "11") (term "0"))
      (rule "replaceKnownQuery_1" (formula "11") (term "1"))
      (rule "wellFormedAnon" (formula "9") (term "0,1"))
      (rule "andLeft" (formula "7"))
      (rule "andLeft" (formula "8"))
      (rule "eqSymm" (formula "9") (term "0,0,1"))
      (rule "eqSymm" (formula "12"))
      (rule "replace_known_left" (formula "10") (term "0,0,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "10") (ifInst ""  (formula "2")))
      (rule "assignment" (formula "9") (term "1"))
       (builtin "One Step Simplification" (formula "9"))
      (rule "selectCreatedOfAnonAsFormula" (formula "10") (term "1"))
      (rule "replace_known_left" (formula "10") (term "0,1") (ifseqformula "3"))
       (builtin "One Step Simplification" (formula "10"))
      (rule "limit_java_lang_Object__inv_" (formula "6"))
      (rule "replace_known_left" (formula "6") (term "1") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "6"))
      (rule "limit_Tree_treeSet" (formula "9") (term "1,0"))
      (rule "limit_java_lang_Object__inv_" (formula "12"))
      (rule "replace_known_right" (formula "1") (term "1") (ifseqformula "13"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "notLeft" (formula "1"))
      (rule "limit_Tree_footprint" (formula "13") (term "1,1,0"))
      (rule "limit_java_lang_Object__inv_" (formula "8"))
      (rule "replace_known_left" (formula "8") (term "0") (ifseqformula "7"))
       (builtin "One Step Simplification" (formula "8") (ifInst ""  (formula "9")))
      (rule "true_left" (formula "8"))
      (rule "methodCallEmpty" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "emptyModality" (formula "13") (term "1"))
       (builtin "One Step Simplification" (formula "13"))
      (rule "notRight" (formula "13"))
      (rule "eqSymm" (formula "1"))
      (rule "applyEq" (formula "12") (term "0,1") (ifseqformula "1"))
      (rule "equiv_left" (formula "12"))
      (branch
         (rule "applyEqRigid" (formula "17") (term "0") (ifseqformula "13"))
         (rule "eqSymm" (formula "17"))
         (rule "applyEqRigid" (formula "1") (term "1") (ifseqformula "13"))
          (builtin "Use Dependency Contract" (formula "15") (ifInst ""  (formula "9")) (contract "Tree[java.lang.Object::<inv>()].JML accessible clause.0"))
         (rule "wellFormedAnon" (formula "14") (term "1,1,0,0,0,0"))
         (rule "replace_known_left" (formula "14") (term "1,1") (ifseqformula "9"))
          (builtin "One Step Simplification" (formula "14") (ifInst ""  (formula "17")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "9")) (ifInst ""  (formula "16")))
         (rule "notLeft" (formula "14"))
         (rule "disjointDefinition" (formula "14") (term "0"))
         (rule "measuredByCheckEmpty" (formula "14") (term "1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "equalityToElementOfRight" (formula "14") (inst "ov=ov") (inst "fv=fv"))
          (builtin "One Step Simplification" (formula "14"))
         (rule "allRight" (formula "14") (inst "sk=ov_0"))
         (rule "allRight" (formula "14") (inst "sk=fv_0"))
         (rule "notRight" (formula "14"))
         (rule "elementOfIntersect" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "elementOfSetMinus" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "elementOfSetMinus" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "close" (formula "16") (ifseqformula "1"))
      )
      (branch
         (rule "apply_eq_boolean" (formula "17") (term "0") (ifseqformula "13"))
         (rule "eqSymm" (formula "17"))
          (builtin "One Step Simplification" (formula "17"))
         (rule "notRight" (formula "17"))
         (rule "apply_eq_boolean" (formula "2") (term "1") (ifseqformula "14"))
          (builtin "One Step Simplification" (formula "2"))
         (rule "notLeft" (formula "2"))
          (builtin "Use Dependency Contract" (formula "16") (ifInst ""  (formula "9")) (contract "Tree[java.lang.Object::<inv>()].JML accessible clause.0"))
         (rule "wellFormedAnon" (formula "12") (term "1,1,0,0,0,0"))
         (rule "replace_known_left" (formula "12") (term "0,1,0,0,0,0") (ifseqformula "3"))
          (builtin "One Step Simplification" (formula "12") (ifInst ""  (formula "18")) (ifInst ""  (formula "5")) (ifInst ""  (formula "3")) (ifInst ""  (formula "4")) (ifInst ""  (formula "9")) (ifInst ""  (formula "17")) (ifInst ""  (formula "9")))
         (rule "notLeft" (formula "12"))
         (rule "disjointDefinition" (formula "12") (term "0"))
         (rule "measuredByCheckEmpty" (formula "12") (term "1") (ifseqformula "7"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "equalityToElementOfRight" (formula "12") (inst "ov=ov") (inst "fv=fv"))
          (builtin "One Step Simplification" (formula "12"))
         (rule "allRight" (formula "12") (inst "sk=ov_0"))
         (rule "allRight" (formula "12") (inst "sk=fv_0"))
         (rule "notRight" (formula "12"))
         (rule "elementOfIntersect" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "elementOfSetMinus" (formula "1"))
          (builtin "One Step Simplification" (formula "1"))
         (rule "notLeft" (formula "1"))
         (rule "elementOfSetMinus" (formula "1"))
         (rule "andLeft" (formula "1"))
         (rule "close" (formula "14") (ifseqformula "1"))
      )
   )
   (branch "Null reference (callee = null)"
       (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
       (builtin "One Step Simplification" (formula "9") (ifInst ""  (formula "10")))
      (rule "closeTrue" (formula "9"))
   )
)
(branch "Exceptional Post (contains)"
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")))
    (builtin "One Step Simplification" (formula "8"))
   (rule "replaceKnownQuery_0" (formula "11") (term "0"))
   (rule "replaceKnownQuery_1" (formula "11") (term "1"))
   (rule "andLeft" (formula "7"))
   (rule "andLeft" (formula "8"))
   (rule "andLeft" (formula "7"))
   (rule "notLeft" (formula "7"))
   (rule "close" (formula "10") (ifseqformula "9"))
)
(branch "Pre (contains)"
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "6")) (ifInst ""  (formula "1")) (ifInst ""  (formula "3")))
   (rule "closeTrue" (formula "7"))
)
(branch "Null reference (callee = null)"
    (builtin "One Step Simplification" (formula "7") (ifInst ""  (formula "9")))
   (rule "closeTrue" (formula "7"))
)
)
}
