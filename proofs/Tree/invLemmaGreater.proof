\profile "Java Profile";

\settings {
"#Proof-Settings-Config-File
#Thu Jun 01 15:07:41 CEST 2023
[NewSMT]NoTypeHierarchy=false
[Labels]UseOriginLabels=true
[StrategyProperty]QUERYAXIOM_OPTIONS_KEY=QUERYAXIOM_ON
[NewSMT]Presburger=false
[SMTSettings]invariantForall=false
[Strategy]ActiveStrategy=JavaCardDLStrategy
[StrategyProperty]USER_TACLETS_OPTIONS_KEY1=USER_TACLETS_OFF
[StrategyProperty]QUANTIFIERS_OPTIONS_KEY=QUANTIFIERS_NON_SPLITTING_WITH_PROGS
[StrategyProperty]USER_TACLETS_OPTIONS_KEY2=USER_TACLETS_OFF
[Choice]DefaultChoices=JavaCard-JavaCard\\:off, Strings-Strings\\:on, assertions-assertions\\:safe, bigint-bigint\\:on, floatRules-floatRules\\:strictfpOnly, initialisation-initialisation\\:disableStaticInitialisation, intRules-intRules\\:arithmeticSemanticsIgnoringOF, integerSimplificationRules-integerSimplificationRules\\:full, javaLoopTreatment-javaLoopTreatment\\:efficient, mergeGenerateIsWeakeningGoal-mergeGenerateIsWeakeningGoal\\:off, methodExpansion-methodExpansion\\:modularOnly, modelFields-modelFields\\:treatAsAxiom, moreSeqRules-moreSeqRules\\:off, permissions-permissions\\:off, programRules-programRules\\:Java, reach-reach\\:on, runtimeExceptions-runtimeExceptions\\:ban, sequences-sequences\\:on, wdChecks-wdChecks\\:off, wdOperator-wdOperator\\:L
[StrategyProperty]LOOP_OPTIONS_KEY=LOOP_SCOPE_INV_TACLET
[StrategyProperty]INF_FLOW_CHECK_PROPERTY=INF_FLOW_CHECK_FALSE
[SMTSettings]UseBuiltUniqueness=false
[SMTSettings]explicitTypeHierarchy=false
[SMTSettings]instantiateHierarchyAssumptions=true
[StrategyProperty]NON_LIN_ARITH_OPTIONS_KEY=NON_LIN_ARITH_DEF_OPS
[SMTSettings]SelectedTaclets=
[StrategyProperty]DEP_OPTIONS_KEY=DEP_ON
[StrategyProperty]AUTO_INDUCTION_OPTIONS_KEY=AUTO_INDUCTION_OFF
[Strategy]MaximumNumberOfAutomaticApplications=50
[StrategyProperty]STOPMODE_OPTIONS_KEY=STOPMODE_DEFAULT
[StrategyProperty]CLASS_AXIOM_OPTIONS_KEY=CLASS_AXIOM_DELAYED
[SMTSettings]useConstantsForBigOrSmallIntegers=true
[StrategyProperty]MPS_OPTIONS_KEY=MPS_MERGE
[StrategyProperty]SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OPTIONS_KEY=SYMBOLIC_EXECUTION_NON_EXECUTION_BRANCH_HIDING_OFF
[Strategy]Timeout=-1
[StrategyProperty]SYMBOLIC_EXECUTION_ALIAS_CHECK_OPTIONS_KEY=SYMBOLIC_EXECUTION_ALIAS_CHECK_NEVER
[StrategyProperty]QUERY_NEW_OPTIONS_KEY=QUERY_ON
[SMTSettings]useUninterpretedMultiplication=true
[NewSMT]sqrtSMTTranslation=SMT
[StrategyProperty]BLOCK_OPTIONS_KEY=BLOCK_CONTRACT_INTERNAL
[StrategyProperty]METHOD_OPTIONS_KEY=METHOD_CONTRACT
[StrategyProperty]USER_TACLETS_OPTIONS_KEY3=USER_TACLETS_OFF
[NewSMT]identifier=OPEN
[SMTSettings]maxGenericSorts=2
[StrategyProperty]OSS_OPTIONS_KEY=OSS_ON
[NewSMT]Axiomatisations=false
[StrategyProperty]SPLITTING_OPTIONS_KEY=SPLITTING_DELAYED
[SMTSettings]integersMinimum=-2147483645
[StrategyProperty]VBT_PHASE=VBT_SYM_EX
[SMTSettings]integersMaximum=2147483645
"
}

\javaSource "../../src";

\include "../../iSet.key";

\proofObligation "#Proof Obligation Settings
#Thu Jun 01 15:07:41 CEST 2023
contract=Tree[Tree\\:\\:invLemmaGreater()].JML model_behavior operation contract.0
name=Tree[Tree\\:\\:invLemmaGreater()].JML model_behavior operation contract.0
class=de.uka.ilkd.key.proof.init.FunctionalOperationContractPO
";

\proof {
(keyLog "0" (keyUser "johanna" ) (keyVersion "6a929470ef499d0331f85df1bae1a5384116ec49"))

(autoModeTime "657")

(branch "dummy ID"
 (builtin "One Step Simplification" (formula "1") (newnames "heapAtPre,heapBefore,o,f"))
(rule "impRight" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "andLeft" (formula "1"))
(rule "notLeft" (formula "2"))
(rule "allRight" (formula "7") (inst "sk=k_0"))
(rule "Definition_axiom_for_invGreaterInTreeIffRight_in_Tree" (formula "7") (term "0") (ifseqformula "6"))
 (builtin "One Step Simplification" (formula "7"))
(rule "impRight" (formula "7"))
(rule "orRight" (formula "8"))
(rule "inEqSimp_gtToGeq" (formula "1"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0"))
(rule "polySimp_addComm1" (formula "1") (term "0"))
(rule "inEqSimp_sepNegMonomial1" (formula "1"))
(rule "polySimp_mulLiterals" (formula "1") (term "0"))
(rule "polySimp_elimOne" (formula "1") (term "0"))
(rule "Definition_axiom_for_invGreaterNotInLeft_in_Tree" (formula "6") (term "0,0") (ifseqformula "7"))
 (builtin "One Step Simplification" (formula "6"))
(rule "inEqSimp_gtToGeq" (formula "6") (term "0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0,0,0"))
(rule "inEqSimp_sepPosMonomial1" (formula "6") (term "0,0"))
(rule "polySimp_mulComm0" (formula "6") (term "1,0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,1,0,0"))
(rule "nnf_imp2or" (formula "6") (term "0"))
(rule "inEqSimp_notGeq" (formula "6") (term "0,0"))
(rule "polySimp_rightDist" (formula "6") (term "1,0,0,0,0"))
(rule "mul_literals" (formula "6") (term "0,1,0,0,0,0"))
(rule "polySimp_addAssoc" (formula "6") (term "0,0,0,0"))
(rule "add_literals" (formula "6") (term "0,0,0,0,0"))
(rule "add_zero_left" (formula "6") (term "0,0,0,0"))
(rule "inEqSimp_sepPosMonomial0" (formula "6") (term "0,0"))
(rule "polySimp_mulLiterals" (formula "6") (term "1,0,0"))
(rule "polySimp_elimOne" (formula "6") (term "1,0,0"))
(rule "Definition_axiom_for_treeSet_in_Tree" (formula "9") (term "1,0") (ifseqformula "7"))
(rule "replace_known_right" (formula "9") (term "0,1,1,1,0") (ifseqformula "8"))
 (builtin "One Step Simplification" (formula "9"))
(rule "inSetUnion" (formula "9") (term "0"))
(rule "inSetUnion" (formula "9") (term "1,0"))
 (builtin "One Step Simplification" (formula "9"))
(rule "eqSymm" (formula "9") (term "0,1,0"))
(rule "inEqSimp_contradEq3" (formula "9") (term "0,1,0") (ifseqformula "1"))
(rule "polySimp_mulComm0" (formula "9") (term "1,0,0,0,1,0"))
(rule "polySimp_pullOutFactor1b" (formula "9") (term "0,0,0,1,0"))
(rule "add_literals" (formula "9") (term "1,1,0,0,0,1,0"))
(rule "instAll" (formula "9") (term "0,0,0") (ifseqformula "6") (userinteraction))
(rule "unlimit_Tree_treeSet" (formula "10") (term "2,1,0,0") (userinteraction))
(rule "unlimit_Tree_treeSet" (formula "10") (term "1,1,1,0") (userinteraction))
(rule "times_zero_1" (formula "10") (term "1,0,0,0,1,0"))
(rule "add_zero_right" (formula "10") (term "0,0,0,1,0"))
(rule "qeq_literals" (formula "10") (term "0,0,1,0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "inEqSimp_commuteLeq" (formula "1") (term "0"))
(rule "inEqSimp_contradInEq0" (formula "1") (term "0") (ifseqformula "2"))
(rule "inEqSimp_homoInEq1" (formula "1") (term "0,0"))
(rule "polySimp_mulComm0" (formula "1") (term "1,0,0,0"))
(rule "polySimp_rightDist" (formula "1") (term "1,0,0,0"))
(rule "mul_literals" (formula "1") (term "0,1,0,0,0"))
(rule "polySimp_addAssoc" (formula "1") (term "0,0,0"))
(rule "polySimp_addComm0" (formula "1") (term "0,0,0,0"))
(rule "polySimp_pullOutFactor1b" (formula "1") (term "0,0,0"))
(rule "add_literals" (formula "1") (term "1,1,0,0,0"))
(rule "times_zero_1" (formula "1") (term "1,0,0,0"))
(rule "add_zero_right" (formula "1") (term "0,0,0"))
(rule "leq_literals" (formula "1") (term "0,0"))
 (builtin "One Step Simplification" (formula "1"))
(rule "commute_or" (formula "7") (term "1,0"))
(rule "Definition_axiom_for_treeSet_in_Tree" (formula "10") (term "1,1") (ifseqformula "9"))
(rule "inSetUnion" (formula "10") (term "1"))
(rule "inSetUnion" (formula "10") (term "1,1"))
 (builtin "One Step Simplification" (formula "10"))
(rule "eqSymm" (formula "10") (term "0,1,1"))
(rule "Definition_axiom_for_treeSet_in_Tree" (formula "10") (term "1,1,0") (ifseqformula "9"))
(rule "inSetUnion" (formula "10") (term "1,0"))
(rule "inSetUnion" (formula "10") (term "1,1,0"))
 (builtin "One Step Simplification" (formula "10"))
(rule "eqSymm" (formula "10") (term "0,1,1,0"))
(rule "shift_paren_or" (formula "7") (term "0"))
(rule "commute_or" (formula "10") (term "1,1"))
(rule "limit_Tree_treeSet" (formula "1") (term "1,0,1"))
(rule "commute_or" (formula "8") (term "0,0"))
(rule "shift_paren_or" (formula "11") (term "1"))
(rule "shift_paren_or" (formula "11") (term "1,0"))
(rule "commute_or_2" (formula "11") (term "1,0"))
(rule "shift_paren_or" (formula "11") (term "0"))
(rule "shift_paren_or" (formula "11") (term "0,0"))
(rule "equiv_right" (formula "11"))
(branch "Case '->'"
   (rule "orRight" (formula "12"))
   (rule "orRight" (formula "12"))
   (rule "replace_known_right" (formula "1") (term "1,0,0") (ifseqformula "12"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")) (ifInst ""  (formula "14")))
   (rule "cut_direct" (formula "9") (term "1,0"))
   (branch "CUT: self.left = null TRUE"
       (builtin "One Step Simplification" (formula "10"))
      (rule "true_left" (formula "10"))
      (rule "replace_known_left" (formula "1") (term "0,1") (ifseqformula "9"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "closeFalse" (formula "1"))
   )
   (branch "CUT: self.left = null FALSE"
       (builtin "One Step Simplification" (formula "9"))
      (rule "replace_known_right" (formula "1") (term "0,1") (ifseqformula "10"))
       (builtin "One Step Simplification" (formula "1"))
      (rule "replace_known_left" (formula "3") (term "0,1") (ifseqformula "1"))
       (builtin "One Step Simplification" (formula "3") (ifInst ""  (formula "10")))
      (rule "closeFalse" (formula "3"))
   )
)
(branch "Case '<-'"
   (rule "orRight" (formula "12"))
   (rule "orRight" (formula "12"))
   (rule "orRight" (formula "12"))
   (rule "replace_known_right" (formula "1") (term "1,0") (ifseqformula "14"))
    (builtin "One Step Simplification" (formula "1") (ifInst ""  (formula "13")) (ifInst ""  (formula "15")))
   (rule "closeFalse" (formula "1"))
)
)
}
